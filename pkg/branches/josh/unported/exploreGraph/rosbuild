#!/usr/bin/env ruby

if !ENV['ROS_ROOT']
  puts "aaaaaaa! The ROS_ROOT environment variable is not set."
  puts "Navigate to your ROS_ROOT directory and run ./set_ros_root"
  puts "(alternatively, you can do this in your .bashrc file"
  exit
end

pkg_path = File.expand_path($0).split('/')
pkg_path = pkg_path[0,pkg_path.length-1].join('/')

if ARGV.length == 0 || ARGV[0] == 'update'
  puts "generating flows..."
  # look up the latest versions of rosrb and rospy
  rosrb = `#{ENV['ROS_ROOT']}/rospack latest rosrb`.chomp
  rospy = `#{ENV['ROS_ROOT']}/rospack latest rospy`.chomp
  puts `#{rospy}/scripts/flowgen_py #{pkg_path}/flows/*.flow`
  puts `#{rosrb}/scripts/flowgen_rb #{pkg_path}/flows/*.flow`
elsif ARGV[0] == 'clean'
  puts "cleaning auto-generated flows..."
  # string hackery to generate the same filenames the flow generators do
  pkg = File.expand_path($0).split('/')[-2]
  Dir.glob("#{pkg_path}/flows/*.flow").each do |f|
    f = f.split('/')[-1]
    f[-5,:end] = ''
    puts "deleting auto-generated flows for flow #{f}"
    `rm #{pkg_path}/flows/python/#{pkg}/#{f}.py` if File.exist? "#{pkg_path}/flows/python/#{pkg}/#{f}.py"
    `rm #{pkg_path}/flows/python/#{pkg}/#{f}.pyc` if File.exist? "#{pkg_path}/flows/python/#{pkg}/#{f}.pyc"
    `rm #{pkg_path}/flows/ruby/#{pkg}/Flow#{f}.rb` if File.exist? "#{pkg_path}/flows/ruby/#{pkg}/Flow#{f}.rb"
  end
  `rm #{pkg_path}/flows/python/#{pkg}/__init__.py` if File.exist? "#{pkg_path}/flows/python/#{pkg}/__init__.py"
  `rm #{pkg_path}/flows/python/#{pkg}/__init__.pyc` if File.exist? "#{pkg_path}/flows/python/#{pkg}/__init__.pyc"
else
  puts "unknown parameter: #{ARGV[0]}"
end
