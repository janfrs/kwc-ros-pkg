*** newmat.h	2008-08-14 14:40:35.886993212 -0700
--- ../../newmat.h	2008-08-14 14:38:59.185946033 -0700
*************** protected:
*** 444,450 ****
     virtual GeneralMatrix* Transpose(TransposedMatrix*, MatrixType);
     void CheckConversion(const BaseMatrix&);     // check conversion OK
     void ReSize(int, int, int);                  // change dimensions
!    virtual short SimpleAddOK(const GeneralMatrix* gm) { return 0; }
               // see bandmat.cpp for explanation
  public:
     GeneralMatrix* Evaluate(MatrixType mt=MatrixTypeUnSp);
--- 444,450 ----
     virtual GeneralMatrix* Transpose(TransposedMatrix*, MatrixType);
     void CheckConversion(const BaseMatrix&);     // check conversion OK
     void ReSize(int, int, int);                  // change dimensions
!    virtual short SimpleAddOK(const GeneralMatrix* ) { return 0; }
               // see bandmat.cpp for explanation
  public:
     GeneralMatrix* Evaluate(MatrixType mt=MatrixTypeUnSp);
*************** public:
*** 582,588 ****
     Real* operator[](int m) { return store+m*ncols; }
     const Real* operator[](int m) const { return store+m*ncols; }
  #endif
!    Matrix(const Matrix& gm) { GetMatrix(&gm); }
     GeneralMatrix* MakeSolver();
     Real Trace() const;
     void GetRow(MatrixRowCol&);
--- 582,588 ----
     Real* operator[](int m) { return store+m*ncols; }
     const Real* operator[](int m) const { return store+m*ncols; }
  #endif
!    Matrix(const Matrix& gm):GeneralMatrix() { GetMatrix(&gm); }
     GeneralMatrix* MakeSolver();
     Real Trace() const;
     void GetRow(MatrixRowCol&);
*************** public:
*** 617,629 ****
        :  Matrix(m,n) { MakeRowPointer(); }
     nricMatrix(const BaseMatrix& bm)             // evaluate BaseMatrix
        :  Matrix(bm) { MakeRowPointer(); }
!    void operator=(const BaseMatrix& bm)
        { DeleteRowPointer(); Matrix::operator=(bm); MakeRowPointer(); }
     void operator=(Real f) { GeneralMatrix::operator=(f); }
     void operator=(const nricMatrix& m) { operator=((const BaseMatrix&)m); }
     void operator<<(const BaseMatrix& X)
        { DeleteRowPointer(); Eq(X,this->Type(),true); MakeRowPointer(); }
!    nricMatrix(const nricMatrix& gm) { GetMatrix(&gm); MakeRowPointer(); }
     void ReSize(int m, int n)               // change dimensions
        { DeleteRowPointer(); Matrix::ReSize(m,n); MakeRowPointer(); }
     void ReSize(const GeneralMatrix& A);
--- 617,629 ----
        :  Matrix(m,n) { MakeRowPointer(); }
     nricMatrix(const BaseMatrix& bm)             // evaluate BaseMatrix
        :  Matrix(bm) { MakeRowPointer(); }
!   void operator=(const BaseMatrix& bm)
        { DeleteRowPointer(); Matrix::operator=(bm); MakeRowPointer(); }
     void operator=(Real f) { GeneralMatrix::operator=(f); }
     void operator=(const nricMatrix& m) { operator=((const BaseMatrix&)m); }
     void operator<<(const BaseMatrix& X)
        { DeleteRowPointer(); Eq(X,this->Type(),true); MakeRowPointer(); }
!    nricMatrix(const nricMatrix& gm) : Matrix() { GetMatrix(&gm); MakeRowPointer(); }
     void ReSize(int m, int n)               // change dimensions
        { DeleteRowPointer(); Matrix::ReSize(m,n); MakeRowPointer(); }
     void ReSize(const GeneralMatrix& A);
*************** public:
*** 653,659 ****
     const Real* operator[](int m) const { return store+(m*(m+1))/2; }
  #endif
     MatrixType Type() const;
!    SymmetricMatrix(const SymmetricMatrix& gm) { GetMatrix(&gm); }
     Real SumSquare() const;
     Real SumAbsoluteValue() const;
     Real Sum() const;
--- 653,659 ----
     const Real* operator[](int m) const { return store+(m*(m+1))/2; }
  #endif
     MatrixType Type() const;
!    SymmetricMatrix(const SymmetricMatrix& gm)  : GeneralMatrix() { GetMatrix(&gm); }
     Real SumSquare() const;
     Real SumAbsoluteValue() const;
     Real Sum() const;
*************** public:
*** 680,686 ****
     void operator=(const UpperTriangularMatrix& m)
        { operator=((const BaseMatrix&)m); }
     UpperTriangularMatrix(const BaseMatrix&);
!    UpperTriangularMatrix(const UpperTriangularMatrix& gm) { GetMatrix(&gm); }
     void operator=(Real f) { GeneralMatrix::operator=(f); }
     Real& operator()(int, int);                  // access element
     Real& element(int, int);                     // access element
--- 680,686 ----
     void operator=(const UpperTriangularMatrix& m)
        { operator=((const BaseMatrix&)m); }
     UpperTriangularMatrix(const BaseMatrix&);
!    UpperTriangularMatrix(const UpperTriangularMatrix& gm):GeneralMatrix() { GetMatrix(&gm); }
     void operator=(Real f) { GeneralMatrix::operator=(f); }
     Real& operator()(int, int);                  // access element
     Real& element(int, int);                     // access element
*************** public:
*** 714,720 ****
     LowerTriangularMatrix() {}
     ~LowerTriangularMatrix() {}
     LowerTriangularMatrix(ArrayLengthSpecifier);
!    LowerTriangularMatrix(const LowerTriangularMatrix& gm) { GetMatrix(&gm); }
     LowerTriangularMatrix(const BaseMatrix& M);
     void operator=(const BaseMatrix&);
     void operator=(Real f) { GeneralMatrix::operator=(f); }
--- 714,720 ----
     LowerTriangularMatrix() {}
     ~LowerTriangularMatrix() {}
     LowerTriangularMatrix(ArrayLengthSpecifier);
!    LowerTriangularMatrix(const LowerTriangularMatrix& gm) : GeneralMatrix()  { GetMatrix(&gm); }
     LowerTriangularMatrix(const BaseMatrix& M);
     void operator=(const BaseMatrix&);
     void operator=(Real f) { GeneralMatrix::operator=(f); }
*************** public:
*** 753,759 ****
     ~DiagonalMatrix() {}
     DiagonalMatrix(ArrayLengthSpecifier);
     DiagonalMatrix(const BaseMatrix&);
!    DiagonalMatrix(const DiagonalMatrix& gm) { GetMatrix(&gm); }
     void operator=(const BaseMatrix&);
     void operator=(Real f) { GeneralMatrix::operator=(f); }
     void operator=(const DiagonalMatrix& m) { operator=((const BaseMatrix&)m); }
--- 753,759 ----
     ~DiagonalMatrix() {}
     DiagonalMatrix(ArrayLengthSpecifier);
     DiagonalMatrix(const BaseMatrix&);
!    DiagonalMatrix(const DiagonalMatrix& gm) : GeneralMatrix() { GetMatrix(&gm); }
     void operator=(const BaseMatrix&);
     void operator=(Real f) { GeneralMatrix::operator=(f); }
     void operator=(const DiagonalMatrix& m) { operator=((const BaseMatrix&)m); }
*************** public:
*** 779,785 ****
     void NextRow(MatrixRowCol&);
     void NextCol(MatrixRowCol&);
     void NextCol(MatrixColX&);
!    GeneralMatrix* MakeSolver() { return this; } // for solving
     void Solver(MatrixColX&, const MatrixColX&);
     GeneralMatrix* Transpose(TransposedMatrix*, MatrixType);
     void ReSize(int);                       // change dimensions
--- 779,785 ----
     void NextRow(MatrixRowCol&);
     void NextCol(MatrixRowCol&);
     void NextCol(MatrixColX&);
!   GeneralMatrix* MakeSolver() { return this; } // for solving
     void Solver(MatrixColX&, const MatrixColX&);
     GeneralMatrix* Transpose(TransposedMatrix*, MatrixType);
     void ReSize(int);                       // change dimensions
*************** public:
*** 799,805 ****
     ~RowVector() {}
     RowVector(ArrayLengthSpecifier n) : Matrix(1,n.Value()) {}
     RowVector(const BaseMatrix&);
!    RowVector(const RowVector& gm) { GetMatrix(&gm); }
     void operator=(const BaseMatrix&);
     void operator=(Real f) { GeneralMatrix::operator=(f); }
     void operator=(const RowVector& m) { operator=((const BaseMatrix&)m); }
--- 799,805 ----
     ~RowVector() {}
     RowVector(ArrayLengthSpecifier n) : Matrix(1,n.Value()) {}
     RowVector(const BaseMatrix&);
!    RowVector(const RowVector& gm) : Matrix() { GetMatrix(&gm); }
     void operator=(const BaseMatrix&);
     void operator=(Real f) { GeneralMatrix::operator=(f); }
     void operator=(const RowVector& m) { operator=((const BaseMatrix&)m); }
*************** public:
*** 837,843 ****
     ~ColumnVector() {}
     ColumnVector(ArrayLengthSpecifier n) : Matrix(n.Value(),1) {}
     ColumnVector(const BaseMatrix&);
!    ColumnVector(const ColumnVector& gm) { GetMatrix(&gm); }
     void operator=(const BaseMatrix&);
     void operator=(Real f) { GeneralMatrix::operator=(f); }
     void operator=(const ColumnVector& m) { operator=((const BaseMatrix&)m); }
--- 837,843 ----
     ~ColumnVector() {}
     ColumnVector(ArrayLengthSpecifier n) : Matrix(n.Value(),1) {}
     ColumnVector(const BaseMatrix&);
!    ColumnVector(const ColumnVector& gm) : Matrix() { GetMatrix(&gm); }
     void operator=(const BaseMatrix&);
     void operator=(Real f) { GeneralMatrix::operator=(f); }
     void operator=(const ColumnVector& m) { operator=((const BaseMatrix&)m); }
*************** public:
*** 913,919 ****
     Real* operator[](int m) { return store+(upper+lower)*m+lower; }
     const Real* operator[](int m) const { return store+(upper+lower)*m+lower; }
  #endif
!    BandMatrix(const BandMatrix& gm) { GetMatrix(&gm); }
     LogAndSign LogDeterminant() const;
     GeneralMatrix* MakeSolver();
     Real Trace() const;
--- 913,919 ----
     Real* operator[](int m) { return store+(upper+lower)*m+lower; }
     const Real* operator[](int m) const { return store+(upper+lower)*m+lower; }
  #endif
!    BandMatrix(const BandMatrix& gm) : GeneralMatrix() { GetMatrix(&gm); }
     LogAndSign LogDeterminant() const;
     GeneralMatrix* MakeSolver();
     Real Trace() const;
*************** public:
*** 964,970 ****
     void operator=(const UpperBandMatrix& m)
        { operator=((const BaseMatrix&)m); }
     MatrixType Type() const;
!    UpperBandMatrix(const UpperBandMatrix& gm) { GetMatrix(&gm); }
     GeneralMatrix* MakeSolver() { return this; }
     void Solver(MatrixColX&, const MatrixColX&);
     LogAndSign LogDeterminant() const;
--- 964,970 ----
     void operator=(const UpperBandMatrix& m)
        { operator=((const BaseMatrix&)m); }
     MatrixType Type() const;
!    UpperBandMatrix(const UpperBandMatrix& gm) : BandMatrix() { GetMatrix(&gm); }
     GeneralMatrix* MakeSolver() { return this; }
     void Solver(MatrixColX&, const MatrixColX&);
     LogAndSign LogDeterminant() const;
*************** public:
*** 997,1003 ****
     void operator=(const LowerBandMatrix& m)
        { operator=((const BaseMatrix&)m); }
     MatrixType Type() const;
!    LowerBandMatrix(const LowerBandMatrix& gm) { GetMatrix(&gm); }
     GeneralMatrix* MakeSolver() { return this; }
     void Solver(MatrixColX&, const MatrixColX&);
     LogAndSign LogDeterminant() const;
--- 997,1003 ----
     void operator=(const LowerBandMatrix& m)
        { operator=((const BaseMatrix&)m); }
     MatrixType Type() const;
!    LowerBandMatrix(const LowerBandMatrix& gm) : BandMatrix() { GetMatrix(&gm); }
     GeneralMatrix* MakeSolver() { return this; }
     void Solver(MatrixColX&, const MatrixColX&);
     LogAndSign LogDeterminant() const;
*************** public:
*** 1040,1046 ****
     const Real* operator[](int m) const { return store+lower*(m+1); }
  #endif
     MatrixType Type() const;
!    SymmetricBandMatrix(const SymmetricBandMatrix& gm) { GetMatrix(&gm); }
     GeneralMatrix* MakeSolver();
     Real SumSquare() const;
     Real SumAbsoluteValue() const;
--- 1040,1046 ----
     const Real* operator[](int m) const { return store+lower*(m+1); }
  #endif
     MatrixType Type() const;
!    SymmetricBandMatrix(const SymmetricBandMatrix& gm) : GeneralMatrix() { GetMatrix(&gm); }
     GeneralMatrix* MakeSolver();
     Real SumSquare() const;
     Real SumAbsoluteValue() const;
*************** public:
*** 1108,1114 ****
     ~IdentityMatrix() {}
     IdentityMatrix(ArrayLengthSpecifier n) : GeneralMatrix(1)
        { nrows = ncols = n.Value(); *store = 1; }
!    IdentityMatrix(const IdentityMatrix& gm) { GetMatrix(&gm); }
     IdentityMatrix(const BaseMatrix&);
     void operator=(const BaseMatrix&);
     void operator=(Real f) { GeneralMatrix::operator=(f); }
--- 1108,1114 ----
     ~IdentityMatrix() {}
     IdentityMatrix(ArrayLengthSpecifier n) : GeneralMatrix(1)
        { nrows = ncols = n.Value(); *store = 1; }
!    IdentityMatrix(const IdentityMatrix& gm) : GeneralMatrix() { GetMatrix(&gm); }
     IdentityMatrix(const BaseMatrix&);
     void operator=(const BaseMatrix&);
     void operator=(Real f) { GeneralMatrix::operator=(f); }
*************** public:
*** 1149,1155 ****
     GenericMatrix() : gm(0) {}
     GenericMatrix(const BaseMatrix& bm)
        { gm = ((BaseMatrix&)bm).Evaluate(); gm = gm->Image(); }
!    GenericMatrix(const GenericMatrix& bm)
        { gm = bm.gm->Image(); }
     void operator=(const GenericMatrix&);
     void operator=(const BaseMatrix&);
--- 1149,1155 ----
     GenericMatrix() : gm(0) {}
     GenericMatrix(const BaseMatrix& bm)
        { gm = ((BaseMatrix&)bm).Evaluate(); gm = gm->Image(); }
!    GenericMatrix(const GenericMatrix& bm) : BaseMatrix()
        { gm = bm.gm->Image(); }
     void operator=(const GenericMatrix&);
     void operator=(const BaseMatrix&);
*************** public:
*** 1494,1500 ****
  #ifdef TEMPS_DESTROYED_QUICKLY_R
     ReturnMatrixX(const ReturnMatrixX& tm);
  #else
!    ReturnMatrixX(const ReturnMatrixX& tm) : gm(tm.gm) {}
  #endif
     ReturnMatrixX(const GeneralMatrix* gmx) : gm((GeneralMatrix*&)gmx) {}
  //   ReturnMatrixX(GeneralMatrix&);
--- 1494,1500 ----
  #ifdef TEMPS_DESTROYED_QUICKLY_R
     ReturnMatrixX(const ReturnMatrixX& tm);
  #else
!    ReturnMatrixX(const ReturnMatrixX& tm) : BaseMatrix(),  gm(tm.gm) {}
  #endif
     ReturnMatrixX(const GeneralMatrix* gmx) : gm((GeneralMatrix*&)gmx) {}
  //   ReturnMatrixX(GeneralMatrix&);
