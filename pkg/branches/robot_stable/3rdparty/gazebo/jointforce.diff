Index: server/physics/Joint.hh
===================================================================
--- server/physics/Joint.hh	(Revision 6545)
+++ server/physics/Joint.hh	(Arbeitskopie)
@@ -124,6 +124,9 @@
     /// \brief Get the CFM of this joint
     public: double GetCFM();
 
+    /// \brief Get the feedback data structure for this joint, if set
+    public: dJointFeedback *GetFeedback();
+
     /// \brief Get the high stop of an axis(index).
     public: double GetHighStop(int index=0);
 
@@ -145,6 +148,9 @@
     /// \brief Name of this joint
     private: std::string name;
 
+    /// \brief Feedback data for this joint
+    private: dJointFeedback* feedback;
+
     private: OgreVisual *visual;
 
     private: Model *model;
Index: server/physics/Joint.cc
===================================================================
--- server/physics/Joint.cc	(Revision 6545)
+++ server/physics/Joint.cc	(Arbeitskopie)
@@ -88,6 +88,10 @@
   this->line1->AddPoint(Vector3(0,0,0));
   this->line2->AddPoint(Vector3(0,0,0));
   this->line2->AddPoint(Vector3(0,0,0));
+  if(node->GetBool("providefeedback", false, 0)) {
+      this->feedback = new dJointFeedback;
+      dJointSetFeedback(this->jointId, this->feedback);
+  }
 
 }
 
@@ -258,6 +262,13 @@
   return this->GetParam(dParamSuspensionCFM);
 }
 
+///////////////////////////////////////////////////////////////////////////////
+/// Get the feedback data structure of this joint
+dJointFeedback *Joint::GetFeedback()
+{
+  return dJointGetFeedback(this->jointId);
+}
+
 ////////////////////////////////////////////////////////////////////////////////
 /// Get the high stop of an axis(index).
 double Joint::GetHighStop(int index)
Index: server/controllers/opaque/jointforce/JointForce.hh
===================================================================
--- server/controllers/opaque/jointforce/JointForce.hh	(Revision 0)
+++ server/controllers/opaque/jointforce/JointForce.hh	(Revision 0)
@@ -0,0 +1,92 @@
+/*
+ *  Gazebo - Outdoor Multi-Robot Simulator
+ *  Copyright (C) 2003
+ *     Nate Koenig & Andrew Howard
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+/*
+ * Desc: Joint Force Controller
+ * Author: Benjamin Kloster
+ * Date: 13 March 2008
+ */
+#ifndef JOINTFORCE_CONTROLLER_HH
+#define JOINTFORCE_CONTROLLER_HH
+
+/// Maximum number of joints that can be watched by one controller
+#define GAZEBO_JOINTFORCE_CONTROLLER_MAX_FEEDBACKS 16
+
+#include "Controller.hh"
+#include "Entity.hh"
+#include <ode/ode.h>
+#include <sys/time.h>
+
+
+namespace gazebo
+{
+/// \addtogroup gazebo_controller
+/// \{
+/** \defgroup jointforce_controller jointforce
+
+  \brief A controller that measures forces and torques exerted by joints
+
+  \{
+*/
+
+/// \brief A JointForce controller
+class JointForce : public Controller
+{
+  /// Constructor
+    public: JointForce(Entity *parent );
+
+  /// Destructor
+    public: virtual ~JointForce();
+
+  /// Load the controller
+  /// \param node XML config node
+  /// \return 0 on success
+  protected: virtual void LoadChild(XMLConfigNode *node);
+
+  /// Init the controller
+  /// \return 0 on success
+  protected: virtual void InitChild();
+
+  /// Update the controller
+  /// \return 0 on success
+  protected: virtual void UpdateChild(UpdateParams &params);
+
+  /// Finalize the controller
+  /// \return 0 on success
+  protected: virtual void FiniChild();
+
+  /// The parent Model
+  private: Model *myParent;
+
+  /// The Iface. The dJointFeedback structs are rather arbitrary, so we use an Opaque Interface
+  private: OpaqueIface *myIface;
+  /// The joint feedbacks
+  private: dJointFeedback *jointfeedbacks[GAZEBO_JOINTFORCE_CONTROLLER_MAX_FEEDBACKS];
+  /// The number of joints we are watching
+  private: int n_joints;
+};
+
+/** \} */
+/// \}
+
+}
+
+#endif
+
Index: server/controllers/opaque/jointforce/JointForce.cc
===================================================================
--- server/controllers/opaque/jointforce/JointForce.cc	(Revision 0)
+++ server/controllers/opaque/jointforce/JointForce.cc	(Revision 0)
@@ -0,0 +1,121 @@
+/*
+ *  Gazebo - Outdoor Multi-Robot Simulator
+ *  Copyright (C) 2003
+ *     Nate Koenig & Andrew Howard
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+/*
+ * Desc: Joint Force controller
+ * Author: Benjamin Kloster
+ * Date: 13 March 2008
+ */
+
+#include "Global.hh"
+#include "XMLConfig.hh"
+#include "Model.hh"
+#include "World.hh"
+#include "gazebo.h"
+#include "GazeboError.hh"
+#include "ControllerFactory.hh"
+#include "Simulator.hh"
+#include "JointForce.hh"
+
+using namespace gazebo;
+
+GZ_REGISTER_STATIC_CONTROLLER("jointforce", JointForce);
+
+////////////////////////////////////////////////////////////////////////////////
+// Constructor
+JointForce::JointForce(Entity *parent )
+  : Controller(parent)
+{
+    this->myParent = dynamic_cast<Model*>(this->parent);
+
+    if (!this->myParent)
+        gzthrow("ControllerStub controller requires a Model as its parent");
+}
+
+////////////////////////////////////////////////////////////////////////////////
+// Destructor
+JointForce::~JointForce()
+{
+}
+
+////////////////////////////////////////////////////////////////////////////////
+// Load the controller
+void JointForce::LoadChild(XMLConfigNode *node)
+{
+    XMLConfigNode *jNode;
+    Joint *joint;
+    std::string jointName;
+    dJointFeedback *jFeedback = new dJointFeedback;
+    int i =0;
+    this->myIface = dynamic_cast<OpaqueIface*>(this->ifaces[0]);
+    if (!this->myIface) {
+        gzthrow("JointForce controller requires an  OpaqueIface");
+    }
+    jNode = node->GetChild("joint");
+    while(jNode && i < GAZEBO_JOINTFORCE_CONTROLLER_MAX_FEEDBACKS)
+    {
+        jointName = jNode->GetString("name","",1);
+        joint = this->myParent->GetJoint(jointName);
+        jFeedback = joint->GetFeedback();
+        if(jFeedback) {
+            this->jointfeedbacks[i] = jFeedback;
+            i++;
+        }
+        jNode = jNode->GetNext("joint");
+    }
+    this->n_joints = i;
+}
+
+////////////////////////////////////////////////////////////////////////////////
+// Initialize the controller
+void JointForce::InitChild()
+{
+    //this->myIface->data->data = new uint8_t[sizeof(dJointFeedback)*n_joints];
+}
+
+////////////////////////////////////////////////////////////////////////////////
+// Update the controller
+void JointForce::UpdateChild(UpdateParams &params)
+{
+  this->myIface->Lock(1);
+  this->myIface->data->head.time = Simulator::Instance()->GetSimTime();
+  // Let me explain this number: each joint reports 4 vectors: Force and torque
+  // on each jointed object, respectively. These vectors have 4 elements: x,y,z
+  // and a fourth one. So we transmit 4 dReals per vector.
+  this->myIface->data->data_count = n_joints*4*4*sizeof(dReal);
+
+  for(int i=0; i< n_joints; i++) {
+    // Copy vector for force on first object
+    memcpy(this->myIface->data->data + (i*4 + 0)*4*sizeof(dReal), this->jointfeedbacks[i]->f1, 4*sizeof(dReal));
+    // Copy vector for torque on first object
+    memcpy(this->myIface->data->data + (i*4 + 1)*4*sizeof(dReal), this->jointfeedbacks[i]->t1, 4*sizeof(dReal));
+    // Copy vector for force on second object
+    memcpy(this->myIface->data->data + (i*4 + 2)*4*sizeof(dReal), this->jointfeedbacks[i]->f2, 4*sizeof(dReal));
+    // Copy vector for torque on second object
+    memcpy(this->myIface->data->data + (i*4 + 3)*4*sizeof(dReal), this->jointfeedbacks[i]->t2, 4*sizeof(dReal));
+  }
+  this->myIface->Unlock();
+}
+
+////////////////////////////////////////////////////////////////////////////////
+// Finalize the controller
+void JointForce::FiniChild()
+{
+}
Index: server/controllers/opaque/jointforce/SConscript
===================================================================
--- server/controllers/opaque/jointforce/SConscript	(Revision 0)
+++ server/controllers/opaque/jointforce/SConscript	(Revision 0)
@@ -0,0 +1,7 @@
+#Import variable
+Import('env staticObjs sharedObjs')
+
+sources = Split('JointForce.cc')
+
+staticObjs.append(env.StaticObject(sources))
+sharedObjs.append(env.SharedObject(sources))
Index: server/controllers/opaque/SConscript
===================================================================
--- server/controllers/opaque/SConscript	(Revision 0)
+++ server/controllers/opaque/SConscript	(Revision 0)
@@ -0,0 +1,7 @@
+#Import variable
+Import('env staticObjs sharedObjs')
+
+dirs = Split('jointforce contact')
+
+for subdir in dirs :
+  SConscript('%s/SConscript' % subdir)
