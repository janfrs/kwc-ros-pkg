--- /afs/cs.stanford.edu/u/ellenrk/scratch/KNI_3.9.2/src/Base/kmlExt.cpp	2007-09-27 22:38:10.000000000 -0700
+++ src/Base/kmlExt.cpp	2008-06-25 18:21:32.000000000 -0700
@@ -394,6 +394,34 @@
 	return temp;
 }
 
+std::vector<double>
+CKatana::getJointAngles(bool refresh) const 
+{
+	if (refresh)
+		base->recvMPS();
+  std::vector<double> angs;
+  for (int i = 0; i < getNumberOfMotors(); i++)
+  {
+		int enc = getMotorEncoders(i, false);
+    double angoff = base->GetMOT()->arr[i].GetInitialParameters()->angleOffset;
+    double epc    = base->GetMOT()->arr[i].GetInitialParameters()->encodersPerCycle;
+    double encoff = base->GetMOT()->arr[i].GetInitialParameters()->encoderOffset;
+    double rotdir = base->GetMOT()->arr[i].GetInitialParameters()->rotationDirection;
+    angs.push_back(-((enc - encoff) * 2 * M_PI / epc / rotdir - angoff) * 180 / M_PI);
+  }
+  return angs;
+}
+
+TMotInit CKatana::getMotorParameters(int motor)
+{
+  TMotInit motorParams;
+  motorParams.angleOffset = base->GetMOT()->arr[motor].GetInitialParameters()->angleOffset;
+  motorParams.encodersPerCycle    = base->GetMOT()->arr[motor].GetInitialParameters()->encodersPerCycle;
+  motorParams.encoderOffset = base->GetMOT()->arr[motor].GetInitialParameters()->encoderOffset;
+  motorParams.rotationDirection = base->GetMOT()->arr[motor].GetInitialParameters()->rotationDirection;
+  return (motorParams);
+}
+
 short
 CKatana::getMotorVelocityLimit(short number) const {
 	return base->GetMOT()->arr[number].GetDYL()->maxpspeed_nmp;
@@ -514,6 +542,52 @@
 }
 
 void
+CKatana::moveRobotToDeg(std::vector<double>::const_iterator start, std::vector<double>::const_iterator end, bool waitUntilReached, int encTolerance, int waitTimeout) {
+
+	//         // We'll do that some other time. We need to store the velocity twice for that
+	//         for(unsigned int i = 0; i < getNumberOfMotors(); ++i) {
+	//             distance[i] = std::abs(act_pos[i] - solution[i]);
+	//         }
+	//         int maxDistNr = std::distance(distance.begin(), std::max_element(distance.begin(), distance.end()));
+
+	int i = 0;
+	std::vector<double>::const_iterator iter = start;
+	while( (iter != end) && (i < getNumberOfMotors()) ) {
+		//             if(i != maxDistNr) {
+		//                 mot->arr[i].setSpeedLimit(distance[i]/(distance[maxDistNr]/mot->arr[maxDistNr].GetDYL()->maxpspeed_nmp));
+		//             }
+		movDegrees(i, *iter, false, encTolerance, waitTimeout);
+		++i;
+		++iter;
+	}
+
+	// If wait is true, check if the target position is reached
+	if(!waitUntilReached)
+		return;
+
+	const TKatMOT* mot = base->GetMOT();
+	bool pos_reached;
+	KNI::Timer t(waitTimeout), poll_t(POLLFREQUENCY);
+	t.Start();
+	while (true) {
+		if (t.Elapsed())
+			throw MotorTimeoutException();
+		pos_reached = true;
+		poll_t.Start();
+		base->recvMPS(); // get position for all motors
+		base->recvGMS(); // get status flags for all motors
+		for (int idx=0; idx < i; idx++) {
+			if (mot->arr[idx].GetPVP()->msf == 40)
+				throw MotorCrashException();
+			pos_reached &= std::abs(mot->arr[idx].GetTPS()->tarpos - mot->arr[idx].GetPVP()->pos) < 100;
+		}
+		if (pos_reached)
+			break;
+		poll_t.WaitUntilElapsed();
+	}
+}
+
+void
 CKatana::moveRobotToEnc(std::vector<int> encoders, bool waitUntilReached, int encTolerance, int waitTimeout) {
 	moveRobotToEnc(encoders.begin(), encoders.end(), waitUntilReached, encTolerance, waitTimeout);
 }
@@ -559,14 +633,14 @@
 CKatana::openGripper(bool waitUntilReached, int waitTimeout) {
 	if(!_gripperIsPresent)
 		return;
-	moveMotorToEnc( getNumberOfMotors()-1, _gripperOpenEncoders, waitUntilReached, waitTimeout );
+	moveMotorToEnc( getNumberOfMotors()-1, _gripperOpenEncoders, waitUntilReached, 100, waitTimeout );
 }
 
 void
 CKatana::closeGripper(bool waitUntilReached, int waitTimeout) {
 	if(!_gripperIsPresent)
 		return;
-	moveMotorToEnc( getNumberOfMotors()-1, _gripperCloseEncoders, waitUntilReached, waitTimeout );
+	moveMotorToEnc( getNumberOfMotors()-1, _gripperCloseEncoders, waitUntilReached, 100, waitTimeout );
 }
 
 
