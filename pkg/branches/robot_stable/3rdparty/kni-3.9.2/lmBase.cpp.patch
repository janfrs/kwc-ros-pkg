--- /afs/cs.stanford.edu/u/ellenrk/scratch/KNI_3.9.2/src/LM/lmBase.cpp	2007-09-26 04:35:08.000000000 -0700
+++ src/LM/lmBase.cpp	2008-06-17 18:31:51.000000000 -0700
@@ -526,6 +526,10 @@
 		}
 		timearray[i] = time;
 
+    // DEBUGGING
+    printf("%f \n",time);
+    // END OF DEBUGGING
+
 		// check joint speeds, stop program if failed
 		if (time > 0) {
 			if (!checkJointSpeed(lastsolution, solution, (time - lasttime))) {
@@ -582,6 +586,20 @@
 		}
 	}
 
+  // DEBUGGING
+  printf("Spline coefficients: \n");
+  for (i=0; i<numberofmotors; i++) {
+    printf("Motor %d: \n",i);
+    for (j=0; j<steps; j++) {
+			for (int k=0; k<7; k++) {
+      	printf("%d ", parameters[j][i][k]);
+			}
+			printf("\n");
+    }
+  }
+
+  // END OF DEBUGGING
+
 	// send spline
 	long spline_timeout = (long) parameters[0][0][2] * 10;// - 2;
 	KNI::Timer t(timeout), spline_t(spline_timeout);
@@ -708,6 +726,12 @@
 	return (position / distance);
 }
 
+void CLMBase::getSplineCoeff(int steps, double *timearray, double *encoderarray,
+		double *arr_p1, double *arr_p2, double *arr_p3, double *arr_p4) 
+{
+  splineCoefficients(steps, timearray, encoderarray, arr_p1, arr_p2, arr_p3, arr_p4);
+}
+
 void CLMBase::splineCoefficients(int steps, double *timearray, double *encoderarray,
 		double *arr_p1, double *arr_p2, double *arr_p3, double *arr_p4) {
 
@@ -799,6 +823,12 @@
 	}
 }
 
+bool CLMBase::checkJointSpeeds(std::vector<int> lastsolution,
+		std::vector<int> solution, double time) 
+{
+  return(checkJointSpeed(lastsolution, solution, time));
+}
+
 bool CLMBase::checkJointSpeed(std::vector<int> lastsolution,
 		std::vector<int> solution, double time) {
 
