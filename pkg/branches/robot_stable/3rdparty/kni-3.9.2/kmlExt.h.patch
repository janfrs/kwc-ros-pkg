--- /afs/cs.stanford.edu/u/ellenrk/scratch/KNI_3.9.2/include/KNI/kmlExt.h	2007-08-21 06:01:42.000000000 -0700
+++ include/KNI/kmlExt.h	2008-06-18 11:07:50.000000000 -0700
@@ -222,6 +222,7 @@
 	/// This method is mainly provided for convenience. It is easier than the other getRobotEncoders method
 	/// but probably not so efficient. It is much easier to use via the wrappers.
 	std::vector<int> getRobotEncoders(bool refreshEncoders = true) const;
+  std::vector<double> getJointAngles(bool refreshEncoders = true) const;
 
 	short getMotorVelocityLimit( short number ) const;
 	short getMotorAccelerationLimit( short number ) const;
@@ -246,6 +247,7 @@
 	/// You can provide less values than the number of motors. In that case only the given ones will be moved.
 	/// This can be usefull in cases where you want to move the robot but you don't want to move the gripper.
 	void moveRobotToEnc(std::vector<int>::const_iterator start, std::vector<int>::const_iterator end, bool waitUntilReached = false, int encTolerance = 100, int waitTimeout = 0);
+	void moveRobotToDeg(std::vector<double>::const_iterator start, std::vector<double>::const_iterator end, bool waitUntilReached = false, int encTolerance = 100, int waitTimeout = 0);
 	/// Move to robot to given encoders in the vector-container.
 	/// This method is mainly provided for convenience. Catch by value (and not by reference) is intended to avoid
 	/// nasty wrapping code.
@@ -283,6 +285,9 @@
     /// @param coefficients 4x4 coefficients have to be passed or the function will cause an assertion.
 	void sendFourSplinesToMotor(unsigned short number, short targetPosition, short duration, std::vector<short>& coefficients);
 	void sendFourSplinesToMotor(unsigned short number, short targetPosition, short duration, short p01, short p11, short p21, short p31, short p02, short p12, short p22, short p32,short p03, short p13, short p23, short p33,short p04, short p14, short p24, short p34);
+
+  TMotInit getMotorParameters(int motor);
+
 };
 
 /******************************************************************************************************************/
