diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/build_tools/testlib ./build_tools/testlib
--- /u/gerkey/tmp/gmapping/build_tools/testlib	2008-06-06 10:36:47.668088836 -0700
+++ ./build_tools/testlib	2008-06-06 18:45:56.068088445 -0700
@@ -3,6 +3,9 @@
 	echo "Syntax: rtestlib <library>"
 	exit 1
 fi
+
+exit 0
+
 FNAME=`mktemp rtestlibXXXXXX`
 echo "int main() { return 0; }" > $FNAME.cpp
 
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/configure ./configure
--- /u/gerkey/tmp/gmapping/configure	2008-06-06 10:36:49.780588683 -0700
+++ ./configure	2008-06-06 18:58:05.638126348 -0700
@@ -50,8 +50,17 @@
 	fi ;
 done ;
 if [ ! "$QT_INCLUDE" ]; then
-	echo -e "\n\n*** Qt 3.x not found please set QT_INCLUDE, QT_LIB, MOC by hand\n\a"
+	echo -e "\n\n*** Qt 3.x not found.  I'll make some educated guesses.  If this doesn't work, please set QT_INCLUDE, QT_LIB, MOC by hand in the file global.mk.\n\a"
 	#exit 1
+        if [ "$OSTYPE" = "MACOSX" ]; then
+	 QT_INCLUDE="-I/opt/local/include/qt3";
+	 QT_LIB="-L/opt/local/lib/qt3/lib -lqt-mt" ;
+	 MOC="/opt/local/lib/qt3/bin/moc" ;
+        else
+	 QT_INCLUDE="-I/usr/include/qt3";
+	 QT_LIB="-lqt-mt" ;
+	 MOC="moc-qt3" ;
+        fi
 else
 	echo "Ok" ;
 fi
@@ -72,21 +81,21 @@
 	echo "Ok" ;
 fi
 
-echo -n "Checking for Gsl libs "
-if [ "$OSTYPE" = "LINUX" ]; then
-	GSL_LIB="-lgsl -lgslcblas"
-	GSL_INCLUDE="-I/usr/include/"
-fi
-if [ "$OSTYPE" = "MACOSX" ]; then
-	GSL_LIB="-L/sw/lib -lgsl -lgslcblas"
-	GSL_INCLUDE="-I/sw/include"
-fi
-
-if [ ! "$GSL_INCLUDE" ]; then
-	echo -e "\n\n*** GSL not found, please set GSL_INCLUDE and GSL_LIB by hand\n\a"
-else
-	echo "Ok" ;
-fi
+#echo -n "Checking for Gsl libs "
+#if [ "$OSTYPE" = "LINUX" ]; then
+#	GSL_LIB="-lgsl -lgslcblas"
+#	GSL_INCLUDE="-I/usr/include/"
+#fi
+#if [ "$OSTYPE" = "MACOSX" ]; then
+#	GSL_LIB="-L/sw/lib -lgsl -lgslcblas"
+#	GSL_INCLUDE="-I/sw/include"
+#fi
+#
+#if [ ! "$GSL_INCLUDE" ]; then
+#	echo -e "\n\n*** GSL not found, please set GSL_INCLUDE and GSL_LIB by hand\n\a"
+#else
+#	echo "Ok" ;
+#fi
 
 
 # echo -n "Checking for KDE 3.x includes ... "
@@ -181,7 +190,6 @@
 	fi
 fi	
 
-
 CONFIG=global.mk
 rm -f $CONFIG
 
@@ -226,15 +234,12 @@
 
 
 # Flags
-CPPFLAGS+=$CPPFLAGS -I$MAPPING_ROOT $CARMENFLAG 
+CPPFLAGS+=$CPPFLAGS -I$MAPPING_ROOT $CARMENFLAG
 CXXFLAGS+=$CXXFLAGS
-LDFLAGS+=$LDFLAGS
+LDFLAGS+=$LDFLAGS -Xlinker -rpath $MAPPING_ROOT/lib
 CARMENSUPPORT=$CARMENSUPPORT
 ARIASUPPORT=$ARIASUPPORT
 
-GSL_LIB=$GSL_LIB
-GSL_INCLUDE=$GSL_INCLUDE
-
 $OTHER
 
 include $MAPPING_ROOT/manual.mk
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/gridfastslam/gfsreader.cpp ./gridfastslam/gfsreader.cpp
--- /u/gerkey/tmp/gmapping/gridfastslam/gfsreader.cpp	2008-06-06 10:36:48.060588747 -0700
+++ ./gridfastslam/gfsreader.cpp	2008-06-06 18:45:56.080588687 -0700
@@ -132,23 +132,13 @@
 	  os <<" 4.712389";  // fov
 	  os <<" 0.008727";  // angular res
 	  os <<" 30.0" ;  // maxrange
-	} else if ((dim == 361)||(dim == 360)){     // PLS 360
-	  os <<" 0";  // laser type
-	  os <<" -1.570796";  // start_angle
-	  os <<" 3.141593";  // fov
-	  os <<" " << 0.017453/2;  // angular res
-	  os <<" 81.9" ;  // maxrange
-	} else if ((dim == 181)||(dim == 180)) {     // PLS 180
+	}
+	else {     // PLS
 	  os <<" 0";  // laser type
 	  os <<" -1.570796";  // start_angle
 	  os <<" 3.141593";  // fov
-	  os <<" " <<0.017453;  // angular res
+	  os <<" 0.017453";  // angular res
 	  os <<" 81.9" ;  // maxrange
-	} else if (dim == 683) {     // HOKUYO_URG
-	  os << " 2 -2.094395 4.188790 0.006136 5.600000 ";
-	} else {
-	  cerr << "no admissible laser found to generate the log" << endl
-	       << "check the number of readings" << endl;
 	}
 	os <<" 0.01"; // accuracy	
 	os <<" 0" ;  // remission mode
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/gridfastslam/gridslamprocessor_tree.cpp ./gridfastslam/gridslamprocessor_tree.cpp
--- /u/gerkey/tmp/gmapping/gridfastslam/gridslamprocessor_tree.cpp	2008-06-06 10:36:48.060588747 -0700
+++ ./gridfastslam/gridslamprocessor_tree.cpp	2008-06-06 18:45:56.080588687 -0700
@@ -4,7 +4,7 @@
 #include <map>
 #include <set>
 #include <fstream>
-#include <gsl/gsl_blas.h>
+//#include <gsl/gsl_blas.h>
 
 #include <utils/stat.h>
 #include "gridslamprocessor.h"
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/gridfastslam/Makefile ./gridfastslam/Makefile
--- /u/gerkey/tmp/gmapping/gridfastslam/Makefile	2008-06-06 10:36:48.120588612 -0700
+++ ./gridfastslam/Makefile	2008-06-06 18:45:56.080588687 -0700
@@ -1,8 +1,10 @@
 OBJS= gridslamprocessor_tree.o motionmodel.o gridslamprocessor.o gfsreader.o
-APPS= gfs2log gfs2rec gfs2neff gfs2stat
+APPS= gfs2log gfs2rec gfs2neff #gfs2stat
 
-LDFLAGS+= -lutils -lsensor_range -llog -lscanmatcher -lsensor_base -lsensor_odometry $(GSL_LIB)
-CPPFLAGS+=-I../sensor $(GSL_INCLUDE)
+#LDFLAGS+= -lutils -lsensor_range -llog -lscanmatcher -lsensor_base -lsensor_odometry $(GSL_LIB)
+LDFLAGS+= -lutils -lsensor_range -llog -lscanmatcher -lsensor_base -lsensor_odometry
+#CPPFLAGS+=-I../sensor $(GSL_INCLUDE)
+CPPFLAGS+=-I../sensor
 
 -include ../global.mk
 -include ../build_tools/Makefile.generic-shared-object
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/gui/gfs2img.cpp ./gui/gfs2img.cpp
--- /u/gerkey/tmp/gmapping/gui/gfs2img.cpp	2008-06-06 10:36:48.590588663 -0700
+++ ./gui/gfs2img.cpp	2008-06-06 18:45:56.090588730 -0700
@@ -1,4 +1,5 @@
 #include <limits.h>
+#include <float.h>
 #include <scanmatcher/scanmatcher.h>
 #include <gridfastslam/gfsreader.h>
 #include <qpixmap.h>
@@ -37,8 +38,8 @@
 }
 
 void computeBoundingBox(double& xmin, double& ymin, double& xmax, double& ymax, const RecordList& rl, double maxrange){
-	xmin = ymin = MAXDOUBLE;
-	xmax = ymax =-MAXDOUBLE;
+	xmin = ymin = DBL_MAX;
+	xmax = ymax =-DBL_MAX;
 	const LaserRecord* lastLaser=0;
 	for (RecordList::const_iterator it=rl.begin(); it!=rl.end(); it++){
 		const LaserRecord* lr= dynamic_cast<const LaserRecord*>(*it);
@@ -161,7 +162,7 @@
 		cout << "Frame " << frame << " ";
 		std::vector<RecordList> paths(particles);
 		int bestIdx=0;
-		double bestWeight=-MAXDOUBLE;
+		double bestWeight=-DBL_MAX;
 		for (int p=0; p<particles; p++){
 			paths[p]=rl.computePath(p,it);
 			double w=rl.getLogWeight(p,it);
@@ -203,6 +204,7 @@
 				}
 			}
 		
+		/*
 		cout << "painting trajectories" << endl;
 		for (int p=0; p<particles; p++){
 			painter.setPen(QColor(Qt::red));
@@ -240,6 +242,7 @@
 			}
 		}	
 		paths[bestIdx].destroyReferences();;
+		*/
 		cout << " DONE" << endl;
 		cout << "writing image" << endl;
 		QImage img=pixmap.convertToImage();
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/gui/Makefile ./gui/Makefile
--- /u/gerkey/tmp/gmapping/gui/Makefile	2008-06-06 10:36:48.690588643 -0700
+++ ./gui/Makefile	2008-06-06 18:45:56.090588730 -0700
@@ -3,7 +3,7 @@
 OBJS= gsp_thread.o qparticleviewer.o qgraphpainter.o qmappainter.o 
 
 APPS= gfs_nogui gfs_simplegui gfs2img
-LDFLAGS+=  $(QT_LIB) $(KDE_LIB) -lutils -lsensor_range -llog -lgridfastslam -lpthread -lconfigfile 
+LDFLAGS+=  $(QT_LIB) $(KDE_LIB) -lutils -lsensor_range -llog -lgridfastslam -lpthread -lconfigfile  -lsensor_base -lscanmatcher
 
 ifeq ($(CARMENSUPPORT),1)
 LDFLAGS+= -lcarmenwrapper 
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/gui/qgraphpainter.cpp ./gui/qgraphpainter.cpp
--- /u/gerkey/tmp/gmapping/gui/qgraphpainter.cpp	2008-06-06 10:36:48.600588727 -0700
+++ ./gui/qgraphpainter.cpp	2008-06-06 18:45:56.090588730 -0700
@@ -22,6 +22,7 @@
 
 
 #include <iostream>
+#include <float.h>
 #include "qgraphpainter.h"
 #include "moc_qgraphpainter.cpp"
 using namespace std;
@@ -96,7 +97,7 @@
 void QGraphPainter::paintEvent ( QPaintEvent * ){
 	m_pixmap->fill(Qt::white);
 	QPainter painter(m_pixmap);
-	double _min=MAXDOUBLE, _max=-MAXDOUBLE;
+	double _min=DBL_MAX, _max=-DBL_MAX;
 	if (autoscale){
 		for (unsigned int i=0; i<(unsigned int)width() && i<values.size(); i++){
 			_min=_min<values[i]?_min:values[i];
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/log/carmenconfiguration.cpp ./log/carmenconfiguration.cpp
--- /u/gerkey/tmp/gmapping/log/carmenconfiguration.cpp	2008-06-06 10:36:48.310588831 -0700
+++ ./log/carmenconfiguration.cpp	2008-06-06 18:45:56.090588730 -0700
@@ -2,6 +2,7 @@
 #include <iostream>
 #include <sstream>
 #include <assert.h>
+#include <sys/types.h>
 #include <sensor_odometry/odometrysensor.h>
 #include <sensor_range/rangesensor.h>
 
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/log/log_plot.cpp ./log/log_plot.cpp
--- /u/gerkey/tmp/gmapping/log/log_plot.cpp	2008-06-06 10:36:48.240588717 -0700
+++ ./log/log_plot.cpp	2008-06-06 18:45:56.090588730 -0700
@@ -1,5 +1,6 @@
 #include <fstream>
 #include <iostream>
+#include <sys/types.h>
 #include <log/carmenconfiguration.h>
 #include <log/sensorlog.h>
 
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/log/sensorstream.cpp ./log/sensorstream.cpp
--- /u/gerkey/tmp/gmapping/log/sensorstream.cpp	2008-06-06 10:36:48.270588724 -0700
+++ ./log/sensorstream.cpp	2008-06-06 18:45:56.100588755 -0700
@@ -1,7 +1,10 @@
 #include <assert.h>
 #include <sstream>
 #include "sensorstream.h"
-#define LINEBUFFER_SIZE 1000000 //for not Cyrill to unbless me, it is better to exagerate :-))
+//#define LINEBUFFER_SIZE 1000000 //for not Cyrill to unbless me, it is better to exagerate :-))
+// Can't declare a buffer that big on the stack.  So we'll risk Cyrill's
+// unblessing, and make it smaller.
+#define LINEBUFFER_SIZE 8192
 
 namespace GMapping {
 
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/Makefile ./Makefile
--- /u/gerkey/tmp/gmapping/Makefile	2008-06-06 10:36:49.820588759 -0700
+++ ./Makefile	2008-06-06 18:58:04.148150393 -0700
@@ -3,11 +3,11 @@
 ifeq ($(CARMENSUPPORT),1)
 SUBDIRS=utils  sensor log configfile scanmatcher carmenwrapper gridfastslam gui gfs-carmen 
 else
-ifeq ($(MACOSX),1)
-SUBDIRS=utils sensor log configfile scanmatcher gridfastslam 
-else
+#ifeq ($(MACOSX),1)
+#SUBDIRS=utils sensor log configfile scanmatcher gridfastslam 
+#else
 SUBDIRS=utils sensor log configfile scanmatcher gridfastslam gui 
-endif
+#endif
 endif
 
 LDFLAGS+=
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/particlefilter/particlefilter.h ./particlefilter/particlefilter.h
--- /u/gerkey/tmp/gmapping/particlefilter/particlefilter.h	2008-06-06 10:36:49.470588669 -0700
+++ ./particlefilter/particlefilter.h	2008-06-06 18:45:56.100588755 -0700
@@ -1,6 +1,8 @@
 #ifndef PARTICLEFILTER_H
 #define PARTICLEFILTER_H
 #include <stdlib.h>
+#include <float.h>
+#include <sys/types.h>
 #include<vector>
 #include<utility>
 #include<cmath>
@@ -22,7 +24,7 @@
 template <class OutputIterator, class Iterator>
 double toNormalForm(OutputIterator& out, const Iterator & begin, const Iterator & end){
 	//determine the maximum
-	double lmax=-MAXDOUBLE;
+	double lmax=-DBL_MAX;
 	for (Iterator it=begin; it!=end; it++){
 		lmax=lmax>((double)(*it))? lmax: (double)(*it);
 	}
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/particlefilter/pf.h ./particlefilter/pf.h
--- /u/gerkey/tmp/gmapping/particlefilter/pf.h	2008-06-06 10:36:49.500588677 -0700
+++ ./particlefilter/pf.h	2008-06-06 18:45:56.100588755 -0700
@@ -1,6 +1,7 @@
 #ifndef PARTICLEFILTER_H
 #define PARTICLEFILTER_H
 #include <stdlib.h>
+#include <float.h>
 #include<vector>
 #include<utility>
 #include<utils/gvalues.h>
@@ -22,7 +23,7 @@
 template <class OutputIterator, class Iterator>
 double toNormalForm(OutputIterator& out, const Iterator & begin, const Iterator & end){
 	//determine the maximum
-	double lmax=-MAXDOUBLE;
+	double lmax=-DBL_MAX;
 	for (Iterator it=begin; it!=end; it++){
 		lmax=lmax>((double)(*it))? lmax: (double)(*it);
 	}
@@ -81,8 +82,8 @@
 
 template <typename WeightVector>
 void normalizeWeights(WeightVector& weights, unsigned int size, double minWeight){
-	double wmin=MAXDOUBLE;
-	double wmax=-MAXDOUBLE;
+	double wmin=DBL_MAX;
+	double wmax=-DBL_MAX;
 	for (uint i=0; i<size; i++){
 		wmin=wmin<weights[i]?wmin:weights[i];
 		wmax=wmax>weights[i]?wmax:weights[i];
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/scanmatcher/eig3.cpp ./scanmatcher/eig3.cpp
--- /u/gerkey/tmp/gmapping/scanmatcher/eig3.cpp	1969-12-31 16:00:00.000000000 -0800
+++ ./scanmatcher/eig3.cpp	2008-06-06 18:45:56.100588755 -0700
@@ -0,0 +1,270 @@
+
+/* Eigen decomposition code for symmetric 3x3 matrices, copied from the public
+   domain Java Matrix library JAMA. */
+
+#include <math.h>
+
+#ifndef MAX
+#define MAX(a, b) ((a)>(b)?(a):(b))
+#endif
+
+#define n 3
+
+static double hypot2(double x, double y) {
+  return sqrt(x*x+y*y);
+}
+
+// Symmetric Householder reduction to tridiagonal form.
+
+static void tred2(double V[n][n], double d[n], double e[n]) {
+
+//  This is derived from the Algol procedures tred2 by
+//  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
+//  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
+//  Fortran subroutine in EISPACK.
+
+  int i,j,k;
+  double f,g,h,hh;
+  for (j = 0; j < n; j++) {
+    d[j] = V[n-1][j];
+  }
+
+  // Householder reduction to tridiagonal form.
+
+  for (i = n-1; i > 0; i--) {
+
+    // Scale to avoid under/overflow.
+
+    double scale = 0.0;
+    double h = 0.0;
+    for (k = 0; k < i; k++) {
+      scale = scale + fabs(d[k]);
+    }
+    if (scale == 0.0) {
+      e[i] = d[i-1];
+      for (j = 0; j < i; j++) {
+        d[j] = V[i-1][j];
+        V[i][j] = 0.0;
+        V[j][i] = 0.0;
+      }
+    } else {
+
+      // Generate Householder vector.
+
+      for (k = 0; k < i; k++) {
+        d[k] /= scale;
+        h += d[k] * d[k];
+      }
+      f = d[i-1];
+      g = sqrt(h);
+      if (f > 0) {
+        g = -g;
+      }
+      e[i] = scale * g;
+      h = h - f * g;
+      d[i-1] = f - g;
+      for (j = 0; j < i; j++) {
+        e[j] = 0.0;
+      }
+
+      // Apply similarity transformation to remaining columns.
+
+      for (j = 0; j < i; j++) {
+        f = d[j];
+        V[j][i] = f;
+        g = e[j] + V[j][j] * f;
+        for (k = j+1; k <= i-1; k++) {
+          g += V[k][j] * d[k];
+          e[k] += V[k][j] * f;
+        }
+        e[j] = g;
+      }
+      f = 0.0;
+      for (j = 0; j < i; j++) {
+        e[j] /= h;
+        f += e[j] * d[j];
+      }
+      hh = f / (h + h);
+      for (j = 0; j < i; j++) {
+        e[j] -= hh * d[j];
+      }
+      for (j = 0; j < i; j++) {
+        f = d[j];
+        g = e[j];
+        for (k = j; k <= i-1; k++) {
+          V[k][j] -= (f * e[k] + g * d[k]);
+        }
+        d[j] = V[i-1][j];
+        V[i][j] = 0.0;
+      }
+    }
+    d[i] = h;
+  }
+
+  // Accumulate transformations.
+
+  for (i = 0; i < n-1; i++) {
+    V[n-1][i] = V[i][i];
+    V[i][i] = 1.0;
+    h = d[i+1];
+    if (h != 0.0) {
+      for (k = 0; k <= i; k++) {
+        d[k] = V[k][i+1] / h;
+      }
+      for (j = 0; j <= i; j++) {
+        g = 0.0;
+        for (k = 0; k <= i; k++) {
+          g += V[k][i+1] * V[k][j];
+        }
+        for (k = 0; k <= i; k++) {
+          V[k][j] -= g * d[k];
+        }
+      }
+    }
+    for (k = 0; k <= i; k++) {
+      V[k][i+1] = 0.0;
+    }
+  }
+  for (j = 0; j < n; j++) {
+    d[j] = V[n-1][j];
+    V[n-1][j] = 0.0;
+  }
+  V[n-1][n-1] = 1.0;
+  e[0] = 0.0;
+} 
+
+// Symmetric tridiagonal QL algorithm.
+
+static void tql2(double V[n][n], double d[n], double e[n]) {
+
+//  This is derived from the Algol procedures tql2, by
+//  Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
+//  Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
+//  Fortran subroutine in EISPACK.
+
+  int i,j,m,l,k;
+  double g,p,r,dl1,h,f,tst1,eps;
+  double c,c2,c3,el1,s,s2;
+
+  for (i = 1; i < n; i++) {
+    e[i-1] = e[i];
+  }
+  e[n-1] = 0.0;
+
+  f = 0.0;
+  tst1 = 0.0;
+  eps = pow(2.0,-52.0);
+  for (l = 0; l < n; l++) {
+
+    // Find small subdiagonal element
+
+    tst1 = MAX(tst1,fabs(d[l]) + fabs(e[l]));
+    m = l;
+    while (m < n) {
+      if (fabs(e[m]) <= eps*tst1) {
+        break;
+      }
+      m++;
+    }
+
+    // If m == l, d[l] is an eigenvalue,
+    // otherwise, iterate.
+
+    if (m > l) {
+      int iter = 0;
+      do {
+        iter = iter + 1;  // (Could check iteration count here.)
+
+        // Compute implicit shift
+
+        g = d[l];
+        p = (d[l+1] - g) / (2.0 * e[l]);
+        r = hypot2(p,1.0);
+        if (p < 0) {
+          r = -r;
+        }
+        d[l] = e[l] / (p + r);
+        d[l+1] = e[l] * (p + r);
+        dl1 = d[l+1];
+        h = g - d[l];
+        for (i = l+2; i < n; i++) {
+          d[i] -= h;
+        }
+        f = f + h;
+
+        // Implicit QL transformation.
+
+        p = d[m];
+        c = 1.0;
+        c2 = c;
+        c3 = c;
+        el1 = e[l+1];
+        s = 0.0;
+        s2 = 0.0;
+        for (i = m-1; i >= l; i--) {
+          c3 = c2;
+          c2 = c;
+          s2 = s;
+          g = c * e[i];
+          h = c * p;
+          r = hypot2(p,e[i]);
+          e[i+1] = s * r;
+          s = e[i] / r;
+          c = p / r;
+          p = c * d[i] - s * g;
+          d[i+1] = h + s * (c * g + s * d[i]);
+
+          // Accumulate transformation.
+
+          for (k = 0; k < n; k++) {
+            h = V[k][i+1];
+            V[k][i+1] = s * V[k][i] + c * h;
+            V[k][i] = c * V[k][i] - s * h;
+          }
+        }
+        p = -s * s2 * c3 * el1 * e[l] / dl1;
+        e[l] = s * p;
+        d[l] = c * p;
+
+        // Check for convergence.
+
+      } while (fabs(e[l]) > eps*tst1);
+    }
+    d[l] = d[l] + f;
+    e[l] = 0.0;
+  }
+  
+  // Sort eigenvalues and corresponding vectors.
+
+  for (i = 0; i < n-1; i++) {
+    k = i;
+    p = d[i];
+    for (j = i+1; j < n; j++) {
+      if (d[j] < p) {
+        k = j;
+        p = d[j];
+      }
+    }
+    if (k != i) {
+      d[k] = d[i];
+      d[i] = p;
+      for (j = 0; j < n; j++) {
+        p = V[j][i];
+        V[j][i] = V[j][k];
+        V[j][k] = p;
+      }
+    }
+  }
+}
+
+void eigen_decomposition(double A[n][n], double V[n][n], double d[n]) {
+  int i,j;
+  double e[n];
+  for (i = 0; i < n; i++) {
+    for (j = 0; j < n; j++) {
+      V[i][j] = A[i][j];
+    }
+  }
+  tred2(V, d, e);
+  tql2(V, d, e);
+}
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/scanmatcher/eig3.h ./scanmatcher/eig3.h
--- /u/gerkey/tmp/gmapping/scanmatcher/eig3.h	1969-12-31 16:00:00.000000000 -0800
+++ ./scanmatcher/eig3.h	2008-06-06 18:45:56.110588767 -0700
@@ -0,0 +1,11 @@
+
+/* Eigen-decomposition for symmetric 3x3 real matrices.
+   Public domain, copied from the public domain Java library JAMA. */
+
+#ifndef _eig_h
+
+/* Symmetric matrix A => eigenvectors in columns of V, corresponding
+   eigenvalues in d. */
+void eigen_decomposition(double A[3][3], double V[3][3], double d[3]);
+
+#endif
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/scanmatcher/Makefile ./scanmatcher/Makefile
--- /u/gerkey/tmp/gmapping/scanmatcher/Makefile	2008-06-06 10:36:48.990588777 -0700
+++ ./scanmatcher/Makefile	2008-06-06 18:45:56.110588767 -0700
@@ -1,8 +1,10 @@
-OBJS= smmap.o scanmatcher.o scanmatcherprocessor.o 
+OBJS= smmap.o scanmatcher.o scanmatcherprocessor.o eig3.o
 APPS= scanmatch_test icptest
 
-LDFLAGS+= $(GSL_LIB) -lutils -lsensor_range -llog
-CPPFLAGS+=-I../sensor $(GSL_INCLUDE)
+#LDFLAGS+= $(GSL_LIB) -lutils -lsensor_range -llog
+LDFLAGS+= -lutils -lsensor_range -lsensor_base -llog
+#CPPFLAGS+=-I../sensor $(GSL_INCLUDE)
+CPPFLAGS+=-I../sensor
 
 -include ../global.mk
 -include ../build_tools/Makefile.generic-shared-object
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/scanmatcher/scanmatcherprocessor.cpp ./scanmatcher/scanmatcherprocessor.cpp
--- /u/gerkey/tmp/gmapping/scanmatcher/scanmatcherprocessor.cpp	2008-06-06 10:36:48.970588700 -0700
+++ ./scanmatcher/scanmatcherprocessor.cpp	2008-06-06 18:45:56.110588767 -0700
@@ -1,5 +1,6 @@
 #include <iostream>
 #include "scanmatcherprocessor.h"
+#include "eig3.h"
 
 //#define SCANMATHCERPROCESSOR_DEBUG
 namespace GMapping {
@@ -14,7 +15,7 @@
   m_maxMove=1;
   m_beams=0;
   m_computeCovariance=false;
-  m_eigenspace=gsl_eigen_symmv_alloc(3);
+  //m_eigenspace=gsl_eigen_symmv_alloc(3);
   useICP=false;
 }
 
@@ -27,12 +28,12 @@
 	m_maxMove=1;
 	m_beams=0;
 	m_computeCovariance=false;
-	m_eigenspace=gsl_eigen_symmv_alloc(3);
+	//m_eigenspace=gsl_eigen_symmv_alloc(3);
 	useICP=false;
 }
 
 ScanMatcherProcessor::~ScanMatcherProcessor (){
-	gsl_eigen_symmv_free(m_eigenspace);
+	//gsl_eigen_symmv_free(m_eigenspace);
 }
 
 
@@ -143,19 +144,36 @@
 		if(m_computeCovariance){
 			ScanMatcher::CovarianceMatrix cov;
 			score=m_matcher.optimize(newPose, cov, m_map, m_pose, plainReading);
+                        /*
 			gsl_matrix* m=gsl_matrix_alloc(3,3);
 			gsl_matrix_set(m,0,0,cov.xx); gsl_matrix_set(m,0,1,cov.xy); gsl_matrix_set(m,0,2,cov.xt);
 			gsl_matrix_set(m,1,0,cov.xy); gsl_matrix_set(m,1,1,cov.yy); gsl_matrix_set(m,1,2,cov.yt);
 			gsl_matrix_set(m,2,0,cov.xt); gsl_matrix_set(m,2,1,cov.yt); gsl_matrix_set(m,2,2,cov.tt);
 			gsl_matrix* evec=gsl_matrix_alloc(3,3);
 			gsl_vector* eval=gsl_vector_alloc(3);
-			gsl_eigen_symmv (m, eval,  evec, m_eigenspace);
-#ifdef SCANMATHCERPROCESSOR_DEBUG
-			cout << "evals=" << gsl_vector_get(eval, 0) <<  " " << gsl_vector_get(eval, 1)<< " " << gsl_vector_get(eval, 2)<<endl;
-#endif
-			gsl_matrix_free(m);
-			gsl_matrix_free(evec);
-			gsl_vector_free(eval);
+                        */
+                        double m[3][3];
+                        double evec[3][3];
+                        double eval[3];
+			m[0][0] = cov.xx; 
+                        m[0][1] = cov.xy; 
+                        m[0][2] = cov.xt;
+			m[1][0] = cov.xy;
+                        m[1][1] = cov.yy;
+                        m[1][2] = cov.yt;
+			m[2][0] = cov.xt;
+                        m[2][1] = cov.yt;
+                        m[2][2] = cov.tt;
+
+			//gsl_eigen_symmv (m, eval,  evec, m_eigenspace);
+                        eigen_decomposition(m,evec,eval);
+#ifdef SCANMATHCERPROCESSOR_DEBUG
+			//cout << "evals=" << gsl_vector_get(eval, 0) <<  " " << gsl_vector_get(eval, 1)<< " " << gsl_vector_get(eval, 2)<<endl;
+			cout << "evals=" << eval[0] <<  " " << eval[1]<< " " << eval[2]<<endl;
+#endif
+			//gsl_matrix_free(m);
+			//gsl_matrix_free(evec);
+			//gsl_vector_free(eval);
 		} else {
 			if (useICP){
 				cerr << "USING ICP" << endl;
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/scanmatcher/scanmatcherprocessor.h ./scanmatcher/scanmatcherprocessor.h
--- /u/gerkey/tmp/gmapping/scanmatcher/scanmatcherprocessor.h	2008-06-06 10:36:49.000588585 -0700
+++ ./scanmatcher/scanmatcherprocessor.h	2008-06-06 18:45:56.110588767 -0700
@@ -4,7 +4,7 @@
 #include <log/sensorlog.h>
 #include <sensor/sensor_range/rangesensor.h>
 #include <sensor/sensor_range/rangereading.h>
-#include <gsl/gsl_eigen.h>
+//#include <gsl/gsl_eigen.h>
 #include "scanmatcher.h"
 
 namespace GMapping {
@@ -38,7 +38,7 @@
 		OrientedPoint m_pose;
 		OrientedPoint m_odoPose;
 		int  m_count;
-		gsl_eigen_symmv_workspace * m_eigenspace;
+		//gsl_eigen_symmv_workspace * m_eigenspace;
 };
 
 };
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/sensor/sensor_range/rangereading.cpp ./sensor/sensor_range/rangereading.cpp
--- /u/gerkey/tmp/gmapping/sensor/sensor_range/rangereading.cpp	2008-06-06 10:36:49.640588741 -0700
+++ ./sensor/sensor_range/rangereading.cpp	2008-06-06 18:45:56.120588606 -0700
@@ -1,5 +1,6 @@
 #include <iostream>
 #include <assert.h>
+#include <sys/types.h>
 #include <utils/gvalues.h>
 #include "rangereading.h"
 
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/utils/datasmoother.h ./utils/datasmoother.h
--- /u/gerkey/tmp/gmapping/utils/datasmoother.h	2008-06-06 10:36:49.130588629 -0700
+++ ./utils/datasmoother.h	2008-06-06 18:45:56.120588606 -0700
@@ -7,6 +7,7 @@
 #include <values.h>
 #include "stat.h"
 #include <assert.h>
+#include <float.h>
 
 namespace GMapping {
 
@@ -34,8 +35,8 @@
     m_cummulated.clear();
     m_int=-1; 
     m_parzenWindow = parzenWindow;
-    m_from = MAXDOUBLE;
-    m_to = -MAXDOUBLE;
+    m_from = DBL_MAX;
+    m_to = -DBL_MAX;
     m_lastStep = 0.001;
   };
 
@@ -46,7 +47,7 @@
 
 
   void setMinToZero() {
-    double minval=MAXDOUBLE;
+    double minval=DBL_MAX;
 
     for (Data::const_iterator it = m_data.begin(); it != m_data.end(); it++) {
       const DataPoint& d = *it;
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/utils/gvalues.h ./utils/gvalues.h
--- /u/gerkey/tmp/gmapping/utils/gvalues.h	2008-06-06 10:36:49.160588637 -0700
+++ ./utils/gvalues.h	2008-06-06 18:45:56.120588606 -0700
@@ -7,8 +7,8 @@
 #ifdef MACOSX
 	#include <limits.h>
 	#include <math.h>
-	#define MAXDOUBLE 1e1000
-	#define isnan(x) (x==FP_NAN)
+	//#define MAXDOUBLE 1e1000
+	//#define isnan(x) (x==FP_NAN)
 #endif
 #ifdef _WIN32
   #include <limits>
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/utils/Makefile ./utils/Makefile
--- /u/gerkey/tmp/gmapping/utils/Makefile	2008-06-06 10:36:49.230588849 -0700
+++ ./utils/Makefile	2008-06-06 18:45:56.120588606 -0700
@@ -1,8 +1,9 @@
 OBJS= stat.o  movement.o
-APPS= autoptr_test stat_test
+APPS= autoptr_test #stat_test
 
-LDFLAGS+= $(GSL_LIB)
-CPPFLAGS+= $(GSL_INCLUDE) -DFSLINE
+#LDFLAGS+= $(GSL_LIB)
+#CPPFLAGS+= $(GSL_INCLUDE) -DFSLINE
+CPPFLAGS+= -DFSLINE
 
 -include ../global.mk
 -include ../build_tools/Makefile.generic-shared-object
diff -urN --exclude '*svn*' /u/gerkey/tmp/gmapping/utils/stat.cpp ./utils/stat.cpp
--- /u/gerkey/tmp/gmapping/utils/stat.cpp	2008-06-06 10:36:49.170588630 -0700
+++ ./utils/stat.cpp	2008-06-06 18:45:56.130588730 -0700
@@ -1,12 +1,15 @@
-#include <gsl/gsl_rng.h>
-#include <gsl/gsl_randist.h>
-#include <gsl/gsl_eigen.h>
-#include <gsl/gsl_blas.h>
+#include <stdlib.h>
+
+//#include <gsl/gsl_rng.h>
+//#include <gsl/gsl_randist.h>
+//#include <gsl/gsl_eigen.h>
+//#include <gsl/gsl_blas.h>
 #include <math.h>
 #include "utils/stat.h"
 
 namespace GMapping {
 
+#if 0
 
 int sampleUniformInt(int max)
 {
@@ -19,18 +22,48 @@
 }
 
 
+#endif
+
+// Draw randomly from a zero-mean Gaussian distribution, with standard
+// deviation sigma.
+// We use the polar form of the Box-Muller transformation, explained here:
+//   http://www.taygeta.com/random/gaussian.html
+double pf_ran_gaussian(double sigma)
+{
+  double x1, x2, w;
+  double r;
+
+  do
+  {
+    do { r = drand48(); } while (r == 0.0);
+    x1 = 2.0 * r - 1.0;
+    do { r = drand48(); } while (r == 0.0);
+    x2 = 2.0 * drand48() - 1.0;
+    w = x1*x1 + x2*x2;
+  } while(w > 1.0 || w==0.0);
+
+  return(sigma * x2 * sqrt(-2.0*log(w)/w));
+}
+
 double sampleGaussian(double sigma, unsigned long int S) {
+  /*
 	static gsl_rng * r = NULL;
 	if(r==NULL) {
 		gsl_rng_env_setup();
 		r = gsl_rng_alloc (gsl_rng_default);
 	}
+        */
 	if (S!=0)
-		gsl_rng_set(r, S);
+        {
+		//gsl_rng_set(r, S);
+                srand48(S);
+        }
 	if (sigma==0)
 		return 0;
-	return gsl_ran_gaussian (r,sigma);
+	//return gsl_ran_gaussian (r,sigma);
+	return pf_ran_gaussian (sigma);
 }
+#if 0
 
 double evalGaussian(double sigmaSquare, double delta){
 	if (sigmaSquare<=0)
@@ -38,11 +71,13 @@
 	return exp(-.5*delta*delta/sigmaSquare)/sqrt(2*M_PI*sigmaSquare);
 }
 
+#endif
 double evalLogGaussian(double sigmaSquare, double delta){
 	if (sigmaSquare<=0)
 		sigmaSquare=1e-4;
 	return -.5*delta*delta/sigmaSquare-.5*log(2*M_PI*sigmaSquare);
 }
+#if 0
 
 
 Covariance3 Covariance3::zero={0.,0.,0.,0.,0.,0.};
@@ -141,6 +176,8 @@
 	return ret;
 }
 
+#endif
+
 double Gaussian3::eval(const OrientedPoint& p) const{
 	OrientedPoint q=p-mean;
 	q.theta=atan2(sin(p.theta-mean.theta),cos(p.theta-mean.theta));
@@ -151,6 +188,7 @@
 	return evalLogGaussian(covariance.eval[0], v1)+evalLogGaussian(covariance.eval[1], v2)+evalLogGaussian(covariance.eval[2], v3);
 }
 
+#if 0
 void Gaussian3::computeFromSamples(const std::vector<OrientedPoint> & poses, const std::vector<double>& weights ){
 	OrientedPoint mean=OrientedPoint(0,0,0);
 	double wcum=0;
@@ -234,6 +272,7 @@
 	this->covariance=ecov;
 	this->cov=cov;
 }
+#endif
 
 }// end namespace
 
