/*
 * pr2.model.nddl
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Provides for all class declarations for the pr2 model
 */

#include "TREX.nddl" // TREX base classes

typedef int [0 5] PRIORITY; /* Used to assign a priority to goals */

typedef float [0.0 +inff] PFLOAT;

float BASE_POSITION_ERROR = 1.0;
float ANGLE_ERROR = .2;
float END_EFFECTOR_POSITION_ERROR = 0.01;
float END_EFFECTOR_STEP_SIZE = 5.0;

/**
 * BaseState will capture position and orientation.
 */
class BaseState extends AgentTimeline {
	predicate Holds{
		PFLOAT x;
		PFLOAT y;
		float th;
	}

	BaseState(Mode _mode){
		super(_mode, "Holds");
	}
};

/**
 * A PR2 state variable for commanded rotation and translation
 */
class BaseGoal extends AgentTimeline {

      predicate Holds {
      	 float cmd_x;
	 float cmd_th;	
      }     

      BaseGoal(Mode _mode){
         super(_mode);
      }
};

/**
 * Timeline structure for End Effector state
 */
class EndEffectorState extends AgentTimeline {
  bool isLeft;

  predicate Holds{
    float rot1_1;
    float rot1_2;
    float rot1_3;
    float rot2_1;
    float rot2_2;
    float rot2_3;
    float rot3_1;
    float rot3_2;
    float rot3_3;
    float x;
    float y;
    float z;
  }

  EndEffectorState(Mode _mode, bool _isLeft){
    super(_mode, "Holds");
    isLeft = _isLeft;
  }
}


/**
 * A PR2 state variable for commanded end effector positions
 */
class EndEffectorGoal extends AgentTimeline {

  bool isLeft;

  predicate Holds {
    float cmd_rot1_1;
    float cmd_rot1_2;
    float cmd_rot1_3;
    float cmd_rot2_1;
    float cmd_rot2_2;
    float cmd_rot2_3;
    float cmd_rot3_1;
    float cmd_rot3_2;
    float cmd_rot3_3;
    float cmd_x;
    float cmd_y;
    float cmd_z;
  }

  EndEffectorGoal(Mode _mode, bool _isLeft){
    super(_mode);
    isLeft = _isLeft;
  }
}

/**
 * ArmState will capture position and orientation.
 */
class ArmState extends AgentTimeline {

  bool isLeft; // true if the left arm

  predicate Holds{
    float acTurretAngle;
    float acShoulderLiftAngle;
    float acUpperarmRollAngle;
    float acElbowAngle;
    float acForearmRollAngle;
    float acWristPitchAngle;
    float acWristRollAngle;
    float acGripperForceCmd;
    float acGripperGapCmd;
  }

  ArmState(Mode _mode, bool _isLeft){
    super(_mode, "Holds");
    isLeft = _isLeft;
  }
};

/**
 * Encapsulate Behaviors that have a state of active or inactive
 */
class Behavior extends AgentTimeline {
	predicate Inactive{}

	predicate Active{}

	Behavior(Mode _mode){
		super(_mode, "Inactive");
	}
};

/**
 * MoveBase behavior will handle active control of vehicle to accomplish 
 * a waypoint. This maps to the wave front player in the 2D nav stack.
 */
class MoveBase extends Behavior {
  predicate Inactive{
    PFLOAT x;
    PFLOAT y;
    float th;
    PFLOAT desX;
    PFLOAT desY;
    float desTh;
  }

  // Parameters to get to the target
  predicate Active{
    PFLOAT x;
    PFLOAT y;
    float th;
  }

  MoveBase(Mode _mode){
    super(_mode);
  }
};

/**
 * A behavior to Clean something, at a given location. This will drive navigation and arm control.
 */
class CleanBehavior extends Behavior {

  /**
   * Inactive
   */
  predicate Inactive{}

  /**
   * When active, it will clean at a specified location in space
   */
  predicate Active{
    PFLOAT x;
    PFLOAT y;
    float th;
    PRIORITY priority; // 0 is highest priority

    //will eventually take a target location and then calculate these
    float rot1_1;
    float rot1_2;
    float rot1_3;
    float rot2_1;
    float rot2_2;
    float rot2_3;
    float rot3_1;
    float rot3_2;
    float rot3_3;
    float trans_1;
    float trans_2;
    float trans_3;
  }

  CleanBehavior(Mode _mode){
    super(_mode);
  }
};

/**
 * Declare high-level tasks for execution here. We use a singlet timeline for
 * all such tasks, restricting them to be mutually exclusive.
 */
class HandWave extends Behavior {

  /**
   * A trivial task to handwave at a fixed position
   */
  predicate Active{
    PFLOAT x;
    PFLOAT y;
    float th;
    PRIORITY priority; // 0 is highest priority
  }

  HandWave(Mode _mode){
    super(_mode);
  }
};

class GraspObject extends Behavior {

  predicate Active {
    float x;
    float y;
    float z;
  }

  GraspObject(Mode _mode){
    super(_mode);
  }

};

/**
 * Actions are since they have the unique properties that:
 * 1. They are explicitly started by the agent when they become startable
 * 2. Their time bound is always in the future until started.
 */
class Actions extends AgentActions{

  /**
   * An event is used as a generic hook to start things
   */
  predicate Event{eq(duration, 1);}

  /**
   * Set velocity commands for a given goal position using local planning
   */
  predicate SetBaseGoal{
    PFLOAT goal_x;
    PFLOAT goal_y;
    float goal_th;
    // Controller will operate at 1 Hz (cycles per tick)
    eq(duration, 1);

    // Set a default value for the theta desired position
    default(goal_th, 0.0);
  }

  /**
   * Stop the base
   */
  predicate StopTheBase{}

  /**
   * Move the end effector. Will compute next target based on linear interpolation
   */
  predicate SetEndEffectorGoal{
    EndEffectorGoal endEffectorGoal;
    bool isLeft;
    float rot1_1;
    float rot1_2;
    float rot1_3;
    float rot2_1;
    float rot2_2;
    float rot2_3;
    float rot3_1;
    float rot3_2;
    float rot3_3;
    float x;
    float y;
    float z;
    eq(duration, 1);
  }

  predicate SetMoveArmGoalRelative {
    bool isLeft;
    float turretAngle;
    float shoulderLiftAngle;
    float upperarmRollAngle;
    float elbowAngle;
    float forearmRollAngle;
    float wristPitchAngle;
    float wristRollAngle;
    float gripperForceCmd;
    float gripperGapCmd;
  }
};

class MoveArm extends AgentTimeline {

  bool isLeft;
  
  predicate Inactive{
    float acTurretAngle;
    float acShoulderLiftAngle;
    float acUpperarmRollAngle;
    float acElbowAngle;
    float acForearmRollAngle;
    float acWristPitchAngle;
    float acWristRollAngle;
    float acGripperForceCmd;
    float acGripperGapCmd;

    float desTurretAngle;
    float desShoulderLiftAngle;
    float desUpperarmRollAngle;
    float desElbowAngle;
    float desForearmRollAngle;
    float desWristPitchAngle;
    float desWristRollAngle;
    float desGripperForceCmd;
    float desGripperGapCmd;
  }

  predicate Active {
    float turretAngle;
    float shoulderLiftAngle;
    float upperarmRollAngle;
    float elbowAngle;
    float forearmRollAngle;
    float wristPitchAngle;
    float wristRollAngle;
    float gripperForceCmd;
    float gripperGapCmd;
  }
  
  MoveArm(Mode _mode, bool _isLeft){
    super(_mode, "Inactive");
    isLeft = _isLeft;
  }
};

/**
 * MoveEndEfector will position the end effector to a desired position.
 */
class  MoveEndEffector extends Behavior {

  bool isLeft;

  predicate Inactive{
    float ac_rot1_1;
    float ac_rot1_2;
    float ac_rot1_3;
    float ac_rot2_1;
    float ac_rot2_2;
    float ac_rot2_3;
    float ac_rot3_1;
    float ac_rot3_2;
    float ac_rot3_3;
    float ac_x;
    float ac_y;
    float ac_z;
    float des_rot1_1;
    float des_rot1_2;
    float des_rot1_3;
    float des_rot2_1;
    float des_rot2_2;
    float des_rot2_3;
    float des_rot3_1;
    float des_rot3_2;
    float des_rot3_3;
    float des_x;
    float des_y;
    float des_z;
  }

  predicate Active {
    float rot1_1;
    float rot1_2;
    float rot1_3;
    float rot2_1;
    float rot2_2;
    float rot2_3;
    float rot3_1;
    float rot3_2;
    float rot3_3;
    float x;
    float y;
    float z;
  }
  
  MoveEndEffector(Mode _mode, bool _isLeft){
    super(_mode);
    isLeft = _isLeft;
  }
};
