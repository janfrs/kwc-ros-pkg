/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2008, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/
#ifndef TRAJECTORY_H_
#define TRAJECTORY_H_

#include <vector>

//stores the information for a point on a trajectory
class TrajectoryPoint{
  public:
    TrajectoryPoint(double t, double x, double y, double theta,
        double xv, double yv, double thetav)
      : t_(t), x_(x), y_(y), theta_(theta), xv_(xv), yv_(yv), thetav_(thetav)
    {}

    TrajectoryPoint()
      : t_(0), x_(0), y_(0), theta_(0), xv_(0), yv_(0), thetav_(0)
    {}

    //time
    double t_;

    //position at time t
    double x_, y_, theta_;

    //velocity at time t
    double xv_, yv_, thetav_;
};

//holds a trajectory generated by an x, y, and theta velocity
class Trajectory {
  public:
    Trajectory(double xv, double yv, double thetav, double steps);

    void addPoint(int step, TrajectoryPoint tp);

    double xv_, yv_, thetav_;

    //how good is this path
    double score_;

    //storage for points in the trajectory
    std::vector<TrajectoryPoint> points_;
};
#endif
