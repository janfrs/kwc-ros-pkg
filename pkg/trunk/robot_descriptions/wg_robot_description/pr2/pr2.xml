<?xml version="1.0"?>

<robot name="pr2"><!-- name of the robot-->
  
  <!-- Begin template definitions for ease of reuse -->
  
  <const name="robot_inital_position_x" value=" 0.0 " />   <!-- keep 0 for now, because of hardcoded sensor/gripper positions in controllers.cml -->
  <const name="robot_inital_position_y" value=" 0.0 " />   <!-- keep 0 for now, because of hardcoded sensor/gripper positions in controllers.cml -->
  <const name="robot_inital_position_z" value=" 0.0*(wheel_radius-base_caster_offset_z/2)/2 " />   <!-- keep 0 for now, because of hardcoded sensor/gripper positions in controllers.cml -->
  <const name="wheel_clearance_offset" value="0.02" />  <!-- placement robot model origin so wheel are not under ground -->
  
  <const name="base_size_x" value="0.65" />   <!-- for defining collision geometry -->
  <const name="base_size_y" value="0.65" />   <!-- for defining collision geometry -->
  <const name="base_size_z" value="0.26" />   <!-- for defining collision geometry -->
  
  <const name="wheel_length" value="0.03" />  <!-- FIXME -->
  <const name="wheel_radius" value="0.079" />   <!-- mp 20080801 -->
  
  <const name="base_caster_offset_x" value="0.2225" />   <!-- mp 20080801 -->
  <const name="base_caster_offset_y" value="0.2225" />   <!-- mp 20080801 -->
  <const name="base_caster_offset_z" value="0.0282" />   <!-- mp 20080801 -->
  
  <const name="caster_wheel_offset_y" value="0.049" />  <!-- from function spreadsheet -->
  
  <const name="caster_size_x" value="0.192" />  <!-- for collision geometry -->
  <const name="caster_size_y" value="0.164" />  <!-- for collision geometry -->
  <const name="caster_size_z" value="0.013" />  <!-- for collision geometry -->
  <const name="caster_collision_center_box_center_offset_z" value="0.07" /> 
  
  <const name="torso_size_x" value=".432 " />   <!-- for defining collision geometry -->
  <const name="torso_size_y" value=".620 " />  <!-- for defining collision geometry -->
  <const name="torso_size_z" value=".823 " />   <!-- for defining collision geometry -->
  
  <const name="base_torso_offset_x" value="-0.05    " />  <!-- mp 20080801 -->
  <const name="base_torso_offset_z" value=" 0.739675" />  <!-- mp 20080801 this is the offset for home position: lowest spine setting -->
  
  <const name="torso_center_box_center_offset_x" value="-.10" />  <!-- FIXME -->
  <const name="torso_center_box_center_offset_z" value="-.50" />  <!-- FIXME -->
  
  <const name="torso_max_travel_range" value=" 0.396 " />  <!-- FIXME -->
  
  <const name="shoulder_pan_size_x" value="0.347" />   <!-- for defining collision geometry -->
  <const name="shoulder_pan_size_y" value="0.254" />   <!-- for defining collision geometry -->
  <const name="shoulder_pan_size_z" value="0.646" />   <!-- for defining collision geometry -->
  <const name="shoulder_pan_center_box_center_offset_x" value=" .05" /> 
  <const name="shoulder_pan_center_box_center_offset_z" value="-.20" /> 
  
  <const name="shoulder_pan_min_limit" value=" -M_PI/2 " />   <!-- FIXME -->
  <const name="shoulder_pan_max_limit" value="  M_PI/2 " />   <!-- FIXME -->
  
  <const name="torso_shoulder_pan_offset_y" value="0.188" />  <!-- mp 20080801 -->
  
  <const name="shoulder_pitch_min_limit" value=" -0.6109 " /> 
  <const name="shoulder_pitch_max_limit" value=" 1.3090 " /> 
  
  <const name="shoulder_pitch_length" value="0.10" />  <!-- for defining collision geometry -->
  <const name="shoulder_pitch_radius" value="0.12" />  <!-- for defining collision geometry -->
  
  <const name="shoulder_pan_shoulder_pitch_offset_x" value="0.1" />  <!-- mp 20080801 -->
  
  <const name="upperarm_roll_size_x" value="0.362" />  <!-- for defining collision geometry -->
  <const name="upperarm_roll_size_y" value="0.144" />  <!-- for defining collision geometry -->
  <const name="upperarm_roll_size_z" value="0.157" />  <!-- for defining collision geometry -->
  <const name="upperarm_roll_center_box_center_offset_x" value=".30" />  <!-- from origin of mesh to center of box-geom -->
  
  
  <const name="elbow_flex_min_limit" value="  -M_PI/2 " /> 
  <const name="elbow_flex_max_limit" value="  0.8727  " /> 
  
  <const name="elbow_flex_length" value="0.08" />  <!-- for defining collision geometry -->
  <const name="elbow_flex_radius" value="0.1" />  <!-- for defining collision geometry -->
  
  <const name="upperarm_roll_elbow_flex_offset_x" value="0.4" />  <!-- mp 20080801 -->
  
  <const name="forearm_roll_size_x" value="0.27" />  <!-- for defining collision geometry -->
  <const name="forearm_roll_size_y" value="0.12" />  <!-- for defining collision geometry -->
  <const name="forearm_roll_size_z" value="0.08" />  <!-- for defining collision geometry -->
  <const name="forearm_roll_center_box_center_offset_x" value=" 0.22 " />  <!-- FIXME -->
  
  <const name="elbow_roll_wrist_flex_offset_x" value="0.32025" />  <!-- mp 20080801 -->
  
  <const name="wrist_flex_radius" value="0.033 " />    <!-- for defining collision geometry -->
  <const name="wrist_flex_length" value="0.103 " />  <!-- for defining collision geometry -->
  
  <const name="wrist_flex_min_limit" value="  -1 " />  
  <const name="wrist_flex_max_limit" value=" 1 " /> 
  
  <const name="gripper_roll_size_x" value="0.11" />  <!-- for defining collision geometry -->
  <const name="gripper_roll_size_y" value="0.10" />  <!-- for defining collision geometry -->
  <const name="gripper_roll_size_z" value="0.05" />  <!-- for defining collision geometry -->
  <const name="gripper_roll_center_box_center_offset_x" value="0.05" />  <!-- FIXME -->
  
  
  
  <const name="head_pan_min_limit" value="-2.9322" /> <!-- FIXME -->
  <const name="head_pan_max_limit" value="2.9322" /> <!-- FIXME -->
  
  <const name="torso_head_pan_offset_x" value="0.0" /> <!-- mp 20080801 -->
  <const name="torso_head_pan_offset_z" value="0.3815" /> <!-- mp 20080801 -->
  
  <const name="head_pan_size_x" value="0.188" />  <!-- for defining collision geometry -->
  <const name="head_pan_size_y" value="0.219" />  <!-- for defining collision geometry -->
  <const name="head_pan_size_z" value="0.137" />  <!-- for defining collision geometry -->
  
  
  <const name="head_tilt_min_limit" value=" -M_PI/6 " /> <!-- FIXME -->
  <const name="head_tilt_max_limit" value=" M_PI/3 " /> <!-- FIXME -->
  
  <const name="head_pan_head_tilt_offset_x" value="0.058" />  <!-- mp 20080801 -->
  
  <const name="head_tilt_size_x" value="0.164" />  <!-- for defining collision geometry -->
  <const name="head_tilt_size_y" value="0.253" />  <!-- for defining collision geometry -->
  <const name="head_tilt_size_z" value="0.181" />  <!-- for defining collision geometry -->
  
  <!-- stereo camera -->
  <const name="head_tilt_stereo_offset_x" value="0.0232" />  <!-- mp 20080801 -->
  <const name="head_tilt_stereo_offset_z" value="0.0645" />  <!-- mp 20080801 -->
  <const name="stereo_size_x" value=" 0.05 " /> <!-- for definint visual and collision geometry -->
  <const name="stereo_size_y" value=" 0.10 " /> <!-- for definint visual and collision geometry -->
  <const name="stereo_size_z" value=" 0.05 " /> <!-- for definint visual and collision geometry -->
  <const name="stereo_center_box_center_offset_x" value=" 0.00 " /> <!-- from center of stereo to stereo mount point, which is provided above -->
  <const name="stereo_center_box_center_offset_z" value=" 0.05 " /> <!-- from center of stereo to stereo mount point, which is provided above -->
  
  <!-- ptz cameras -->
  <const name="torso_ptz_pan_left_offset_x" value=" 0.0000" />  <!-- mp 20080801 -->
  <const name="torso_ptz_pan_left_offset_y" value=" 0.1975" />  <!-- mp 20080801 -->
  <const name="torso_ptz_pan_left_offset_z" value=" 0.2265" />  <!-- mp 20080801 -->
  <const name="torso_ptz_pan_right_offset_x" value=" 0.0000" />  <!-- mp 20080801 -->
  <const name="torso_ptz_pan_right_offset_y" value="-0.1975" />  <!-- mp 20080801 -->
  <const name="torso_ptz_pan_right_offset_z" value=" 0.2265" />  <!-- mp 20080801 -->

  <const name="ptz_pan_ptz_tilt_left_offset_x" value=" 0.0000" />  <!-- FIXME -->
  <const name="ptz_pan_ptz_tilt_left_offset_y" value=" 0.0300" />  <!-- FIXME -->
  <const name="ptz_pan_ptz_tilt_left_offset_z" value=" 0.0000" />  <!-- FIXME -->
  <const name="ptz_pan_ptz_tilt_right_offset_x" value=" 0.0000" />  <!-- FIXME -->
  <const name="ptz_pan_ptz_tilt_right_offset_y" value="-0.0300" />  <!-- FIXME -->
  <const name="ptz_pan_ptz_tilt_right_offset_z" value=" 0.0000" />  <!-- FIXME -->
   
  <const name="ptz_pan_min_limit" value=" -M_PI/2 " /> <!-- FIXME -->
  <const name="ptz_pan_max_limit" value="  M_PI/2 " /> <!-- FIXME -->
  <const name="ptz_tilt_min_limit" value=" -M_PI/2 " /> <!-- FIXME -->
  <const name="ptz_tilt_max_limit" value="  M_PI/2 " /> <!-- FIXME -->
  
  <const name="ptz_pan_radius" value=" 0.05 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_pan_length" value=" 0.05 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_pan_size_x" value=" 0.05 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_pan_size_y" value=" 0.05 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_pan_size_z" value=" 0.05 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_pan_left_center_box_center_offset_x" value=" 0.00 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_pan_left_center_box_center_offset_y" value=" 0.025 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_pan_left_center_box_center_offset_z" value=" 0.00 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_pan_right_center_box_center_offset_x" value=" 0.00 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_pan_right_center_box_center_offset_y" value="-0.025 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_pan_right_center_box_center_offset_z" value=" 0.00 " /> <!-- for definint visual and collision geometry -->
  
  <const name="ptz_tilt_radius" value=" 0.03 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_tilt_length" value=" 0.03 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_tilt_size_x" value=" 0.03 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_tilt_size_y" value=" 0.03 " /> <!-- for definint visual and collision geometry -->
  <const name="ptz_tilt_size_z" value=" 0.03 " /> <!-- for definint visual and collision geometry -->
  
  <!-- =========================== l finger proximal digit =========================== -->
  <const name="gripper_roll_finger_l_offset_x" value=" 0.07751" />  <!-- mp 20080801 -->
  <const name="gripper_roll_finger_l_offset_y" value=" 0.0100 " />  <!-- mp 20080801 -->
  <const name="gripper_roll_finger_l_offset_z" value=" 0.0000 " />  <!-- mp 20080801 -->
  
  <const name="finger_l_size_x" value="0.131" />  <!-- for defining collision geometry -->
  <const name="finger_l_size_y" value="0.056" />  <!-- for defining collision geometry -->
  <const name="finger_l_size_z" value="0.049" />  <!-- for defining collision geometry -->
  <const name="finger_l_center_box_center_offset_x" value="0.00" />  <!-- FIXME -->
  <const name="finger_l_center_box_center_offset_y" value="0.00" />  <!-- FIXME -->
  
  
  <!-- =========================== l finger tip (distal digit) =========================== -->
  <const name="finger_l_finger_tip_l_offset_x" value=" 0.0915 " />  <!-- mp 20080801 -->
  <const name="finger_l_finger_tip_l_offset_y" value=" 0.0000 " />  <!-- mp 20080801 -->
  <const name="finger_l_finger_tip_l_offset_z" value=" 0.0000 " />  <!-- mp 20080801 -->
  
  <const name="finger_tip_l_size_x" value="0.053" />  <!-- for defining collision geometry -->
  <const name="finger_tip_l_size_y" value="0.040" />  <!-- for defining collision geometry -->
  <const name="finger_tip_l_size_z" value="0.023" />  <!-- for defining collision geometry -->
  <const name="finger_tip_l_center_box_center_offset_x" value="0.00" />  <!-- FIXME -->
  <const name="finger_tip_l_center_box_center_offset_y" value="0.00" />  <!-- FIXME -->
  
  <!-- =========================== r finger proximal digit =========================== -->
  <const name="gripper_roll_finger_r_offset_x" value=" 0.07751" />  <!-- mp 20080801 -->
  <const name="gripper_roll_finger_r_offset_y" value="-0.0100 " />  <!-- mp 20080801 -->
  <const name="gripper_roll_finger_r_offset_z" value=" 0.0000 " />  <!-- mp 20080801 -->
  
  <const name="finger_r_size_x" value="0.131" />  <!-- for defining collision geometry -->
  <const name="finger_r_size_y" value="0.056" />  <!-- for defining collision geometry -->
  <const name="finger_r_size_z" value="0.049" />  <!-- for defining collision geometry -->
  <const name="finger_r_center_box_center_offset_x" value="0.00" />  <!-- FIXME -->
  <const name="finger_r_center_box_center_offset_y" value="0.00" />  <!-- FIXME -->
  
  <!-- =========================== r finger tip (distal digit) =========================== -->
  <const name="finger_r_finger_tip_r_offset_x" value=" 0.0915 " />  <!-- mp 20080801 -->
  <const name="finger_r_finger_tip_r_offset_y" value=" 0.0000 " />  <!-- mp 20080801 -->
  <const name="finger_r_finger_tip_r_offset_z" value=" 0.0000 " />  <!-- mp 20080801 -->
  
  <const name="finger_tip_r_size_x" value="0.053" />  <!-- for defining collision geometry -->
  <const name="finger_tip_r_size_y" value="0.040" />  <!-- for defining collision geometry -->
  <const name="finger_tip_r_size_z" value="0.023" />  <!-- for defining collision geometry -->
  <const name="finger_tip_r_center_box_center_offset_x" value="0.00" />  <!-- FIXME -->
  <const name="finger_tip_r_center_box_center_offset_y" value="0.00" />  <!-- FIXME -->
  
  
  
  <!-- to be used by sensors -->
  <const name="torso_tilt_laser_offset_x" value="0.10000" />  <!-- mp 20080801 -->
  <const name="torso_tilt_laser_offset_z" value="0.19525" />  <!-- mp 20080801 -->
  <const name="tilt_laser_center_box_center_offset_z" value="0.0" />  <!-- FIXME -->
  
  <const name="base_base_laser_offset_x" value="0.275" />  <!-- mp 20080801 -->
  <const name="base_base_laser_offset_z" value="0.182" />  <!-- mp 20080801 -->
  <const name="base_laser_center_box_center_offset_z" value="0.12" />  <!-- FIXME -->
  
  <const name="gripper_roll_camera_offset_x" value="0.05" />  <!-- this is a guess, please change me -->
  <const name="gripper_roll_camera_offset_y" value="0   " />  <!-- this is a guess, please change me -->
  <const name="gripper_roll_camera_offset_z" value="0.03" />  <!-- this is a guess, please change me -->
  
  <const name="forearm_roll_camera_offset_x" value="0.10" />  <!-- this is a guess, please change me -->
  <const name="forearm_roll_camera_offset_y" value="0   " />  <!-- this is a guess, please change me -->
  <const name="forearm_roll_camera_offset_z" value="0.05" />  <!-- this is a guess, please change me -->

  <!-- End constant dimensions -->
  
  <templates>
    <define template="pr2_caster_visual">
      <xyz>0 0 0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Green</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_caster_mesh_file">
        <filename>caster</filename><!-- mesh specified using an obj file --> 
      </geometry>
    </define> 
    <define template="pr2_caster_collision">
      <xyz>0 0 caster_collision_center_box_center_offset_z</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box"><!-- geometry specified using a simple geometric object -->
        <size>caster_size_x caster_size_y caster_size_z</size> 
      </geometry>
    </define> 
    <define template="pr2_caster_inertial">
      <mass> 3.473082 </mass>
      <com> 0 0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia> 0.012411765597 -0.000711733678 0.00050272983 0.015218160428 -0.000004273467 0.011763977943 </inertia>
    </define> 


    <define template="pr2_caster_joint" type="revolute"> 
      <axis> 0 0 1 </axis> <!-- direction of the joint in the local coordinate frame -->
      <anchor>0 0 0</anchor> <!-- point on the joint relative to the local coordinate frame -->
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
    </define>

    <define template="pr2_wheel_left_visual">
      <xyz>0 0 0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Blue</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_wheel_mesh_file"><!-- geometry specified using a simple geometric object -->
        <filename>wheel_left</filename>
      </geometry>
    </define> 

    <define template="pr2_wheel_right_visual">
      <xyz>0 0 0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Red</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_wheel_mesh_file"><!-- geometry specified using a simple geometric object -->
        <filename>wheel_right</filename>
      </geometry>
    </define> 

    <define template="pr2_wheel_collision">
      <xyz>0 0 0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>M_PI/2 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="cylinder"><!-- geometry specified using a simple geometric object -->
        <size>wheel_radius wheel_length</size> 
      </geometry>

      <data name="friction_coefficients" type="gazebo">
	<elem key="mu1" value="5.0" /> <!-- john needed so wheel can slip and steer -->
	<elem key="mu2" value="5.0" /> <!-- john needed so wheel can slip and steer -->
      </data>

    </define> 

    <define template="pr2_wheel_inertial">
      <mass> 0.44036 </mass>
      <com> 0 0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia> 0.012411765597 -0.000711733678 0.00050272983 0.015218160428 -0.000004273467 0.011763977943 </inertia>
    </define> 

    <define template="pr2_wheel_joint" type="revolute"> 
      <axis> 0 1 0 </axis> <!-- direction of the joint in the local coordinate frame -->
      <anchor>0 0 0</anchor> <!-- point on the joint relative to the local coordinate frame -->
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
    </define>

    <define template="pr2_shoulder_pan_joint" type="revolute">
      <axis> 0 0 1 </axis> <!-- direction of the joint in a global coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit> shoulder_pan_min_limit shoulder_pan_max_limit </limit>
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
    </define>

    <define template="pr2_shoulder_pan_inertial">
      <mass> 16.29553  </mass>
      <com> -0.005215 -0.030552 0.0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia>0.793291393007  0.003412032973  0.0096614481  0.818419457224  -0.033999499551  0.13915007406 </inertia>
    </define> 

    <define template="pr2_shoulder_pan_collision">
      <xyz>shoulder_pan_center_box_center_offset_x 0 shoulder_pan_center_box_center_offset_z</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box">
        <size> shoulder_pan_size_x shoulder_pan_size_y shoulder_pan_size_z</size>
      </geometry>
    </define> 

    <define template="pr2_shoulder_pan_visual">
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0</rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Blue</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_sholder_pan_mesh_file">
        <filename>sh-pan</filename>
      </geometry>
    </define> 

    <define template="pr2_shoulder_pitch_joint" type="revolute">
      <axis> 0 1 0 </axis> <!-- direction of the joint in a global coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit> shoulder_pitch_min_limit shoulder_pitch_max_limit </limit>
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
    </define>

    <define template="pr2_shoulder_pitch_inertial">
      <mass> 2.41223  </mass>
      <com> -0.035895  0.014422 -0.0028263</com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia> 0.016640333585 0.002696462583  0.001337742275  0.017232603914  -0.003605106514  0.018723553425</inertia>
    </define> 

    <define template="pr2_shoulder_pitch_collision">
      <xyz>shoulder_pitch_length/2 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>M_PI/2 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Grey</material>
      <geometry type="cylinder">
        <size> shoulder_pitch_radius shoulder_pitch_length </size>
      </geometry>
    </define> 

    <define template="pr2_shoulder_pitch_visual">
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Grey</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_sholder_pitch_mesh_file">
        <filename>sh-pitch</filename>
      </geometry>
    </define> 

    <define template="pr2_upperarm_roll_joint" type="revolute">
      <axis> 1 0 0 </axis> <!-- direction of the joint in a global coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit> -2.3562 2.3562 </limit>
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
    </define>

    <define template="pr2_upperarm_roll_inertial">
      <mass> 4.9481 </mass>
      <com> 0.21227 0.001205 -0.016293  </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame --> <!-- FIXME John switched x and z for now -->
      <inertia> 0.073060715309 0.000547745916  0.000119476885  0.072124510748  0.001544932307  0.013383284908</inertia>
    </define> 

    <define template="pr2_upperarm_roll_collision">
      <xyz>upperarm_roll_center_box_center_offset_x 0 0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box">
        <size> upperarm_roll_size_x upperarm_roll_size_y upperarm_roll_size_z </size>
      </geometry>
    </define> 

    <define template="pr2_upperarm_roll_visual">
      <xyz>0 0 0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Green</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_sholder_roll_mesh_file">
        <filename>sh-roll</filename>
      </geometry>
    </define> 

    <define template="pr2_elbow_flex_joint" type="revolute">
      <axis> 0 1 0 </axis> <!-- direction of the joint in a global coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit>  elbow_flex_min_limit elbow_flex_max_limit  </limit>
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
    </define>

    <define template="pr2_elbow_flex_inertial">
      <mass> 1.689246 </mass>
      <com> -0.011638  0.013173 0.001228 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia> 0.003275298548 0.000292046674  -0.000077359282  0.003236815206  -0.000001162155  0.00410053774 </inertia>
    </define> 

    <define template="pr2_elbow_flex_collision">
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>M_PI/2 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Grey</material>
      <geometry type="cylinder">
        <size>elbow_flex_radius elbow_flex_length </size>
      </geometry>
    </define> 

    <define template="pr2_elbow_flex_visual">
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Grey</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_elbow_flex_mesh_file">
        <filename>el-pitch</filename>
      </geometry>
    </define> 

    <define template="pr2_forearm_roll_joint" type="revolute">
      <axis> 1 0 0 </axis> <!-- direction of the joint in a global coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
    </define>

    <define template="pr2_forearm_roll_inertial">
      <mass> 1.804155 </mass>
      <com> 0.179474 -0.000058  0.013779 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame --> <!-- FIXME John switched x and z for now-->
      <inertia> 0.012430552544 -0.000003671102 0.000029379389  0.013567548848 -0.000427679042 0.001755089866 </inertia>
    </define> 

    <define template="pr2_forearm_roll_collision">
      <xyz>forearm_roll_center_box_center_offset_x 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Red</material>
      <geometry type="box">
      <size>forearm_roll_size_x forearm_roll_size_y forearm_roll_size_z </size>
      </geometry>
    </define> 

    <define template="pr2_forearm_roll_visual">
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy> 0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Blue</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_forearm_roll_mesh_file">
        <filename>fa-roll</filename>
      </geometry>
    </define> 

    <define template="pr2_wrist_flex_joint" type="revolute">
      <axis> 0 1 0 </axis> <!-- direction of the joint in a global coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
      <limit> wrist_flex_min_limit wrist_flex_max_limit </limit>
    </define>

    <define template="pr2_wrist_flex_inertial">
      <mass> 0.1 </mass>
      <com> 0 0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia> 0.012430552544 -0.000003671102 0.000029379389  0.013567548848 -0.000427679042 0.001755089866 </inertia>
    </define> 

    <define template="pr2_wrist_flex_collision">
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>M_PI/2 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Green</material>
      <geometry type="cylinder">
      <size>wrist_flex_radius wrist_flex_length</size>
      </geometry>
    </define> 

    <define template="pr2_wrist_flex_visual">
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy> 0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Grey</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_wrist_flex_mesh_file">
        <filename>wr-pitch</filename>
      </geometry>
    </define> 


    <define template="pr2_gripper_roll_joint" type="revolute">
      <axis> 1 0 0 </axis> <!-- direction of the joint in a global coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
    </define>

    <define template="pr2_gripper_roll_inertial">
      <mass> 1.0 </mass>
      <com> 0.179474 -0.000058  0.013779  </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame --><!-- FIXME John switched x and z for now-->
      <inertia> 0.012430552544 -0.000003671102 0.000029379389  0.013567548848 -0.000427679042 0.001755089866 </inertia>
    </define> 

    <define template="pr2_gripper_roll_collision">
      <xyz>gripper_roll_center_box_center_offset_x 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box">
        <size>gripper_roll_size_x gripper_roll_size_y gripper_roll_size_z </size>
      </geometry>
      <verbose>Yes</verbose>
    </define> 

    <define template="pr2_gripper_roll_visual">
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Red</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_gripper_roll_mesh_file">
        <filename>wr-roll</filename>
      </geometry>
    </define> 


    <!-- ====================   l finger proximal digit ====================   -->
    <define template="pr2_finger_l_joint" type="revolute">
      <axis> 0 0 1 </axis> <!-- direction of the joint in a global coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
    </define>

    <define template="pr2_finger_l_inertial">
      <mass> 0.1 </mass>
      <com> 0 0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame --><!-- FIXME John switched x and z for now-->
      <inertia> 0.012430552544 -0.000003671102 0.000029379389  0.013567548848 -0.000427679042 0.001755089866 </inertia>
    </define> 

    <define template="pr2_finger_l_collision">
      <xyz>finger_l_center_box_center_offset_x finger_l_center_box_center_offset_y 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box">
        <size>finger_l_size_x finger_l_size_y finger_l_size_z </size>
      </geometry>
      <verbose>Yes</verbose>
    </define> 

    <define template="pr2_finger_l_visual">
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Shell</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_finger_l_mesh_file">
        <filename>finger-l</filename>
      </geometry>
    </define> 


    <!-- ====================   l finger tip (distal digit) ====================   -->
    <define template="pr2_finger_tip_l_joint" type="revolute">
      <axis> 0 0 1 </axis> <!-- direction of the joint in a global coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
    </define>

    <define template="pr2_finger_tip_l_inertial">
      <mass> 0.1 </mass>
      <com> 0 0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame --><!-- FIXME John switched x and z for now-->
      <inertia> 0.012430552544 -0.000003671102 0.000029379389  0.013567548848 -0.000427679042 0.001755089866 </inertia>
    </define> 

    <define template="pr2_finger_tip_l_collision">
      <xyz>finger_tip_l_center_box_center_offset_x finger_tip_l_center_box_center_offset_y 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box">
        <size>finger_tip_l_size_x finger_tip_l_size_y finger_tip_l_size_z </size>
      </geometry>
      <verbose>Yes</verbose>
    </define> 

    <define template="pr2_finger_tip_l_visual">
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Green</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_finger_tip_l_mesh_file">
        <filename>finger-tip-l</filename>
      </geometry>
    </define> 

    <!-- ====================   r finger proximal digit ====================   -->
    <define template="pr2_finger_r_joint" type="revolute">
      <axis> 0 0 1 </axis> <!-- direction of the joint in a global coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
    </define>

    <define template="pr2_finger_r_inertial">
      <mass> 0.1 </mass>
      <com> 0 0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame --><!-- FIXME John switched x and z for now-->
      <inertia> 0.012430552544 -0.000003671102 0.000029379389  0.013567548848 -0.000427679042 0.001755089866 </inertia>
    </define> 

    <define template="pr2_finger_r_collision">
      <xyz>finger_r_center_box_center_offset_x finger_r_center_box_center_offset_y 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box">
        <size>finger_r_size_x finger_r_size_y finger_r_size_z </size>
      </geometry>
      <verbose>Yes</verbose>
    </define> 

    <define template="pr2_finger_r_visual">
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Blue</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_finger_r_mesh_file">
        <filename>finger-r</filename>
      </geometry>
    </define> 

    <!-- ====================   r finger tip (distal digit) ====================   -->
    <define template="pr2_finger_tip_r_joint" type="revolute">
      <axis> 0 0 1 </axis> <!-- direction of the joint in a global coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <calibration>1.5 -1 </calibration> <!-- Calibration stop/flag indicating location and then direction -->
    </define>

    <define template="pr2_finger_tip_r_inertial">
      <mass> 0.1 </mass>
      <com> 0 0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame --><!-- FIXME John switched x and z for now-->
      <inertia> 0.012430552544 -0.000003671102 0.000029379389  0.013567548848 -0.000427679042 0.001755089866 </inertia>
    </define> 

    <define template="pr2_finger_tip_r_collision">
      <xyz>finger_tip_r_center_box_center_offset_x finger_tip_r_center_box_center_offset_y 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box">
        <size>finger_tip_r_size_x finger_tip_r_size_y finger_tip_r_size_z </size>
      </geometry>
      <verbose>Yes</verbose>
    </define> 

    <define template="pr2_finger_tip_r_visual">
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Green</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_finger_tip_r_mesh_file">
        <filename>finger-tip-r</filename>
      </geometry>
    </define> 




  </templates>

<!-- End template definitions for ease of reuse -->


<!-- Begin base definition -->

  <link name="base"><!-- link specifying the base of the robot -->

    <parent> world</parent>

    <rpy> 0 0 0</rpy> <!-- rotation of a local coordinate frame attached to the link with respect to a global coordinate frame -->
    <xyz> robot_inital_position_x robot_inital_position_y robot_inital_position_z </xyz> <!-- position of a local coordinate frame attached to the link with respect to the parent link's coordinate frame -->

    <joint type="planar"> 
    </joint>

    <inertial>
      <mass> 70.750964  </mass>
      <com> 0 0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia>5.652232699207  -0.009719934438  1.293988226423 5.669473158652 -0.007379583694 3.683196351726 </inertia>
    </inertial> 

    <visual>
      <xyz>0 0 0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Green</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_base_mesh_file">
        <filename>base</filename>
      </geometry>
    </visual> 

    <collision>
      <xyz>0 0 base_size_z/2</xyz> <!-- default box is centered at the origin -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Grey</material> 
      <geometry type="box"> <!-- think about putting mesh here as well -->
        <size>base_size_x base_size_y base_size_z</size>
      </geometry>
    </collision>

  </link>

  <link name="caster_front_left">
    <parent> base</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> base_caster_offset_x base_caster_offset_y base_caster_offset_z </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->
    <joint clone="pr2_caster_joint"/>
    <inertial clone="pr2_caster_inertial"/>
    <visual clone="pr2_caster_visual"/>
    <collision clone="pr2_caster_collision"/>
  </link>


  <link name="caster_front_right">
    <parent> base</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> base_caster_offset_x -base_caster_offset_y base_caster_offset_z </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_caster_joint"/>
    <inertial clone="pr2_caster_inertial"/>
    <visual clone="pr2_caster_visual"/>
    <collision clone="pr2_caster_collision"/>
  </link>

  <link name="caster_rear_left">
    <parent> base</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
      <xyz> -base_caster_offset_x base_caster_offset_y base_caster_offset_z </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

      <joint clone="pr2_caster_joint"/>
      <inertial clone="pr2_caster_inertial"/>
      <visual clone="pr2_caster_visual"/>
    <collision clone="pr2_caster_collision"/>
  </link>

  <link name="caster_rear_right">
    <parent> base</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
      <xyz> -base_caster_offset_x -base_caster_offset_y base_caster_offset_z </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

      <joint clone="pr2_caster_joint"/>
      <inertial clone="pr2_caster_inertial"/>
      <visual clone="pr2_caster_visual"/>
    <collision clone="pr2_caster_collision"/>
  </link>

  <link name="wheel_front_left_l">
    <parent> caster_front_left</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 caster_wheel_offset_y 0 </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_wheel_joint"/>
    <inertial clone="pr2_wheel_inertial"/>
    <visual clone="pr2_wheel_left_visual"/>
    <collision clone="pr2_wheel_collision"/>
  </link>

  <link name="wheel_front_left_r">
    <parent> caster_front_left</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 -caster_wheel_offset_y 0 </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_wheel_joint"/>
    <inertial clone="pr2_wheel_inertial"/>
    <visual clone="pr2_wheel_right_visual"/>
    <collision clone="pr2_wheel_collision"/>
  </link>

  <link name="wheel_front_right_l">
    <parent> caster_front_right</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 caster_wheel_offset_y 0 </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_wheel_joint"/>
    <inertial clone="pr2_wheel_inertial"/>
    <visual clone="pr2_wheel_left_visual"/>
    <collision clone="pr2_wheel_collision"/>
  </link>


  <link name="wheel_front_right_r">
    <parent> caster_front_right</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 -caster_wheel_offset_y 0 </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_wheel_joint"/>
    <inertial clone="pr2_wheel_inertial"/>
    <visual clone="pr2_wheel_right_visual"/>
    <collision clone="pr2_wheel_collision"/>
  </link>

  <link name="wheel_rear_left_l">
    <parent> caster_rear_left</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 caster_wheel_offset_y 0 </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_wheel_joint"/>
    <inertial clone="pr2_wheel_inertial"/>
    <visual clone="pr2_wheel_left_visual"/>
    <collision clone="pr2_wheel_collision"/>
  </link>

  <link name="wheel_rear_left_r">
    <parent> caster_rear_left</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 -caster_wheel_offset_y 0 </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_wheel_joint"/>
    <inertial clone="pr2_wheel_inertial"/>
    <visual clone="pr2_wheel_right_visual"/>
    <collision clone="pr2_wheel_collision"/>
  </link>

  <link name="wheel_rear_right_l">
    <parent> caster_rear_right</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 caster_wheel_offset_y 0 </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_wheel_joint"/>
    <inertial clone="pr2_wheel_inertial"/>
    <visual clone="pr2_wheel_left_visual"/>
    <collision clone="pr2_wheel_collision"/>
  </link>

  <link name="wheel_rear_right_r">
    <parent> caster_rear_right</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 -caster_wheel_offset_y 0 </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_wheel_joint"/>
    <inertial clone="pr2_wheel_inertial"/>
    <visual clone="pr2_wheel_right_visual"/>
    <collision clone="pr2_wheel_collision"/>
  </link>

<!-- End base definition -->

<!-- Begin torso definition -->

  <link name="torso">
    <parent> base </parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> base_torso_offset_x 0 base_torso_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint type="prismatic"> 
      <axis> 0 0 1 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit> 0.0 torso_max_travel_range </limit> <!-- 0 for min range since home position is at bottom -->
    </joint>

    <inertial>
      <mass> 36.248046  </mass>
      <com> 0 0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia> 2.771653750257 0.004284522609  -0.160418504506  2.510019507959 0.029664468704 0.526432355569</inertia>
    </inertial>

    <visual>
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Red</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_torso_mesh_file">
        <filename>body</filename>
      </geometry>
    </visual> 

    <collision>
      <xyz>torso_center_box_center_offset_x 0 torso_size_z/2+torso_center_box_center_offset_z </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Grey</material> 
      <geometry type="box">
      <size> torso_size_x torso_size_y torso_size_z </size>
      </geometry>
    </collision> 
  </link>

<!-- End torso definition -->

<!-- Begin arm definitions -->


  <link name="shoulder_pan_left"><!-- link specifying the shoulder of the robot -->
    <parent> torso</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 torso_shoulder_pan_offset_y 0</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_shoulder_pan_joint"/>
    <inertial clone="pr2_shoulder_pan_inertial"/>
    <visual clone="pr2_shoulder_pan_visual"/>
    <collision clone="pr2_shoulder_pan_collision"/>
  </link>

  <link name="shoulder_pan_right"><!-- link specifying the shoulder of the robot -->
    <parent> torso</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 -torso_shoulder_pan_offset_y 0</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_shoulder_pan_joint"/>
    <inertial clone="pr2_shoulder_pan_inertial"/>
    <visual clone="pr2_shoulder_pan_visual"/>
    <collision clone="pr2_shoulder_pan_collision"/>
  </link>



  <link name="shoulder_pitch_left"><!-- link specifying the shoulder of the robot -->
    <parent> shoulder_pan_left</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> shoulder_pan_shoulder_pitch_offset_x 0 0 </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_shoulder_pitch_joint"/>
    <inertial clone="pr2_shoulder_pitch_inertial"/>
    <visual clone="pr2_shoulder_pitch_visual"/>
    <collision clone="pr2_shoulder_pitch_collision"/>
  </link>

  <link name="shoulder_pitch_right"><!-- link specifying the shoulder of the robot -->
    <parent> shoulder_pan_right</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> shoulder_pan_shoulder_pitch_offset_x 0 0 </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_shoulder_pitch_joint"/>
    <inertial clone="pr2_shoulder_pitch_inertial"/>
    <visual clone="pr2_shoulder_pitch_visual"/>
    <collision clone="pr2_shoulder_pitch_collision"/>
  </link>


  <link name="upperarm_roll_left"><!-- link specifying the shoulder of the robot -->
    <parent> shoulder_pitch_left</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 0 0 </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_upperarm_roll_joint"/>
    <inertial clone="pr2_upperarm_roll_inertial"/>
    <visual clone="pr2_upperarm_roll_visual"/>
    <collision clone="pr2_upperarm_roll_collision"/>
  </link>

  <link name="upperarm_roll_right"><!-- link specifying the shoulder of the robot -->
    <parent> shoulder_pitch_right</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 0 0 </xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_upperarm_roll_joint"/>
    <inertial clone="pr2_upperarm_roll_inertial"/>
    <visual clone="pr2_upperarm_roll_visual"/>
    <collision clone="pr2_upperarm_roll_collision"/>
  </link>



  <link name="elbow_flex_left"><!-- link specifying the shoulder of the robot -->
    <parent> upperarm_roll_left</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> upperarm_roll_elbow_flex_offset_x 0 0</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_elbow_flex_joint"/>
    <inertial clone="pr2_elbow_flex_inertial"/>
    <visual clone="pr2_elbow_flex_visual"/>
    <collision clone="pr2_elbow_flex_collision"/>
  </link>

  <link name="elbow_flex_right"><!-- link specifying the shoulder of the robot -->
    <parent> upperarm_roll_right</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> upperarm_roll_elbow_flex_offset_x 0 0</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_elbow_flex_joint"/>
    <inertial clone="pr2_elbow_flex_inertial"/>
    <visual clone="pr2_elbow_flex_visual"/>
    <collision clone="pr2_elbow_flex_collision"/>
  </link>

  <link name="forearm_roll_left"><!-- link specifying the shoulder of the robot -->
    <parent> elbow_flex_left</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 0 0</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_forearm_roll_joint"/>
    <inertial clone="pr2_forearm_roll_inertial"/>
    <visual clone="pr2_forearm_roll_visual"/>
    <collision clone="pr2_forearm_roll_collision"/>
  </link>

  <link name="forearm_roll_right"><!-- link specifying the shoulder of the robot -->
    <parent> elbow_flex_right</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 0 0</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_forearm_roll_joint"/>
    <inertial clone="pr2_forearm_roll_inertial"/>
    <visual clone="pr2_forearm_roll_visual"/>
    <collision clone="pr2_forearm_roll_collision"/>
  </link>

  <link name="wrist_flex_left"><!-- link specifying the shoulder of the robot -->
    <parent> forearm_roll_left</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> elbow_roll_wrist_flex_offset_x 0 0</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_wrist_flex_joint"/>
    <inertial clone="pr2_wrist_flex_inertial"/>
    <visual clone="pr2_wrist_flex_visual"/>
    <collision clone="pr2_wrist_flex_collision"/>
  </link>

  <link name="wrist_flex_right"><!-- link specifying the shoulder of the robot -->
    <parent> forearm_roll_right</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> elbow_roll_wrist_flex_offset_x 0 0</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_wrist_flex_joint"/>
    <inertial clone="pr2_wrist_flex_inertial"/>
    <visual clone="pr2_wrist_flex_visual"/>
    <collision clone="pr2_wrist_flex_collision"/>
  </link>

  <link name="gripper_roll_left"><!-- link specifying the shoulder of the robot -->
    <parent> wrist_flex_left</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 0 0</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_gripper_roll_joint"/>
    <inertial clone="pr2_gripper_roll_inertial"/>
    <visual clone="pr2_gripper_roll_visual"/>
    <collision clone="pr2_gripper_roll_collision"/>
  </link>

  <link name="gripper_roll_right"><!-- link specifying the shoulder of the robot -->
    <parent> wrist_flex_right</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> 0 0 0</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_gripper_roll_joint"/>
    <inertial clone="pr2_gripper_roll_inertial"/>
    <visual clone="pr2_gripper_roll_visual"/>
    <collision clone="pr2_gripper_roll_collision"/>
  </link>

<!-- End arm definitions -->


<!-- Begin left hand  -->
  <!-- Begin left hand l finger proximal digit definition -->
  <link name="finger_l_left"><!-- link specifying the shoulder of the robot -->
    <parent> gripper_roll_left </parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> gripper_roll_finger_l_offset_x gripper_roll_finger_l_offset_y gripper_roll_finger_l_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_finger_l_joint"/>
    <inertial clone="pr2_finger_l_inertial"/>
    <visual clone="pr2_finger_l_visual"/>
    <collision clone="pr2_finger_l_collision"/>
  </link>
  <!-- End   left hand l finger proximal digit definition -->
  <!-- Begin left hand l finger tip (distal digit) definition -->
  <link name="finger_tip_l_left"><!-- link specifying the shoulder of the robot -->
    <parent> finger_l_left </parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> finger_l_finger_tip_l_offset_x finger_l_finger_tip_l_offset_y finger_l_finger_tip_l_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_finger_tip_l_joint"/>
    <inertial clone="pr2_finger_tip_l_inertial"/>
    <visual clone="pr2_finger_tip_l_visual"/>
    <collision clone="pr2_finger_tip_l_collision"/>
  </link>
  <!-- End   left hand l finger tip (distal digit) definition -->
  <!-- Begin left hand r finger proximal digit definition -->
  <link name="finger_r_left"><!-- link specifying the shoulder of the robot -->
    <parent> gripper_roll_left </parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> gripper_roll_finger_r_offset_x gripper_roll_finger_r_offset_y gripper_roll_finger_r_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_finger_r_joint"/>
    <inertial clone="pr2_finger_r_inertial"/>
    <visual clone="pr2_finger_r_visual"/>
    <collision clone="pr2_finger_r_collision"/>
  </link>
  <!-- End   left hand r finger proximal digit definition -->
  <!-- Begin left hand r finger tip (distal digit) definition -->
  <link name="finger_tip_r_left"><!-- link specifying the shoulder of the robot -->
    <parent> finger_r_left </parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> finger_r_finger_tip_r_offset_x finger_r_finger_tip_r_offset_y finger_r_finger_tip_r_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_finger_tip_r_joint"/>
    <inertial clone="pr2_finger_tip_r_inertial"/>
    <visual clone="pr2_finger_tip_r_visual"/>
    <collision clone="pr2_finger_tip_r_collision"/>
  </link>
  <!-- End   left hand r finger tip (distal digit) definition -->
<!-- End   left hand  -->


<!-- Begin right hand  -->
  <!-- Begin right hand l finger proximal digit definition -->
  <link name="finger_l_right"><!-- link specifying the shoulder of the robot -->
    <parent> gripper_roll_right </parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> gripper_roll_finger_l_offset_x gripper_roll_finger_l_offset_y gripper_roll_finger_l_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_finger_l_joint"/>
    <inertial clone="pr2_finger_l_inertial"/>
    <visual clone="pr2_finger_l_visual"/>
    <collision clone="pr2_finger_l_collision"/>
  </link>
  <!-- End   right hand l finger proximal digit definition -->
  <!-- Begin right hand l finger tip (distal digit) definition -->
  <link name="finger_tip_l_right"><!-- link specifying the shoulder of the robot -->
    <parent> finger_l_right </parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> finger_l_finger_tip_l_offset_x finger_l_finger_tip_l_offset_y finger_l_finger_tip_l_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_finger_tip_l_joint"/>
    <inertial clone="pr2_finger_tip_l_inertial"/>
    <visual clone="pr2_finger_tip_l_visual"/>
    <collision clone="pr2_finger_tip_l_collision"/>
  </link>
  <!-- End   right hand l finger tip (distal digit) definition -->
  <!-- Begin right hand r finger proximal digit definition -->
  <link name="finger_r_right"><!-- link specifying the shoulder of the robot -->
    <parent> gripper_roll_right </parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> gripper_roll_finger_r_offset_x gripper_roll_finger_r_offset_y gripper_roll_finger_r_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_finger_r_joint"/>
    <inertial clone="pr2_finger_r_inertial"/>
    <visual clone="pr2_finger_r_visual"/>
    <collision clone="pr2_finger_r_collision"/>
  </link>
  <!-- End   right hand r finger proximal digit definition -->
  <!-- Begin right hand r finger tip (distal digit) definition -->
  <link name="finger_tip_r_right"><!-- link specifying the shoulder of the robot -->
    <parent> finger_r_right </parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> finger_r_finger_tip_r_offset_x finger_r_finger_tip_r_offset_y finger_r_finger_tip_r_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->

    <joint clone="pr2_finger_tip_r_joint"/>
    <inertial clone="pr2_finger_tip_r_inertial"/>
    <visual clone="pr2_finger_tip_r_visual"/>
    <collision clone="pr2_finger_tip_r_collision"/>
  </link>
  <!-- End   right hand r finger tip (distal digit) definition -->
<!-- End   right hand  -->



<!-- Begin head definition -->


  <link name="head_pan"><!-- link specifying the shoulder of the robot -->
    <parent>torso</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> torso_head_pan_offset_x 0 torso_head_pan_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->


    <joint type="revolute"> 
      <axis> 0 0 1 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit> head_pan_min_limit head_pan_max_limit </limit>
    </joint>

    <inertial>
      <mass> 1.611118  </mass>
      <com> -0.005717  0.010312 -0.029649 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia>0.00482611007  -0.000144683999  0.000110076136  0.005218991412  -0.000314239509  0.008618784925 </inertia>
    </inertial>

    <visual>
      <xyz>0 0 0.0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Blue</material>
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_head_pan_mesh_file">
        <filename>head-pan</filename>
      </geometry>
    </visual> 

    <collision>
      <xyz> 0 0 0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box">
        <size>head_pan_size_x head_pan_size_y head_pan_size_z </size>
      </geometry>
    </collision> 

  </link>

  <link name="head_tilt"><!-- link specifying the shoulder of the robot -->
    <parent> head_pan</parent>

    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> head_pan_head_tilt_offset_x 0 0</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->


    <joint type="revolute"> 
      <axis> 0 1 0 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit> head_tilt_min_limit head_tilt_max_limit </limit>
    </joint>

    <inertial>
      <mass>1.749727 </mass>
      <com> 0.041935 0.003569 0.028143 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia>0.010602303435  -0.000408814235  0.00198303894  0.011874383747  0.000197908779  0.005516790626</inertia>
    </inertial>

    <visual>
      <xyz>0 0 0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Green</material> 
      <scale>1 1 1</scale>
      <geometry type="mesh" name="pr2_head_tilt_mesh_file">
        <filename>head-tilt</filename>
      </geometry>
    </visual> 

    <collision>
      <xyz>0 0 0 </xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box">
        <size>head_tilt_size_x head_tilt_size_y head_tilt_size_z</size>
      </geometry>
    </collision> 
  </link>

<!-- End head definition -->


<!-- Begin sensor definitions -->
  <sensor name="tilt_laser" type="laser"> 

    <calibration> calib_filename </calibration>
    <parent>torso</parent>
    <xyz> torso_tilt_laser_offset_x 0 torso_tilt_laser_offset_z </xyz> <!-- position of a local coordinate frame attached to the sensor with respect to the parent link's coordinate frame -->
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the sensor with respect to the parent link's coordinate frame -->

    <joint type="revolute"> 
      <axis> 0 1 0 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0</anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
    </joint>

    <inertial>
      <mass> 1.0  </mass>
      <com> 0 0 0 </com> <!-- position of the center of mass with respect to the sensor's local coordinate frame -->
      <inertia>1 0 0 1 0 1 </inertia>
    </inertial> 

    <visual>
      <xyz>0   0   tilt_laser_center_box_center_offset_z  </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->

      <material>Gazebo/PioneerBody</material>
      <scale>.5 .5 .5</scale>
      <geometry type="mesh" name="pr2_tilt_laser_mesh_file">
        <filename>hokuyo</filename> <!-- mesh specified using an obj file --> 
      </geometry>
    </visual>

    <collision>
      <xyz>0   0   tilt_laser_center_box_center_offset_z  </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Grey</material> 
      <geometry type="box" name="collision_tilt_laser"><!-- geometry specified using a simple geometric object -->
        <size>.001 .001 .001</size> 
      </geometry>
    </collision>

    <data name="sensor" type="gazebo">
      <verbatim key="sensor_ray">
        <sensor:ray name="tilt_laser">
          <rayCount>683</rayCount>
          <rangeCount>683</rangeCount>
          <laserCount>1</laserCount>

          <origin>0.0 0.0 0.05</origin>
          <displayRays>false</displayRays>

          <minAngle>-45</minAngle>
          <maxAngle> 45</maxAngle>

          <minRange>0.05</minRange>
          <maxRange>10.0</maxRange>
          <updateRate>10.0</updateRate>
          <controller:ros_laser name="ros_tilt_laser_controller" plugin="libRos_Laser.so">
            <updateRate>15.0</updateRate>
            <topicName>tilt_scan</topicName>
            <frameName>tilt_laser</frameName>
            <interface:laser name="ros_tilt_laser_iface" />
          </controller:ros_laser>
        </sensor:ray>
      </verbatim>
    </data>

  </sensor>

  <sensor name="base_laser" type="laser"> 

    <calibration> calib_filename </calibration>
    <parent>base</parent>
    <xyz> base_base_laser_offset_x 0 base_base_laser_offset_z </xyz> <!-- position of a local coordinate frame attached to the sensor with respect to the parent link's coordinate frame -->
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the sensor with respect to the parent link's coordinate frame -->

    <joint type="revolute"> 
      <axis> 0 1 0 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0</anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit>0.0 0.0</limit>
    </joint>

    <inertial>
      <mass> 1.0  </mass>
      <com> 0 0 0 </com> <!-- position of the center of mass with respect to the sensor's local coordinate frame -->
      <inertia>1 0 0 1 0 1 </inertia>
    </inertial> 

    <visual>
      <xyz>0   0   base_laser_center_box_center_offset_z  </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->

      <material>Gazebo/PioneerBody</material>
      <scale>.5 .5 .5</scale>
      <geometry type="mesh" name="pr2_base_laser_mesh_file">
        <filename>hokuyo</filename> <!-- mesh specified using an obj file --> 
      </geometry>
    </visual>

    <collision>
      <xyz>0   0   base_laser_center_box_center_offset_z  </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Grey</material> 
      <geometry type="box" name="collision_base_laser"><!-- geometry specified using a simple geometric object -->
        <size>.001 .001 .001</size> 
      </geometry>
    </collision>

    <data name="sensor" type="gazebo">
      <verbatim key="sensor_ray">
        <sensor:ray name="base_laser">
          <rayCount>683</rayCount>
          <rangeCount>683</rangeCount>
          <laserCount>1</laserCount>
          <origin>0.0 0.0 0.17</origin> <!-- FIXME: for verbatim, adjust this number according to base_laser_center_box_center_offset_z -->
          <displayRays>false</displayRays>

          <minAngle>-90</minAngle>
          <maxAngle>90</maxAngle>

          <minRange>0.05</minRange>
          <maxRange>10.0</maxRange>
          <updateRate>10.0</updateRate>
          <controller:ros_laser name="ros_base_laser_controller" plugin="libRos_Laser.so">
            <updateRate>10</updateRate>
            <topicName>base_scan</topicName>
            <frameName>base_laser</frameName>
            <interface:laser name="ros_base_laser_iface" />
          </controller:ros_laser>
        </sensor:ray>
      </verbatim>
    </data>

  </sensor>


  <sensor name="wrist_camera_left" type="camera"> 

    <calibration> calib_filename </calibration>
    <parent>gripper_roll_left</parent>
    <xyz> gripper_roll_camera_offset_x gripper_roll_camera_offset_y gripper_roll_camera_offset_z </xyz> <!-- position of a local coordinate frame attached to the sensor with respect to the parent link's coordinate frame -->
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the sensor with respect to the parent link's coordinate frame -->

    <joint type="revolute"> 
      <axis> 0 1 0 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0</anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit>0.0 0.0</limit>
    </joint>

    <inertial>
      <mass> 0.5  </mass>
      <com> 0.0 0.0 0.0 </com> <!-- position of the center of mass with respect to the sensor's local coordinate frame -->
      <inertia>1 0 0 1 0 1 </inertia>
    </inertial> 

    <visual>
      <xyz>0   0   0   </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/PioneerBody</material>
      <geometry type="box" name="visual_wrist_camera_left">
        <size>0.02 0.02 0.02</size>
      </geometry>
    </visual> 

    <collision>
      <xyz>0   0   0   </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box" name="collision_gripper_camera_left"><!-- geometry specified using a simple geometric object -->
        <size>0.02 0.02 0.02</size> 
      </geometry>
    </collision>

    <data name="sensor" type="gazebo">
      <verbatim key="sensor_camera">
        <sensor:camera name="wrist_cam_left_sensor">
          <imageSize>640 480</imageSize>
          <hfov>60</hfov>
          <nearClip>0.1</nearClip>
          <farClip>100</farClip>
          <updateRate>15.0</updateRate>
          <controller:ros_camera name="wrist_cam_left_controller" plugin="libRos_Camera.so">
            <updateRate>15.0</updateRate>
            <topicName>image_wrist_left</topicName>
            <frameName>wrist_camera_left</frameName>
            <interface:camera name="wrist_cam_left_iface" />
          </controller:ros_camera>
          <!--
          <controller:generic_camera name="wrist_cam_left_controller">
            <updateRate>15.0</updateRate>
            <interface:camera name="wrist_cam_left_iface_1" />
          </controller:generic_camera>
          -->
        </sensor:camera>
      </verbatim>
    </data>

  </sensor>


  <sensor name="wrist_camera_right" type="camera"> 

    <calibration> calib_filename </calibration>
    <parent>gripper_roll_right</parent>
    <xyz> gripper_roll_camera_offset_x gripper_roll_camera_offset_y gripper_roll_camera_offset_z </xyz> <!-- position of a local coordinate frame attached to the sensor with respect to the parent link's coordinate frame -->
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the sensor with respect to the parent link's coordinate frame -->

    <joint type="revolute"> 
      <axis> 0 1 0 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0</anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit>0.0 0.0</limit>
    </joint>

    <inertial>
      <mass> 0.5  </mass>
      <com> 0.0 0.0 0.0 </com> <!-- position of the center of mass with respect to the sensor's local coordinate frame -->
      <inertia>1 0 0 1 0 1 </inertia>
    </inertial> 

    <visual>
      <xyz>0   0   0   </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/PioneerBody</material>
      <geometry type="box" name="visual_wrist_camera_right">
        <size>0.02 0.02 0.02</size>
      </geometry>
    </visual> 

    <collision>
      <xyz>0   0   0   </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box" name="collision_gripper_camera_right"><!-- geometry specified using a simple geometric object -->
        <size>0.02 0.02 0.02</size> 
      </geometry>
    </collision>

    <data name="sensor" type="gazebo">
      <verbatim key="sensor_camera">
        <sensor:camera name="wrist_cam_right_sensor">
          <imageSize>640 480</imageSize>
          <hfov>60</hfov>
          <nearClip>0.1</nearClip>
          <farClip>100</farClip>
          <updateRate>15.0</updateRate>
          <controller:ros_camera name="wrist_cam_right_controller" plugin="libRos_Camera.so">
            <updateRate>15.0</updateRate>
            <topicName>image_wrist_right</topicName>
            <frameName>wrist_camera_right</frameName>
            <interface:camera name="wrist_cam_right_iface" />
          </controller:ros_camera>
          <!--
          <controller:generic_camera name="wrist_cam_right_controller">
            <updateRate>15.0</updateRate>
            <interface:camera name="wrist_cam_right_iface_1" />
          </controller:generic_camera>
          -->
        </sensor:camera>
      </verbatim>
    </data>

  </sensor>


  <sensor name="forearm_camera_left" type="camera"> 

    <calibration> calib_filename </calibration>
    <parent>forearm_roll_left</parent>
    <xyz> forearm_roll_camera_offset_x forearm_roll_camera_offset_y forearm_roll_camera_offset_z </xyz> <!-- position of a local coordinate frame attached to the sensor with respect to the parent link's coordinate frame -->
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the sensor with respect to the parent link's coordinate frame -->

    <joint type="revolute"> 
      <axis> 0 1 0 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0</anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit>0.0 0.0</limit>
    </joint>

    <inertial>
      <mass> 0.5  </mass>
      <com> 0.0 0.0 0.0 </com> <!-- position of the center of mass with respect to the sensor's local coordinate frame -->
      <inertia>1 0 0 1 0 1 </inertia>
    </inertial> 

    <visual>
      <xyz>0   0   0   </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/PioneerBody</material>
      <geometry type="box" name="visual_forearm_camera_left">
        <size>0.02 0.02 0.02</size>
      </geometry>
    </visual> 

    <collision>
      <xyz>0   0   0   </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box" name="collision_gripper_camera_left"><!-- geometry specified using a simple geometric object -->
        <size>0.02 0.02 0.02</size> 
      </geometry>
    </collision>

    <data name="sensor" type="gazebo">
      <verbatim key="sensor_camera">
        <sensor:camera name="forearm_cam_left_sensor">
          <imageSize>640 480</imageSize>
          <hfov>60</hfov>
          <nearClip>0.1</nearClip>
          <farClip>100</farClip>
          <updateRate>15.0</updateRate>
          <controller:ros_camera name="forearm_cam_left_controller" plugin="libRos_Camera.so">
            <updateRate>15.0</updateRate>
            <topicName>image_forearm_left</topicName>
            <frameName>forearm_roll_left</frameName>
            <interface:camera name="forearm_cam_left_iface" />
          </controller:ros_camera>
        </sensor:camera>
      </verbatim>
    </data>

  </sensor>


  <sensor name="forearm_camera_right" type="camera"> 

    <calibration> calib_filename </calibration>
    <parent>forearm_roll_right</parent>
    <xyz> forearm_roll_camera_offset_x forearm_roll_camera_offset_y forearm_roll_camera_offset_z </xyz> <!-- position of a local coordinate frame attached to the sensor with respect to the parent link's coordinate frame -->
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the sensor with respect to the parent link's coordinate frame -->

    <joint type="revolute"> 
      <axis> 0 1 0 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0</anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit>0.0 0.0</limit>
    </joint>

    <inertial>
      <mass> 0.5  </mass>
      <com> 0.0 0.0 0.0 </com> <!-- position of the center of mass with respect to the sensor's local coordinate frame -->
      <inertia>1 0 0 1 0 1 </inertia>
    </inertial> 

    <visual>
      <xyz>0   0   0   </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/PioneerBody</material>
      <geometry type="box" name="visual_forearm_camera_right">
        <size>0.02 0.02 0.02</size>
      </geometry>
    </visual> 

    <collision>
      <xyz>0   0   0   </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box" name="collision_gripper_camera_right"><!-- geometry specified using a simple geometric object -->
        <size>0.02 0.02 0.02</size> 
      </geometry>
    </collision>

    <data name="sensor" type="gazebo">
      <verbatim key="sensor_camera">
        <sensor:camera name="forearm_cam_right_sensor">
          <imageSize>640 480</imageSize>
          <hfov>60</hfov>
          <nearClip>0.1</nearClip>
          <farClip>100</farClip>
          <updateRate>15.0</updateRate>
          <controller:ros_camera name="forearm_cam_right_controller" plugin="libRos_Camera.so">
            <updateRate>15.0</updateRate>
            <topicName>image_forearm_right</topicName>
            <frameName>forearm_roll_right</frameName>
            <interface:camera name="forearm_cam_right_iface" />
          </controller:ros_camera>
        </sensor:camera>
      </verbatim>
    </data>

  </sensor>


  <link name="ptz_pan_left"><!-- link specifying the shoulder of the robot -->
    <parent>torso</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> torso_ptz_pan_left_offset_x torso_ptz_pan_left_offset_y torso_ptz_pan_left_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->


    <joint type="revolute"> 
      <axis> 0 0 1 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit> ptz_pan_min_limit ptz_pan_max_limit </limit>
    </joint>

    <inertial>
      <mass> 0.1  </mass>
      <com> 0  0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia>0.00482611007  -0.000144683999  0.000110076136  0.005218991412  -0.000314239509  0.008618784925 </inertia>
    </inertial>

    <visual>
      <xyz>ptz_pan_left_center_box_center_offset_x   ptz_pan_left_center_box_center_offset_y   ptz_pan_left_center_box_center_offset_z</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>M_PI/2 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Blue</material>
      <scale>ptz_pan_size_x ptz_pan_size_y ptz_pan_size_z</scale>
      <geometry type="cylinder" name="pr2_ptz_pan_left_visual">
      </geometry>
    </visual> 

    <collision>
      <xyz>ptz_pan_left_center_box_center_offset_x   ptz_pan_left_center_box_center_offset_y   ptz_pan_left_center_box_center_offset_z</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="cylinder">
        <size>ptz_pan_radius ptz_pan_length</size>
      </geometry>
    </collision> 

  </link>

  <sensor name="ptz_tilt_left" type="camera"><!-- link specifying the shoulder of the robot -->
    <parent>ptz_pan_left</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> ptz_pan_ptz_tilt_left_offset_x ptz_pan_ptz_tilt_left_offset_y ptz_pan_ptz_tilt_left_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->


    <joint type="revolute"> 
      <axis> 0 0 1 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit> ptz_tilt_min_limit ptz_tilt_max_limit </limit>
    </joint>

    <inertial>
      <mass> 0.1  </mass>
      <com> 0  0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia>0.00482611007  -0.000144683999  0.000110076136  0.005218991412  -0.000314239509  0.008618784925 </inertia>
    </inertial>

    <visual>
      <xyz>0 0 0.0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 M_PI/2 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Blue</material>
      <scale>ptz_tilt_size_x ptz_tilt_size_y ptz_tilt_size_z</scale>
      <geometry type="cylinder" name="pr2_ptz_tilt_left_visual">
      </geometry>
    </visual> 

    <collision>
      <xyz>0   0   0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="cylinder">
        <size>ptz_tilt_radius ptz_tilt_length</size>
      </geometry>
    </collision> 

    <data name="sensor" type="gazebo">
      <verbatim key="sensor_camera">
        <sensor:camera name="ptz_cam_left_sensor">
          <imageSize>640 480</imageSize>
          <hfov>60</hfov>
          <nearClip>0.1</nearClip>
          <farClip>100</farClip>
          <updateRate>15.0</updateRate>
          <controller:ros_camera name="ptz_cam_left_controller" plugin="libRos_Camera.so">
            <updateRate>15.0</updateRate>
            <topicName>image_ptz_left</topicName>
            <frameName>ptz_left</frameName>
            <interface:camera name="ptz_cam_left_iface" />
          </controller:ros_camera>
        </sensor:camera>
      </verbatim>
    </data>

  </sensor>

  <link name="ptz_pan_right"><!-- link specifying the shoulder of the robot -->
    <parent>torso</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> torso_ptz_pan_right_offset_x torso_ptz_pan_right_offset_y torso_ptz_pan_right_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->


    <joint type="revolute"> 
      <axis> 0 0 1 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit> ptz_pan_min_limit ptz_pan_max_limit </limit>
    </joint>

    <inertial>
      <mass> 0.1  </mass>
      <com> 0  0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia>0.00482611007  -0.000144683999  0.000110076136  0.005218991412  -0.000314239509  0.008618784925 </inertia>
    </inertial>

    <visual>
      <xyz>ptz_pan_right_center_box_center_offset_x   ptz_pan_right_center_box_center_offset_y   ptz_pan_right_center_box_center_offset_z</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>M_PI/2 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Blue</material>
      <scale>ptz_pan_size_x ptz_pan_size_y ptz_pan_size_z</scale>
      <geometry type="cylinder" name="pr2_ptz_pan_right_visual">
      </geometry>
    </visual> 

    <collision>
      <xyz>ptz_pan_right_center_box_center_offset_x   ptz_pan_right_center_box_center_offset_y   ptz_pan_right_center_box_center_offset_z</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="cylinder">
        <size>ptz_pan_radius ptz_pan_length</size>
      </geometry>
    </collision> 

  </link>

  <sensor name="ptz_tilt_right" type="camera"><!-- link specifying the shoulder of the robot -->
    <parent>ptz_pan_right</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> ptz_pan_ptz_tilt_right_offset_x ptz_pan_ptz_tilt_right_offset_y ptz_pan_ptz_tilt_right_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->


    <joint type="revolute"> 
      <axis> 0 0 1 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit> ptz_tilt_min_limit ptz_tilt_max_limit </limit>
    </joint>

    <inertial>
      <mass> 0.1  </mass>
      <com> 0  0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia>0.00482611007  -0.000144683999  0.000110076136  0.005218991412  -0.000314239509  0.008618784925 </inertia>
    </inertial>

    <visual>
      <xyz>0 0 0.0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0 M_PI/2 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Blue</material>
      <scale>ptz_tilt_size_x ptz_tilt_size_y ptz_tilt_size_z</scale>
      <geometry type="cylinder" name="pr2_ptz_tilt_right_visual">
      </geometry>
    </visual> 

    <collision>
      <xyz>0   0   0</xyz> <!-- location defined with respect to the link origin in a local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="cylinder">
        <size>ptz_tilt_radius ptz_tilt_length</size>
      </geometry>
    </collision> 

    <data name="sensor" type="gazebo">
      <verbatim key="sensor_camera">
        <sensor:camera name="ptz_cam_right_sensor">
          <imageSize>640 480</imageSize>
          <hfov>60</hfov>
          <nearClip>0.1</nearClip>
          <farClip>100</farClip>
          <updateRate>15.0</updateRate>
          <controller:ros_camera name="ptz_cam_right_controller" plugin="libRos_Camera.so">
            <updateRate>15.0</updateRate>
            <topicName>image_ptz_right</topicName>
            <frameName>ptz_right</frameName>
            <interface:camera name="ptz_cam_right_iface" />
          </controller:ros_camera>
        </sensor:camera>
      </verbatim>
    </data>

  </sensor>









  <!-- stereo camera -->
  <sensor name="stereo" type="camera"><!-- link specifying the shoulder of the robot -->
    <parent>head_tilt</parent>
    <rpy> 0 0 0 </rpy> <!-- rotation of a local coordinate frame attached to the link with respect to the parent's frame -->
    <xyz> head_tilt_stereo_offset_x 0 head_tilt_stereo_offset_z</xyz> <!-- position of a local coordinate frame attached to the link with respect to parent's frame-->


    <joint type="fixed"> 
      <axis> 0 0 1 </axis> <!-- direction of the joint in a local coordinate frame -->
      <anchor>0 0 0  </anchor> <!-- point on the joint relative to the parent's anchor in a global coordinate frame -->
      <limit> 0 0 </limit>
    </joint>

    <inertial>
      <mass> 0.1  </mass>
      <com> 0  0 0 </com> <!-- position of the center of mass with respect to the link's own anchor in a local coordinate frame -->
      <inertia>0.00482611007  -0.000144683999  0.000110076136  0.005218991412  -0.000314239509  0.008618784925 </inertia>
    </inertial>

    <visual>
      <xyz>stereo_center_box_center_offset_x 0 stereo_center_box_center_offset_z </xyz>
      <rpy>0 0 0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <material>Gazebo/Blue</material>
      <geometry type="box" name="pr2_stereo_visual">
        <size>stereo_size_x stereo_size_y stereo_size_z</size>
      </geometry>
    </visual> 

    <collision>
      <xyz>stereo_center_box_center_offset_x 0 stereo_center_box_center_offset_z </xyz>
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
      <geometry type="box">
        <size>stereo_size_x stereo_size_y stereo_size_z</size>
      </geometry>
    </collision> 

    <data name="sensor" type="gazebo">
      <verbatim key="sensor_camera">
        <sensor:stereocamera name="stereo_camera_sensor">
          <imageSize>640 480</imageSize>
          <hfov>60</hfov>
          <nearClip>0.1</nearClip>
          <farClip>100</farClip>
          <saveFrames>false</saveFrames>
          <saveFramePath>frames</saveFramePath>
          <baseline>0.2</baseline>
          <updateRate>15.0</updateRate>
          <controller:stereocamera name="stereo_camera_controller">
            <updateRate>15.0</updateRate>
            <interface:stereocamera name="stereo_iface_0" />
            <interface:camera name="camera_iface_0" />
            <interface:camera name="camera_iface_1" />
            <leftcamera>camera_iface_0</leftcamera>
            <rightcamera>camera_iface_1</rightcamera>
          </controller:stereocamera>
        </sensor:stereocamera>
      </verbatim>
    </data>

  </sensor>

<!-- End sensor definitions -->

<frame name="test">
  <parent>finger_l_left</parent>
      <xyz>0   0   0   </xyz> <!-- location defined with respect to the link origin in the sensor's local coordinate frame -->
      <rpy>0.0 0.0 0.0 </rpy> <!-- All angles always in radians, yaw about Z axis, pitch about the Y axis and roll about the X axis -->
</frame>


 
  <!-- Define groups of links; a link may be part of multiple groups -->
  
  <include>planning.xml</include>

  <group name="head">
    head_pan
    head_tilt    
  </group>

  <!-- Inclusion of this file causes the urdf2gazebo translator to produce
       a .world file that makes Gazebo crash - BPG -->
  <include>controllers.xml</include> 

  <!-- Include actuators definition -->
  <!--include>actuator_test.xml</include-->

</robot>
