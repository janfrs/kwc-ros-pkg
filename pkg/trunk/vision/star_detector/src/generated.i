// this file is generated by src/gen.py
// Optimized width (from optimized_width.h) is 1777
// [1, 2, 3]
#define OR(x,y)     ((__m128i)_mm_or_ps((__m128)(x), (__m128)(y)))
#define AND(x,y)    ((__m128i)_mm_and_ps((__m128)(x), (__m128)(y)))
#define ANDNOT(x,y) ((__m128i)_mm_andnot_ps((__m128)(x), (__m128)(y)))
#define K(v)        _mm_set_epi32((v),(v),(v),(v))
#define ABS(x)      AND(x, K(0x7fffffff))
#define PRED(m,a,b) OR(AND((m),(a)), ANDNOT((m),(b)))
void StarDetector::FilterResponsesGen3() {
int w1,w2,w3,w4,w6 ;
for (int y = 12; y < m_H - 12; ++y) { 
float *p_prj = &CV_IMAGE_ELEM(m_projected, float, y, 12);
uchar *p_scl = &CV_IMAGE_ELEM(m_scales, uchar, y, 12);
int *m_upright_p = &CV_IMAGE_ELEM(m_upright, int, y, 12);
int *m_tilted_p = &CV_IMAGE_ELEM(m_tilted, int, y, 12);
int *m_flat_p = &CV_IMAGE_ELEM(m_flat, int, y, 12);
for (int x = 12; x < m_W - 12; x += 1) {
  w1 = ((CV_IMAGE_ELEM(m_upright, int, y + 2, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + -1, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + 2, x + -1)+CV_IMAGE_ELEM(m_upright, int, y + -1, x + -1)) + (CV_IMAGE_ELEM(m_tilted, int, y + 2, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 2)+CV_IMAGE_ELEM(m_tilted, int, y + -1, x + 1)));
  w2 = ((CV_IMAGE_ELEM(m_upright, int, y + 3, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + -2, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + 3, x + -2)+CV_IMAGE_ELEM(m_upright, int, y + -2, x + -2)) + (CV_IMAGE_ELEM(m_tilted, int, y + 4, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -3)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 4)+CV_IMAGE_ELEM(m_tilted, int, y + -3, x + 1)));
  w3 = ((CV_IMAGE_ELEM(m_upright, int, y + 4, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + -3, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + 4, x + -3)+CV_IMAGE_ELEM(m_upright, int, y + -3, x + -3)) + (CV_IMAGE_ELEM(m_tilted, int, y + 5, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -4)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 5)+CV_IMAGE_ELEM(m_tilted, int, y + -4, x + 1)));
  w4 = ((CV_IMAGE_ELEM(m_upright, int, y + 5, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + -4, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + 5, x + -4)+CV_IMAGE_ELEM(m_upright, int, y + -4, x + -4)) + (CV_IMAGE_ELEM(m_tilted, int, y + 7, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -6)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 7)+CV_IMAGE_ELEM(m_tilted, int, y + -6, x + 1)));
  w6 = ((CV_IMAGE_ELEM(m_upright, int, y + 7, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + -6, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + 7, x + -6)+CV_IMAGE_ELEM(m_upright, int, y + -6, x + -6)) + (CV_IMAGE_ELEM(m_tilted, int, y + 10, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -9)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 10)+CV_IMAGE_ELEM(m_tilted, int, y + -9, x + 1)));
float r1, r2, r3 ;
// 14 36
  r1 = w1*7.142857e-02 - (w2 - w1)*2.777778e-02;
// 50 116
  r2 = w2*2.000000e-02 - (w4 - w2)*8.620690e-03;
// 90 260
  r3 = w3*1.111111e-02 - (w6 - w3)*3.846154e-03;
int mx_s = 0;
float mx = r1, mx_abs = std::abs(r1);
if (std::abs(r2) > mx_abs) { mx = r2; mx_s = 1; mx_abs = std::abs(r2); }
if (std::abs(r3) > mx_abs) { mx = r3; mx_s = 2; mx_abs = std::abs(r3); }
*p_prj = mx;
*p_scl = mx_s + 1;
p_prj += 1;
p_scl += 1;
m_upright_p += 1;
m_tilted_p += 1;
m_flat_p += 1;
}}
}
// [1, 2, 3, 4]
#define OR(x,y)     ((__m128i)_mm_or_ps((__m128)(x), (__m128)(y)))
#define AND(x,y)    ((__m128i)_mm_and_ps((__m128)(x), (__m128)(y)))
#define ANDNOT(x,y) ((__m128i)_mm_andnot_ps((__m128)(x), (__m128)(y)))
#define K(v)        _mm_set_epi32((v),(v),(v),(v))
#define ABS(x)      AND(x, K(0x7fffffff))
#define PRED(m,a,b) OR(AND((m),(a)), ANDNOT((m),(b)))
void StarDetector::FilterResponsesGen4() {
int w1,w2,w3,w4,w6,w8 ;
for (int y = 12; y < m_H - 12; ++y) { 
float *p_prj = &CV_IMAGE_ELEM(m_projected, float, y, 12);
uchar *p_scl = &CV_IMAGE_ELEM(m_scales, uchar, y, 12);
int *m_upright_p = &CV_IMAGE_ELEM(m_upright, int, y, 12);
int *m_tilted_p = &CV_IMAGE_ELEM(m_tilted, int, y, 12);
int *m_flat_p = &CV_IMAGE_ELEM(m_flat, int, y, 12);
for (int x = 12; x < m_W - 12; x += 1) {
  w1 = ((CV_IMAGE_ELEM(m_upright, int, y + 2, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + -1, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + 2, x + -1)+CV_IMAGE_ELEM(m_upright, int, y + -1, x + -1)) + (CV_IMAGE_ELEM(m_tilted, int, y + 2, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 2)+CV_IMAGE_ELEM(m_tilted, int, y + -1, x + 1)));
  w2 = ((CV_IMAGE_ELEM(m_upright, int, y + 3, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + -2, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + 3, x + -2)+CV_IMAGE_ELEM(m_upright, int, y + -2, x + -2)) + (CV_IMAGE_ELEM(m_tilted, int, y + 4, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -3)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 4)+CV_IMAGE_ELEM(m_tilted, int, y + -3, x + 1)));
  w3 = ((CV_IMAGE_ELEM(m_upright, int, y + 4, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + -3, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + 4, x + -3)+CV_IMAGE_ELEM(m_upright, int, y + -3, x + -3)) + (CV_IMAGE_ELEM(m_tilted, int, y + 5, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -4)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 5)+CV_IMAGE_ELEM(m_tilted, int, y + -4, x + 1)));
  w4 = ((CV_IMAGE_ELEM(m_upright, int, y + 5, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + -4, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + 5, x + -4)+CV_IMAGE_ELEM(m_upright, int, y + -4, x + -4)) + (CV_IMAGE_ELEM(m_tilted, int, y + 7, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -6)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 7)+CV_IMAGE_ELEM(m_tilted, int, y + -6, x + 1)));
  w6 = ((CV_IMAGE_ELEM(m_upright, int, y + 7, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + -6, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + 7, x + -6)+CV_IMAGE_ELEM(m_upright, int, y + -6, x + -6)) + (CV_IMAGE_ELEM(m_tilted, int, y + 10, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -9)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 10)+CV_IMAGE_ELEM(m_tilted, int, y + -9, x + 1)));
  w8 = ((CV_IMAGE_ELEM(m_upright, int, y + 9, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + -8, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + 9, x + -8)+CV_IMAGE_ELEM(m_upright, int, y + -8, x + -8)) + (CV_IMAGE_ELEM(m_tilted, int, y + 13, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -12)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 13)+CV_IMAGE_ELEM(m_tilted, int, y + -12, x + 1)));
float r1, r2, r3, r4 ;
// 14 36
  r1 = w1*7.142857e-02 - (w2 - w1)*2.777778e-02;
// 50 116
  r2 = w2*2.000000e-02 - (w4 - w2)*8.620690e-03;
// 90 260
  r3 = w3*1.111111e-02 - (w6 - w3)*3.846154e-03;
// 166 436
  r4 = w4*6.024096e-03 - (w8 - w4)*2.293578e-03;
int mx_s = 0;
float mx = r1, mx_abs = std::abs(r1);
if (std::abs(r2) > mx_abs) { mx = r2; mx_s = 1; mx_abs = std::abs(r2); }
if (std::abs(r3) > mx_abs) { mx = r3; mx_s = 2; mx_abs = std::abs(r3); }
if (std::abs(r4) > mx_abs) { mx = r4; mx_s = 3; mx_abs = std::abs(r4); }
*p_prj = mx;
*p_scl = mx_s + 1;
p_prj += 1;
p_scl += 1;
m_upright_p += 1;
m_tilted_p += 1;
m_flat_p += 1;
}}
}
// [1, 2, 3, 4, 6]
#define OR(x,y)     ((__m128i)_mm_or_ps((__m128)(x), (__m128)(y)))
#define AND(x,y)    ((__m128i)_mm_and_ps((__m128)(x), (__m128)(y)))
#define ANDNOT(x,y) ((__m128i)_mm_andnot_ps((__m128)(x), (__m128)(y)))
#define K(v)        _mm_set_epi32((v),(v),(v),(v))
#define ABS(x)      AND(x, K(0x7fffffff))
#define PRED(m,a,b) OR(AND((m),(a)), ANDNOT((m),(b)))
void StarDetector::FilterResponsesGen5() {
int w1,w2,w3,w4,w6,w8,w12 ;
for (int y = 20; y < m_H - 20; ++y) { 
float *p_prj = &CV_IMAGE_ELEM(m_projected, float, y, 20);
uchar *p_scl = &CV_IMAGE_ELEM(m_scales, uchar, y, 20);
int *m_upright_p = &CV_IMAGE_ELEM(m_upright, int, y, 20);
int *m_tilted_p = &CV_IMAGE_ELEM(m_tilted, int, y, 20);
int *m_flat_p = &CV_IMAGE_ELEM(m_flat, int, y, 20);
for (int x = 20; x < m_W - 20; x += 1) {
  w1 = ((CV_IMAGE_ELEM(m_upright, int, y + 2, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + -1, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + 2, x + -1)+CV_IMAGE_ELEM(m_upright, int, y + -1, x + -1)) + (CV_IMAGE_ELEM(m_tilted, int, y + 2, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 2)+CV_IMAGE_ELEM(m_tilted, int, y + -1, x + 1)));
  w2 = ((CV_IMAGE_ELEM(m_upright, int, y + 3, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + -2, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + 3, x + -2)+CV_IMAGE_ELEM(m_upright, int, y + -2, x + -2)) + (CV_IMAGE_ELEM(m_tilted, int, y + 4, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -3)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 4)+CV_IMAGE_ELEM(m_tilted, int, y + -3, x + 1)));
  w3 = ((CV_IMAGE_ELEM(m_upright, int, y + 4, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + -3, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + 4, x + -3)+CV_IMAGE_ELEM(m_upright, int, y + -3, x + -3)) + (CV_IMAGE_ELEM(m_tilted, int, y + 5, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -4)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 5)+CV_IMAGE_ELEM(m_tilted, int, y + -4, x + 1)));
  w4 = ((CV_IMAGE_ELEM(m_upright, int, y + 5, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + -4, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + 5, x + -4)+CV_IMAGE_ELEM(m_upright, int, y + -4, x + -4)) + (CV_IMAGE_ELEM(m_tilted, int, y + 7, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -6)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 7)+CV_IMAGE_ELEM(m_tilted, int, y + -6, x + 1)));
  w6 = ((CV_IMAGE_ELEM(m_upright, int, y + 7, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + -6, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + 7, x + -6)+CV_IMAGE_ELEM(m_upright, int, y + -6, x + -6)) + (CV_IMAGE_ELEM(m_tilted, int, y + 10, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -9)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 10)+CV_IMAGE_ELEM(m_tilted, int, y + -9, x + 1)));
  w8 = ((CV_IMAGE_ELEM(m_upright, int, y + 9, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + -8, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + 9, x + -8)+CV_IMAGE_ELEM(m_upright, int, y + -8, x + -8)) + (CV_IMAGE_ELEM(m_tilted, int, y + 13, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -12)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 13)+CV_IMAGE_ELEM(m_tilted, int, y + -12, x + 1)));
  w12 = ((CV_IMAGE_ELEM(m_upright, int, y + 13, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + -12, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + 13, x + -12)+CV_IMAGE_ELEM(m_upright, int, y + -12, x + -12)) + (CV_IMAGE_ELEM(m_tilted, int, y + 19, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -18)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 19)+CV_IMAGE_ELEM(m_tilted, int, y + -18, x + 1)));
float r1, r2, r3, r4, r6 ;
// 14 36
  r1 = w1*7.142857e-02 - (w2 - w1)*2.777778e-02;
// 50 116
  r2 = w2*2.000000e-02 - (w4 - w2)*8.620690e-03;
// 90 260
  r3 = w3*1.111111e-02 - (w6 - w3)*3.846154e-03;
// 166 436
  r4 = w4*6.024096e-03 - (w8 - w4)*2.293578e-03;
// 350 960
  r6 = w6*2.857143e-03 - (w12 - w6)*1.041667e-03;
int mx_s = 0;
float mx = r1, mx_abs = std::abs(r1);
if (std::abs(r2) > mx_abs) { mx = r2; mx_s = 1; mx_abs = std::abs(r2); }
if (std::abs(r3) > mx_abs) { mx = r3; mx_s = 2; mx_abs = std::abs(r3); }
if (std::abs(r4) > mx_abs) { mx = r4; mx_s = 3; mx_abs = std::abs(r4); }
if (std::abs(r6) > mx_abs) { mx = r6; mx_s = 4; mx_abs = std::abs(r6); }
*p_prj = mx;
*p_scl = mx_s + 1;
p_prj += 1;
p_scl += 1;
m_upright_p += 1;
m_tilted_p += 1;
m_flat_p += 1;
}}
}
// [1, 2, 3, 4, 6, 8]
#define OR(x,y)     ((__m128i)_mm_or_ps((__m128)(x), (__m128)(y)))
#define AND(x,y)    ((__m128i)_mm_and_ps((__m128)(x), (__m128)(y)))
#define ANDNOT(x,y) ((__m128i)_mm_andnot_ps((__m128)(x), (__m128)(y)))
#define K(v)        _mm_set_epi32((v),(v),(v),(v))
#define ABS(x)      AND(x, K(0x7fffffff))
#define PRED(m,a,b) OR(AND((m),(a)), ANDNOT((m),(b)))
void StarDetector::FilterResponsesGen6() {
int w1,w2,w3,w4,w6,w8,w12,w16 ;
for (int y = 24; y < m_H - 24; ++y) { 
float *p_prj = &CV_IMAGE_ELEM(m_projected, float, y, 24);
uchar *p_scl = &CV_IMAGE_ELEM(m_scales, uchar, y, 24);
int *m_upright_p = &CV_IMAGE_ELEM(m_upright, int, y, 24);
int *m_tilted_p = &CV_IMAGE_ELEM(m_tilted, int, y, 24);
int *m_flat_p = &CV_IMAGE_ELEM(m_flat, int, y, 24);
for (int x = 24; x < m_W - 24; x += 1) {
  w1 = ((CV_IMAGE_ELEM(m_upright, int, y + 2, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + -1, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + 2, x + -1)+CV_IMAGE_ELEM(m_upright, int, y + -1, x + -1)) + (CV_IMAGE_ELEM(m_tilted, int, y + 2, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 2)+CV_IMAGE_ELEM(m_tilted, int, y + -1, x + 1)));
  w2 = ((CV_IMAGE_ELEM(m_upright, int, y + 3, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + -2, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + 3, x + -2)+CV_IMAGE_ELEM(m_upright, int, y + -2, x + -2)) + (CV_IMAGE_ELEM(m_tilted, int, y + 4, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -3)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 4)+CV_IMAGE_ELEM(m_tilted, int, y + -3, x + 1)));
  w3 = ((CV_IMAGE_ELEM(m_upright, int, y + 4, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + -3, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + 4, x + -3)+CV_IMAGE_ELEM(m_upright, int, y + -3, x + -3)) + (CV_IMAGE_ELEM(m_tilted, int, y + 5, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -4)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 5)+CV_IMAGE_ELEM(m_tilted, int, y + -4, x + 1)));
  w4 = ((CV_IMAGE_ELEM(m_upright, int, y + 5, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + -4, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + 5, x + -4)+CV_IMAGE_ELEM(m_upright, int, y + -4, x + -4)) + (CV_IMAGE_ELEM(m_tilted, int, y + 7, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -6)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 7)+CV_IMAGE_ELEM(m_tilted, int, y + -6, x + 1)));
  w6 = ((CV_IMAGE_ELEM(m_upright, int, y + 7, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + -6, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + 7, x + -6)+CV_IMAGE_ELEM(m_upright, int, y + -6, x + -6)) + (CV_IMAGE_ELEM(m_tilted, int, y + 10, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -9)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 10)+CV_IMAGE_ELEM(m_tilted, int, y + -9, x + 1)));
  w8 = ((CV_IMAGE_ELEM(m_upright, int, y + 9, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + -8, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + 9, x + -8)+CV_IMAGE_ELEM(m_upright, int, y + -8, x + -8)) + (CV_IMAGE_ELEM(m_tilted, int, y + 13, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -12)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 13)+CV_IMAGE_ELEM(m_tilted, int, y + -12, x + 1)));
  w12 = ((CV_IMAGE_ELEM(m_upright, int, y + 13, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + -12, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + 13, x + -12)+CV_IMAGE_ELEM(m_upright, int, y + -12, x + -12)) + (CV_IMAGE_ELEM(m_tilted, int, y + 19, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -18)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 19)+CV_IMAGE_ELEM(m_tilted, int, y + -18, x + 1)));
  w16 = ((CV_IMAGE_ELEM(m_upright, int, y + 17, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + -16, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + 17, x + -16)+CV_IMAGE_ELEM(m_upright, int, y + -16, x + -16)) + (CV_IMAGE_ELEM(m_tilted, int, y + 25, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -24)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 25)+CV_IMAGE_ELEM(m_tilted, int, y + -24, x + 1)));
float r1, r2, r3, r4, r6, r8 ;
// 14 36
  r1 = w1*7.142857e-02 - (w2 - w1)*2.777778e-02;
// 50 116
  r2 = w2*2.000000e-02 - (w4 - w2)*8.620690e-03;
// 90 260
  r3 = w3*1.111111e-02 - (w6 - w3)*3.846154e-03;
// 166 436
  r4 = w4*6.024096e-03 - (w8 - w4)*2.293578e-03;
// 350 960
  r6 = w6*2.857143e-03 - (w12 - w6)*1.041667e-03;
// 602 1688
  r8 = w8*1.661130e-03 - (w16 - w8)*5.924171e-04;
int mx_s = 0;
float mx = r1, mx_abs = std::abs(r1);
if (std::abs(r2) > mx_abs) { mx = r2; mx_s = 1; mx_abs = std::abs(r2); }
if (std::abs(r3) > mx_abs) { mx = r3; mx_s = 2; mx_abs = std::abs(r3); }
if (std::abs(r4) > mx_abs) { mx = r4; mx_s = 3; mx_abs = std::abs(r4); }
if (std::abs(r6) > mx_abs) { mx = r6; mx_s = 4; mx_abs = std::abs(r6); }
if (std::abs(r8) > mx_abs) { mx = r8; mx_s = 5; mx_abs = std::abs(r8); }
*p_prj = mx;
*p_scl = mx_s + 1;
p_prj += 1;
p_scl += 1;
m_upright_p += 1;
m_tilted_p += 1;
m_flat_p += 1;
}}
}
// [1, 2, 3, 4, 6, 8, 11]
#define OR(x,y)     ((__m128i)_mm_or_ps((__m128)(x), (__m128)(y)))
#define AND(x,y)    ((__m128i)_mm_and_ps((__m128)(x), (__m128)(y)))
#define ANDNOT(x,y) ((__m128i)_mm_andnot_ps((__m128)(x), (__m128)(y)))
#define K(v)        _mm_set_epi32((v),(v),(v),(v))
#define ABS(x)      AND(x, K(0x7fffffff))
#define PRED(m,a,b) OR(AND((m),(a)), ANDNOT((m),(b)))
void StarDetector::FilterResponsesGen7() {
int w1,w2,w3,w4,w6,w8,w11,w12,w16,w22 ;
for (int y = 36; y < m_H - 36; ++y) { 
float *p_prj = &CV_IMAGE_ELEM(m_projected, float, y, 36);
uchar *p_scl = &CV_IMAGE_ELEM(m_scales, uchar, y, 36);
int *m_upright_p = &CV_IMAGE_ELEM(m_upright, int, y, 36);
int *m_tilted_p = &CV_IMAGE_ELEM(m_tilted, int, y, 36);
int *m_flat_p = &CV_IMAGE_ELEM(m_flat, int, y, 36);
for (int x = 36; x < m_W - 36; x += 1) {
  w1 = ((CV_IMAGE_ELEM(m_upright, int, y + 2, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + -1, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + 2, x + -1)+CV_IMAGE_ELEM(m_upright, int, y + -1, x + -1)) + (CV_IMAGE_ELEM(m_tilted, int, y + 2, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 2)+CV_IMAGE_ELEM(m_tilted, int, y + -1, x + 1)));
  w2 = ((CV_IMAGE_ELEM(m_upright, int, y + 3, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + -2, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + 3, x + -2)+CV_IMAGE_ELEM(m_upright, int, y + -2, x + -2)) + (CV_IMAGE_ELEM(m_tilted, int, y + 4, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -3)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 4)+CV_IMAGE_ELEM(m_tilted, int, y + -3, x + 1)));
  w3 = ((CV_IMAGE_ELEM(m_upright, int, y + 4, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + -3, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + 4, x + -3)+CV_IMAGE_ELEM(m_upright, int, y + -3, x + -3)) + (CV_IMAGE_ELEM(m_tilted, int, y + 5, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -4)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 5)+CV_IMAGE_ELEM(m_tilted, int, y + -4, x + 1)));
  w4 = ((CV_IMAGE_ELEM(m_upright, int, y + 5, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + -4, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + 5, x + -4)+CV_IMAGE_ELEM(m_upright, int, y + -4, x + -4)) + (CV_IMAGE_ELEM(m_tilted, int, y + 7, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -6)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 7)+CV_IMAGE_ELEM(m_tilted, int, y + -6, x + 1)));
  w6 = ((CV_IMAGE_ELEM(m_upright, int, y + 7, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + -6, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + 7, x + -6)+CV_IMAGE_ELEM(m_upright, int, y + -6, x + -6)) + (CV_IMAGE_ELEM(m_tilted, int, y + 10, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -9)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 10)+CV_IMAGE_ELEM(m_tilted, int, y + -9, x + 1)));
  w8 = ((CV_IMAGE_ELEM(m_upright, int, y + 9, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + -8, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + 9, x + -8)+CV_IMAGE_ELEM(m_upright, int, y + -8, x + -8)) + (CV_IMAGE_ELEM(m_tilted, int, y + 13, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -12)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 13)+CV_IMAGE_ELEM(m_tilted, int, y + -12, x + 1)));
  w11 = ((CV_IMAGE_ELEM(m_upright, int, y + 12, x + 12)-CV_IMAGE_ELEM(m_upright, int, y + -11, x + 12)-CV_IMAGE_ELEM(m_upright, int, y + 12, x + -11)+CV_IMAGE_ELEM(m_upright, int, y + -11, x + -11)) + (CV_IMAGE_ELEM(m_tilted, int, y + 17, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -16)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 17)+CV_IMAGE_ELEM(m_tilted, int, y + -16, x + 1)));
  w12 = ((CV_IMAGE_ELEM(m_upright, int, y + 13, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + -12, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + 13, x + -12)+CV_IMAGE_ELEM(m_upright, int, y + -12, x + -12)) + (CV_IMAGE_ELEM(m_tilted, int, y + 19, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -18)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 19)+CV_IMAGE_ELEM(m_tilted, int, y + -18, x + 1)));
  w16 = ((CV_IMAGE_ELEM(m_upright, int, y + 17, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + -16, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + 17, x + -16)+CV_IMAGE_ELEM(m_upright, int, y + -16, x + -16)) + (CV_IMAGE_ELEM(m_tilted, int, y + 25, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -24)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 25)+CV_IMAGE_ELEM(m_tilted, int, y + -24, x + 1)));
  w22 = ((CV_IMAGE_ELEM(m_upright, int, y + 23, x + 23)-CV_IMAGE_ELEM(m_upright, int, y + -22, x + 23)-CV_IMAGE_ELEM(m_upright, int, y + 23, x + -22)+CV_IMAGE_ELEM(m_upright, int, y + -22, x + -22)) + (CV_IMAGE_ELEM(m_tilted, int, y + 34, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -33)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 34)+CV_IMAGE_ELEM(m_tilted, int, y + -33, x + 1)));
float r1, r2, r3, r4, r6, r8, r11 ;
// 14 36
  r1 = w1*7.142857e-02 - (w2 - w1)*2.777778e-02;
// 50 116
  r2 = w2*2.000000e-02 - (w4 - w2)*8.620690e-03;
// 90 260
  r3 = w3*1.111111e-02 - (w6 - w3)*3.846154e-03;
// 166 436
  r4 = w4*6.024096e-03 - (w8 - w4)*2.293578e-03;
// 350 960
  r6 = w6*2.857143e-03 - (w12 - w6)*1.041667e-03;
// 602 1688
  r8 = w8*1.661130e-03 - (w16 - w8)*5.924171e-04;
// 1074 3196
  r11 = w11*9.310987e-04 - (w22 - w11)*3.128911e-04;
int mx_s = 0;
float mx = r1, mx_abs = std::abs(r1);
if (std::abs(r2) > mx_abs) { mx = r2; mx_s = 1; mx_abs = std::abs(r2); }
if (std::abs(r3) > mx_abs) { mx = r3; mx_s = 2; mx_abs = std::abs(r3); }
if (std::abs(r4) > mx_abs) { mx = r4; mx_s = 3; mx_abs = std::abs(r4); }
if (std::abs(r6) > mx_abs) { mx = r6; mx_s = 4; mx_abs = std::abs(r6); }
if (std::abs(r8) > mx_abs) { mx = r8; mx_s = 5; mx_abs = std::abs(r8); }
if (std::abs(r11) > mx_abs) { mx = r11; mx_s = 6; mx_abs = std::abs(r11); }
*p_prj = mx;
*p_scl = mx_s + 1;
p_prj += 1;
p_scl += 1;
m_upright_p += 1;
m_tilted_p += 1;
m_flat_p += 1;
}}
}
// [1, 2, 3, 4, 6, 8, 11, 16]
#define OR(x,y)     ((__m128i)_mm_or_ps((__m128)(x), (__m128)(y)))
#define AND(x,y)    ((__m128i)_mm_and_ps((__m128)(x), (__m128)(y)))
#define ANDNOT(x,y) ((__m128i)_mm_andnot_ps((__m128)(x), (__m128)(y)))
#define K(v)        _mm_set_epi32((v),(v),(v),(v))
#define ABS(x)      AND(x, K(0x7fffffff))
#define PRED(m,a,b) OR(AND((m),(a)), ANDNOT((m),(b)))
void StarDetector::FilterResponsesGen8() {
int w1,w2,w3,w4,w6,w8,w11,w12,w16,w22,w32 ;
for (int y = 48; y < m_H - 48; ++y) { 
float *p_prj = &CV_IMAGE_ELEM(m_projected, float, y, 48);
uchar *p_scl = &CV_IMAGE_ELEM(m_scales, uchar, y, 48);
int *m_upright_p = &CV_IMAGE_ELEM(m_upright, int, y, 48);
int *m_tilted_p = &CV_IMAGE_ELEM(m_tilted, int, y, 48);
int *m_flat_p = &CV_IMAGE_ELEM(m_flat, int, y, 48);
for (int x = 48; x < m_W - 48; x += 1) {
  w1 = ((CV_IMAGE_ELEM(m_upright, int, y + 2, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + -1, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + 2, x + -1)+CV_IMAGE_ELEM(m_upright, int, y + -1, x + -1)) + (CV_IMAGE_ELEM(m_tilted, int, y + 2, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 2)+CV_IMAGE_ELEM(m_tilted, int, y + -1, x + 1)));
  w2 = ((CV_IMAGE_ELEM(m_upright, int, y + 3, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + -2, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + 3, x + -2)+CV_IMAGE_ELEM(m_upright, int, y + -2, x + -2)) + (CV_IMAGE_ELEM(m_tilted, int, y + 4, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -3)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 4)+CV_IMAGE_ELEM(m_tilted, int, y + -3, x + 1)));
  w3 = ((CV_IMAGE_ELEM(m_upright, int, y + 4, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + -3, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + 4, x + -3)+CV_IMAGE_ELEM(m_upright, int, y + -3, x + -3)) + (CV_IMAGE_ELEM(m_tilted, int, y + 5, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -4)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 5)+CV_IMAGE_ELEM(m_tilted, int, y + -4, x + 1)));
  w4 = ((CV_IMAGE_ELEM(m_upright, int, y + 5, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + -4, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + 5, x + -4)+CV_IMAGE_ELEM(m_upright, int, y + -4, x + -4)) + (CV_IMAGE_ELEM(m_tilted, int, y + 7, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -6)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 7)+CV_IMAGE_ELEM(m_tilted, int, y + -6, x + 1)));
  w6 = ((CV_IMAGE_ELEM(m_upright, int, y + 7, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + -6, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + 7, x + -6)+CV_IMAGE_ELEM(m_upright, int, y + -6, x + -6)) + (CV_IMAGE_ELEM(m_tilted, int, y + 10, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -9)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 10)+CV_IMAGE_ELEM(m_tilted, int, y + -9, x + 1)));
  w8 = ((CV_IMAGE_ELEM(m_upright, int, y + 9, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + -8, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + 9, x + -8)+CV_IMAGE_ELEM(m_upright, int, y + -8, x + -8)) + (CV_IMAGE_ELEM(m_tilted, int, y + 13, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -12)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 13)+CV_IMAGE_ELEM(m_tilted, int, y + -12, x + 1)));
  w11 = ((CV_IMAGE_ELEM(m_upright, int, y + 12, x + 12)-CV_IMAGE_ELEM(m_upright, int, y + -11, x + 12)-CV_IMAGE_ELEM(m_upright, int, y + 12, x + -11)+CV_IMAGE_ELEM(m_upright, int, y + -11, x + -11)) + (CV_IMAGE_ELEM(m_tilted, int, y + 17, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -16)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 17)+CV_IMAGE_ELEM(m_tilted, int, y + -16, x + 1)));
  w12 = ((CV_IMAGE_ELEM(m_upright, int, y + 13, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + -12, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + 13, x + -12)+CV_IMAGE_ELEM(m_upright, int, y + -12, x + -12)) + (CV_IMAGE_ELEM(m_tilted, int, y + 19, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -18)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 19)+CV_IMAGE_ELEM(m_tilted, int, y + -18, x + 1)));
  w16 = ((CV_IMAGE_ELEM(m_upright, int, y + 17, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + -16, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + 17, x + -16)+CV_IMAGE_ELEM(m_upright, int, y + -16, x + -16)) + (CV_IMAGE_ELEM(m_tilted, int, y + 25, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -24)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 25)+CV_IMAGE_ELEM(m_tilted, int, y + -24, x + 1)));
  w22 = ((CV_IMAGE_ELEM(m_upright, int, y + 23, x + 23)-CV_IMAGE_ELEM(m_upright, int, y + -22, x + 23)-CV_IMAGE_ELEM(m_upright, int, y + 23, x + -22)+CV_IMAGE_ELEM(m_upright, int, y + -22, x + -22)) + (CV_IMAGE_ELEM(m_tilted, int, y + 34, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -33)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 34)+CV_IMAGE_ELEM(m_tilted, int, y + -33, x + 1)));
  w32 = ((CV_IMAGE_ELEM(m_upright, int, y + 33, x + 33)-CV_IMAGE_ELEM(m_upright, int, y + -32, x + 33)-CV_IMAGE_ELEM(m_upright, int, y + 33, x + -32)+CV_IMAGE_ELEM(m_upright, int, y + -32, x + -32)) + (CV_IMAGE_ELEM(m_tilted, int, y + 49, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -48)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 49)+CV_IMAGE_ELEM(m_tilted, int, y + -48, x + 1)));
float r1, r2, r3, r4, r6, r8, r11, r16 ;
// 14 36
  r1 = w1*7.142857e-02 - (w2 - w1)*2.777778e-02;
// 50 116
  r2 = w2*2.000000e-02 - (w4 - w2)*8.620690e-03;
// 90 260
  r3 = w3*1.111111e-02 - (w6 - w3)*3.846154e-03;
// 166 436
  r4 = w4*6.024096e-03 - (w8 - w4)*2.293578e-03;
// 350 960
  r6 = w6*2.857143e-03 - (w12 - w6)*1.041667e-03;
// 602 1688
  r8 = w8*1.661130e-03 - (w16 - w8)*5.924171e-04;
// 1074 3196
  r11 = w11*9.310987e-04 - (w22 - w11)*3.128911e-04;
// 2290 6640
  r16 = w16*4.366812e-04 - (w32 - w16)*1.506024e-04;
int mx_s = 0;
float mx = r1, mx_abs = std::abs(r1);
if (std::abs(r2) > mx_abs) { mx = r2; mx_s = 1; mx_abs = std::abs(r2); }
if (std::abs(r3) > mx_abs) { mx = r3; mx_s = 2; mx_abs = std::abs(r3); }
if (std::abs(r4) > mx_abs) { mx = r4; mx_s = 3; mx_abs = std::abs(r4); }
if (std::abs(r6) > mx_abs) { mx = r6; mx_s = 4; mx_abs = std::abs(r6); }
if (std::abs(r8) > mx_abs) { mx = r8; mx_s = 5; mx_abs = std::abs(r8); }
if (std::abs(r11) > mx_abs) { mx = r11; mx_s = 6; mx_abs = std::abs(r11); }
if (std::abs(r16) > mx_abs) { mx = r16; mx_s = 7; mx_abs = std::abs(r16); }
*p_prj = mx;
*p_scl = mx_s + 1;
p_prj += 1;
p_scl += 1;
m_upright_p += 1;
m_tilted_p += 1;
m_flat_p += 1;
}}
}
// [1, 2, 3, 4, 6, 8, 11, 16, 23]
#define OR(x,y)     ((__m128i)_mm_or_ps((__m128)(x), (__m128)(y)))
#define AND(x,y)    ((__m128i)_mm_and_ps((__m128)(x), (__m128)(y)))
#define ANDNOT(x,y) ((__m128i)_mm_andnot_ps((__m128)(x), (__m128)(y)))
#define K(v)        _mm_set_epi32((v),(v),(v),(v))
#define ABS(x)      AND(x, K(0x7fffffff))
#define PRED(m,a,b) OR(AND((m),(a)), ANDNOT((m),(b)))
void StarDetector::FilterResponsesGen9() {
int w1,w2,w3,w4,w6,w8,w11,w12,w16,w22,w23,w32,w46 ;
for (int y = 72; y < m_H - 72; ++y) { 
float *p_prj = &CV_IMAGE_ELEM(m_projected, float, y, 72);
uchar *p_scl = &CV_IMAGE_ELEM(m_scales, uchar, y, 72);
int *m_upright_p = &CV_IMAGE_ELEM(m_upright, int, y, 72);
int *m_tilted_p = &CV_IMAGE_ELEM(m_tilted, int, y, 72);
int *m_flat_p = &CV_IMAGE_ELEM(m_flat, int, y, 72);
for (int x = 72; x < m_W - 72; x += 1) {
  w1 = ((CV_IMAGE_ELEM(m_upright, int, y + 2, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + -1, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + 2, x + -1)+CV_IMAGE_ELEM(m_upright, int, y + -1, x + -1)) + (CV_IMAGE_ELEM(m_tilted, int, y + 2, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 2)+CV_IMAGE_ELEM(m_tilted, int, y + -1, x + 1)));
  w2 = ((CV_IMAGE_ELEM(m_upright, int, y + 3, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + -2, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + 3, x + -2)+CV_IMAGE_ELEM(m_upright, int, y + -2, x + -2)) + (CV_IMAGE_ELEM(m_tilted, int, y + 4, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -3)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 4)+CV_IMAGE_ELEM(m_tilted, int, y + -3, x + 1)));
  w3 = ((CV_IMAGE_ELEM(m_upright, int, y + 4, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + -3, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + 4, x + -3)+CV_IMAGE_ELEM(m_upright, int, y + -3, x + -3)) + (CV_IMAGE_ELEM(m_tilted, int, y + 5, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -4)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 5)+CV_IMAGE_ELEM(m_tilted, int, y + -4, x + 1)));
  w4 = ((CV_IMAGE_ELEM(m_upright, int, y + 5, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + -4, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + 5, x + -4)+CV_IMAGE_ELEM(m_upright, int, y + -4, x + -4)) + (CV_IMAGE_ELEM(m_tilted, int, y + 7, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -6)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 7)+CV_IMAGE_ELEM(m_tilted, int, y + -6, x + 1)));
  w6 = ((CV_IMAGE_ELEM(m_upright, int, y + 7, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + -6, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + 7, x + -6)+CV_IMAGE_ELEM(m_upright, int, y + -6, x + -6)) + (CV_IMAGE_ELEM(m_tilted, int, y + 10, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -9)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 10)+CV_IMAGE_ELEM(m_tilted, int, y + -9, x + 1)));
  w8 = ((CV_IMAGE_ELEM(m_upright, int, y + 9, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + -8, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + 9, x + -8)+CV_IMAGE_ELEM(m_upright, int, y + -8, x + -8)) + (CV_IMAGE_ELEM(m_tilted, int, y + 13, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -12)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 13)+CV_IMAGE_ELEM(m_tilted, int, y + -12, x + 1)));
  w11 = ((CV_IMAGE_ELEM(m_upright, int, y + 12, x + 12)-CV_IMAGE_ELEM(m_upright, int, y + -11, x + 12)-CV_IMAGE_ELEM(m_upright, int, y + 12, x + -11)+CV_IMAGE_ELEM(m_upright, int, y + -11, x + -11)) + (CV_IMAGE_ELEM(m_tilted, int, y + 17, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -16)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 17)+CV_IMAGE_ELEM(m_tilted, int, y + -16, x + 1)));
  w12 = ((CV_IMAGE_ELEM(m_upright, int, y + 13, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + -12, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + 13, x + -12)+CV_IMAGE_ELEM(m_upright, int, y + -12, x + -12)) + (CV_IMAGE_ELEM(m_tilted, int, y + 19, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -18)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 19)+CV_IMAGE_ELEM(m_tilted, int, y + -18, x + 1)));
  w16 = ((CV_IMAGE_ELEM(m_upright, int, y + 17, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + -16, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + 17, x + -16)+CV_IMAGE_ELEM(m_upright, int, y + -16, x + -16)) + (CV_IMAGE_ELEM(m_tilted, int, y + 25, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -24)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 25)+CV_IMAGE_ELEM(m_tilted, int, y + -24, x + 1)));
  w22 = ((CV_IMAGE_ELEM(m_upright, int, y + 23, x + 23)-CV_IMAGE_ELEM(m_upright, int, y + -22, x + 23)-CV_IMAGE_ELEM(m_upright, int, y + 23, x + -22)+CV_IMAGE_ELEM(m_upright, int, y + -22, x + -22)) + (CV_IMAGE_ELEM(m_tilted, int, y + 34, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -33)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 34)+CV_IMAGE_ELEM(m_tilted, int, y + -33, x + 1)));
  w23 = ((CV_IMAGE_ELEM(m_upright, int, y + 24, x + 24)-CV_IMAGE_ELEM(m_upright, int, y + -23, x + 24)-CV_IMAGE_ELEM(m_upright, int, y + 24, x + -23)+CV_IMAGE_ELEM(m_upright, int, y + -23, x + -23)) + (CV_IMAGE_ELEM(m_tilted, int, y + 35, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -34)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 35)+CV_IMAGE_ELEM(m_tilted, int, y + -34, x + 1)));
  w32 = ((CV_IMAGE_ELEM(m_upright, int, y + 33, x + 33)-CV_IMAGE_ELEM(m_upright, int, y + -32, x + 33)-CV_IMAGE_ELEM(m_upright, int, y + 33, x + -32)+CV_IMAGE_ELEM(m_upright, int, y + -32, x + -32)) + (CV_IMAGE_ELEM(m_tilted, int, y + 49, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -48)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 49)+CV_IMAGE_ELEM(m_tilted, int, y + -48, x + 1)));
  w46 = ((CV_IMAGE_ELEM(m_upright, int, y + 47, x + 47)-CV_IMAGE_ELEM(m_upright, int, y + -46, x + 47)-CV_IMAGE_ELEM(m_upright, int, y + 47, x + -46)+CV_IMAGE_ELEM(m_upright, int, y + -46, x + -46)) + (CV_IMAGE_ELEM(m_tilted, int, y + 70, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -69)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 70)+CV_IMAGE_ELEM(m_tilted, int, y + -69, x + 1)));
float r1, r2, r3, r4, r6, r8, r11, r16, r23 ;
// 14 36
  r1 = w1*7.142857e-02 - (w2 - w1)*2.777778e-02;
// 50 116
  r2 = w2*2.000000e-02 - (w4 - w2)*8.620690e-03;
// 90 260
  r3 = w3*1.111111e-02 - (w6 - w3)*3.846154e-03;
// 166 436
  r4 = w4*6.024096e-03 - (w8 - w4)*2.293578e-03;
// 350 960
  r6 = w6*2.857143e-03 - (w12 - w6)*1.041667e-03;
// 602 1688
  r8 = w8*1.661130e-03 - (w16 - w8)*5.924171e-04;
// 1074 3196
  r11 = w11*9.310987e-04 - (w22 - w11)*3.128911e-04;
// 2290 6640
  r16 = w16*4.366812e-04 - (w32 - w16)*1.506024e-04;
// 4590 13720
  r23 = w23*2.178649e-04 - (w46 - w23)*7.288630e-05;
int mx_s = 0;
float mx = r1, mx_abs = std::abs(r1);
if (std::abs(r2) > mx_abs) { mx = r2; mx_s = 1; mx_abs = std::abs(r2); }
if (std::abs(r3) > mx_abs) { mx = r3; mx_s = 2; mx_abs = std::abs(r3); }
if (std::abs(r4) > mx_abs) { mx = r4; mx_s = 3; mx_abs = std::abs(r4); }
if (std::abs(r6) > mx_abs) { mx = r6; mx_s = 4; mx_abs = std::abs(r6); }
if (std::abs(r8) > mx_abs) { mx = r8; mx_s = 5; mx_abs = std::abs(r8); }
if (std::abs(r11) > mx_abs) { mx = r11; mx_s = 6; mx_abs = std::abs(r11); }
if (std::abs(r16) > mx_abs) { mx = r16; mx_s = 7; mx_abs = std::abs(r16); }
if (std::abs(r23) > mx_abs) { mx = r23; mx_s = 8; mx_abs = std::abs(r23); }
*p_prj = mx;
*p_scl = mx_s + 1;
p_prj += 1;
p_scl += 1;
m_upright_p += 1;
m_tilted_p += 1;
m_flat_p += 1;
}}
}
// [1, 2, 3, 4, 6, 8, 11, 16, 23, 32]
#define OR(x,y)     ((__m128i)_mm_or_ps((__m128)(x), (__m128)(y)))
#define AND(x,y)    ((__m128i)_mm_and_ps((__m128)(x), (__m128)(y)))
#define ANDNOT(x,y) ((__m128i)_mm_andnot_ps((__m128)(x), (__m128)(y)))
#define K(v)        _mm_set_epi32((v),(v),(v),(v))
#define ABS(x)      AND(x, K(0x7fffffff))
#define PRED(m,a,b) OR(AND((m),(a)), ANDNOT((m),(b)))
void StarDetector::FilterResponsesGen10() {
int w1,w2,w3,w4,w6,w8,w11,w12,w16,w22,w23,w32,w46,w64 ;
for (int y = 96; y < m_H - 96; ++y) { 
float *p_prj = &CV_IMAGE_ELEM(m_projected, float, y, 96);
uchar *p_scl = &CV_IMAGE_ELEM(m_scales, uchar, y, 96);
int *m_upright_p = &CV_IMAGE_ELEM(m_upright, int, y, 96);
int *m_tilted_p = &CV_IMAGE_ELEM(m_tilted, int, y, 96);
int *m_flat_p = &CV_IMAGE_ELEM(m_flat, int, y, 96);
for (int x = 96; x < m_W - 96; x += 1) {
  w1 = ((CV_IMAGE_ELEM(m_upright, int, y + 2, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + -1, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + 2, x + -1)+CV_IMAGE_ELEM(m_upright, int, y + -1, x + -1)) + (CV_IMAGE_ELEM(m_tilted, int, y + 2, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 2)+CV_IMAGE_ELEM(m_tilted, int, y + -1, x + 1)));
  w2 = ((CV_IMAGE_ELEM(m_upright, int, y + 3, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + -2, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + 3, x + -2)+CV_IMAGE_ELEM(m_upright, int, y + -2, x + -2)) + (CV_IMAGE_ELEM(m_tilted, int, y + 4, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -3)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 4)+CV_IMAGE_ELEM(m_tilted, int, y + -3, x + 1)));
  w3 = ((CV_IMAGE_ELEM(m_upright, int, y + 4, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + -3, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + 4, x + -3)+CV_IMAGE_ELEM(m_upright, int, y + -3, x + -3)) + (CV_IMAGE_ELEM(m_tilted, int, y + 5, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -4)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 5)+CV_IMAGE_ELEM(m_tilted, int, y + -4, x + 1)));
  w4 = ((CV_IMAGE_ELEM(m_upright, int, y + 5, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + -4, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + 5, x + -4)+CV_IMAGE_ELEM(m_upright, int, y + -4, x + -4)) + (CV_IMAGE_ELEM(m_tilted, int, y + 7, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -6)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 7)+CV_IMAGE_ELEM(m_tilted, int, y + -6, x + 1)));
  w6 = ((CV_IMAGE_ELEM(m_upright, int, y + 7, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + -6, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + 7, x + -6)+CV_IMAGE_ELEM(m_upright, int, y + -6, x + -6)) + (CV_IMAGE_ELEM(m_tilted, int, y + 10, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -9)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 10)+CV_IMAGE_ELEM(m_tilted, int, y + -9, x + 1)));
  w8 = ((CV_IMAGE_ELEM(m_upright, int, y + 9, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + -8, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + 9, x + -8)+CV_IMAGE_ELEM(m_upright, int, y + -8, x + -8)) + (CV_IMAGE_ELEM(m_tilted, int, y + 13, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -12)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 13)+CV_IMAGE_ELEM(m_tilted, int, y + -12, x + 1)));
  w11 = ((CV_IMAGE_ELEM(m_upright, int, y + 12, x + 12)-CV_IMAGE_ELEM(m_upright, int, y + -11, x + 12)-CV_IMAGE_ELEM(m_upright, int, y + 12, x + -11)+CV_IMAGE_ELEM(m_upright, int, y + -11, x + -11)) + (CV_IMAGE_ELEM(m_tilted, int, y + 17, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -16)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 17)+CV_IMAGE_ELEM(m_tilted, int, y + -16, x + 1)));
  w12 = ((CV_IMAGE_ELEM(m_upright, int, y + 13, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + -12, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + 13, x + -12)+CV_IMAGE_ELEM(m_upright, int, y + -12, x + -12)) + (CV_IMAGE_ELEM(m_tilted, int, y + 19, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -18)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 19)+CV_IMAGE_ELEM(m_tilted, int, y + -18, x + 1)));
  w16 = ((CV_IMAGE_ELEM(m_upright, int, y + 17, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + -16, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + 17, x + -16)+CV_IMAGE_ELEM(m_upright, int, y + -16, x + -16)) + (CV_IMAGE_ELEM(m_tilted, int, y + 25, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -24)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 25)+CV_IMAGE_ELEM(m_tilted, int, y + -24, x + 1)));
  w22 = ((CV_IMAGE_ELEM(m_upright, int, y + 23, x + 23)-CV_IMAGE_ELEM(m_upright, int, y + -22, x + 23)-CV_IMAGE_ELEM(m_upright, int, y + 23, x + -22)+CV_IMAGE_ELEM(m_upright, int, y + -22, x + -22)) + (CV_IMAGE_ELEM(m_tilted, int, y + 34, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -33)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 34)+CV_IMAGE_ELEM(m_tilted, int, y + -33, x + 1)));
  w23 = ((CV_IMAGE_ELEM(m_upright, int, y + 24, x + 24)-CV_IMAGE_ELEM(m_upright, int, y + -23, x + 24)-CV_IMAGE_ELEM(m_upright, int, y + 24, x + -23)+CV_IMAGE_ELEM(m_upright, int, y + -23, x + -23)) + (CV_IMAGE_ELEM(m_tilted, int, y + 35, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -34)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 35)+CV_IMAGE_ELEM(m_tilted, int, y + -34, x + 1)));
  w32 = ((CV_IMAGE_ELEM(m_upright, int, y + 33, x + 33)-CV_IMAGE_ELEM(m_upright, int, y + -32, x + 33)-CV_IMAGE_ELEM(m_upright, int, y + 33, x + -32)+CV_IMAGE_ELEM(m_upright, int, y + -32, x + -32)) + (CV_IMAGE_ELEM(m_tilted, int, y + 49, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -48)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 49)+CV_IMAGE_ELEM(m_tilted, int, y + -48, x + 1)));
  w46 = ((CV_IMAGE_ELEM(m_upright, int, y + 47, x + 47)-CV_IMAGE_ELEM(m_upright, int, y + -46, x + 47)-CV_IMAGE_ELEM(m_upright, int, y + 47, x + -46)+CV_IMAGE_ELEM(m_upright, int, y + -46, x + -46)) + (CV_IMAGE_ELEM(m_tilted, int, y + 70, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -69)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 70)+CV_IMAGE_ELEM(m_tilted, int, y + -69, x + 1)));
  w64 = ((CV_IMAGE_ELEM(m_upright, int, y + 65, x + 65)-CV_IMAGE_ELEM(m_upright, int, y + -64, x + 65)-CV_IMAGE_ELEM(m_upright, int, y + 65, x + -64)+CV_IMAGE_ELEM(m_upright, int, y + -64, x + -64)) + (CV_IMAGE_ELEM(m_tilted, int, y + 97, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -96)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 97)+CV_IMAGE_ELEM(m_tilted, int, y + -96, x + 1)));
float r1, r2, r3, r4, r6, r8, r11, r16, r23, r32 ;
// 14 36
  r1 = w1*7.142857e-02 - (w2 - w1)*2.777778e-02;
// 50 116
  r2 = w2*2.000000e-02 - (w4 - w2)*8.620690e-03;
// 90 260
  r3 = w3*1.111111e-02 - (w6 - w3)*3.846154e-03;
// 166 436
  r4 = w4*6.024096e-03 - (w8 - w4)*2.293578e-03;
// 350 960
  r6 = w6*2.857143e-03 - (w12 - w6)*1.041667e-03;
// 602 1688
  r8 = w8*1.661130e-03 - (w16 - w8)*5.924171e-04;
// 1074 3196
  r11 = w11*9.310987e-04 - (w22 - w11)*3.128911e-04;
// 2290 6640
  r16 = w16*4.366812e-04 - (w32 - w16)*1.506024e-04;
// 4590 13720
  r23 = w23*2.178649e-04 - (w46 - w23)*7.288630e-05;
// 8930 26336
  r32 = w32*1.119821e-04 - (w64 - w32)*3.797084e-05;
int mx_s = 0;
float mx = r1, mx_abs = std::abs(r1);
if (std::abs(r2) > mx_abs) { mx = r2; mx_s = 1; mx_abs = std::abs(r2); }
if (std::abs(r3) > mx_abs) { mx = r3; mx_s = 2; mx_abs = std::abs(r3); }
if (std::abs(r4) > mx_abs) { mx = r4; mx_s = 3; mx_abs = std::abs(r4); }
if (std::abs(r6) > mx_abs) { mx = r6; mx_s = 4; mx_abs = std::abs(r6); }
if (std::abs(r8) > mx_abs) { mx = r8; mx_s = 5; mx_abs = std::abs(r8); }
if (std::abs(r11) > mx_abs) { mx = r11; mx_s = 6; mx_abs = std::abs(r11); }
if (std::abs(r16) > mx_abs) { mx = r16; mx_s = 7; mx_abs = std::abs(r16); }
if (std::abs(r23) > mx_abs) { mx = r23; mx_s = 8; mx_abs = std::abs(r23); }
if (std::abs(r32) > mx_abs) { mx = r32; mx_s = 9; mx_abs = std::abs(r32); }
*p_prj = mx;
*p_scl = mx_s + 1;
p_prj += 1;
p_scl += 1;
m_upright_p += 1;
m_tilted_p += 1;
m_flat_p += 1;
}}
}
// [1, 2, 3, 4, 6, 8, 11, 16, 23, 32, 45]
#define OR(x,y)     ((__m128i)_mm_or_ps((__m128)(x), (__m128)(y)))
#define AND(x,y)    ((__m128i)_mm_and_ps((__m128)(x), (__m128)(y)))
#define ANDNOT(x,y) ((__m128i)_mm_andnot_ps((__m128)(x), (__m128)(y)))
#define K(v)        _mm_set_epi32((v),(v),(v),(v))
#define ABS(x)      AND(x, K(0x7fffffff))
#define PRED(m,a,b) OR(AND((m),(a)), ANDNOT((m),(b)))
void StarDetector::FilterResponsesGen11() {
int w1,w2,w3,w4,w6,w8,w11,w12,w16,w22,w23,w32,w45,w46,w64,w90 ;
for (int y = 136; y < m_H - 136; ++y) { 
float *p_prj = &CV_IMAGE_ELEM(m_projected, float, y, 136);
uchar *p_scl = &CV_IMAGE_ELEM(m_scales, uchar, y, 136);
int *m_upright_p = &CV_IMAGE_ELEM(m_upright, int, y, 136);
int *m_tilted_p = &CV_IMAGE_ELEM(m_tilted, int, y, 136);
int *m_flat_p = &CV_IMAGE_ELEM(m_flat, int, y, 136);
for (int x = 136; x < m_W - 136; x += 1) {
  w1 = ((CV_IMAGE_ELEM(m_upright, int, y + 2, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + -1, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + 2, x + -1)+CV_IMAGE_ELEM(m_upright, int, y + -1, x + -1)) + (CV_IMAGE_ELEM(m_tilted, int, y + 2, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 2)+CV_IMAGE_ELEM(m_tilted, int, y + -1, x + 1)));
  w2 = ((CV_IMAGE_ELEM(m_upright, int, y + 3, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + -2, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + 3, x + -2)+CV_IMAGE_ELEM(m_upright, int, y + -2, x + -2)) + (CV_IMAGE_ELEM(m_tilted, int, y + 4, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -3)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 4)+CV_IMAGE_ELEM(m_tilted, int, y + -3, x + 1)));
  w3 = ((CV_IMAGE_ELEM(m_upright, int, y + 4, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + -3, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + 4, x + -3)+CV_IMAGE_ELEM(m_upright, int, y + -3, x + -3)) + (CV_IMAGE_ELEM(m_tilted, int, y + 5, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -4)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 5)+CV_IMAGE_ELEM(m_tilted, int, y + -4, x + 1)));
  w4 = ((CV_IMAGE_ELEM(m_upright, int, y + 5, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + -4, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + 5, x + -4)+CV_IMAGE_ELEM(m_upright, int, y + -4, x + -4)) + (CV_IMAGE_ELEM(m_tilted, int, y + 7, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -6)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 7)+CV_IMAGE_ELEM(m_tilted, int, y + -6, x + 1)));
  w6 = ((CV_IMAGE_ELEM(m_upright, int, y + 7, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + -6, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + 7, x + -6)+CV_IMAGE_ELEM(m_upright, int, y + -6, x + -6)) + (CV_IMAGE_ELEM(m_tilted, int, y + 10, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -9)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 10)+CV_IMAGE_ELEM(m_tilted, int, y + -9, x + 1)));
  w8 = ((CV_IMAGE_ELEM(m_upright, int, y + 9, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + -8, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + 9, x + -8)+CV_IMAGE_ELEM(m_upright, int, y + -8, x + -8)) + (CV_IMAGE_ELEM(m_tilted, int, y + 13, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -12)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 13)+CV_IMAGE_ELEM(m_tilted, int, y + -12, x + 1)));
  w11 = ((CV_IMAGE_ELEM(m_upright, int, y + 12, x + 12)-CV_IMAGE_ELEM(m_upright, int, y + -11, x + 12)-CV_IMAGE_ELEM(m_upright, int, y + 12, x + -11)+CV_IMAGE_ELEM(m_upright, int, y + -11, x + -11)) + (CV_IMAGE_ELEM(m_tilted, int, y + 17, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -16)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 17)+CV_IMAGE_ELEM(m_tilted, int, y + -16, x + 1)));
  w12 = ((CV_IMAGE_ELEM(m_upright, int, y + 13, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + -12, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + 13, x + -12)+CV_IMAGE_ELEM(m_upright, int, y + -12, x + -12)) + (CV_IMAGE_ELEM(m_tilted, int, y + 19, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -18)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 19)+CV_IMAGE_ELEM(m_tilted, int, y + -18, x + 1)));
  w16 = ((CV_IMAGE_ELEM(m_upright, int, y + 17, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + -16, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + 17, x + -16)+CV_IMAGE_ELEM(m_upright, int, y + -16, x + -16)) + (CV_IMAGE_ELEM(m_tilted, int, y + 25, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -24)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 25)+CV_IMAGE_ELEM(m_tilted, int, y + -24, x + 1)));
  w22 = ((CV_IMAGE_ELEM(m_upright, int, y + 23, x + 23)-CV_IMAGE_ELEM(m_upright, int, y + -22, x + 23)-CV_IMAGE_ELEM(m_upright, int, y + 23, x + -22)+CV_IMAGE_ELEM(m_upright, int, y + -22, x + -22)) + (CV_IMAGE_ELEM(m_tilted, int, y + 34, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -33)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 34)+CV_IMAGE_ELEM(m_tilted, int, y + -33, x + 1)));
  w23 = ((CV_IMAGE_ELEM(m_upright, int, y + 24, x + 24)-CV_IMAGE_ELEM(m_upright, int, y + -23, x + 24)-CV_IMAGE_ELEM(m_upright, int, y + 24, x + -23)+CV_IMAGE_ELEM(m_upright, int, y + -23, x + -23)) + (CV_IMAGE_ELEM(m_tilted, int, y + 35, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -34)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 35)+CV_IMAGE_ELEM(m_tilted, int, y + -34, x + 1)));
  w32 = ((CV_IMAGE_ELEM(m_upright, int, y + 33, x + 33)-CV_IMAGE_ELEM(m_upright, int, y + -32, x + 33)-CV_IMAGE_ELEM(m_upright, int, y + 33, x + -32)+CV_IMAGE_ELEM(m_upright, int, y + -32, x + -32)) + (CV_IMAGE_ELEM(m_tilted, int, y + 49, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -48)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 49)+CV_IMAGE_ELEM(m_tilted, int, y + -48, x + 1)));
  w45 = ((CV_IMAGE_ELEM(m_upright, int, y + 46, x + 46)-CV_IMAGE_ELEM(m_upright, int, y + -45, x + 46)-CV_IMAGE_ELEM(m_upright, int, y + 46, x + -45)+CV_IMAGE_ELEM(m_upright, int, y + -45, x + -45)) + (CV_IMAGE_ELEM(m_tilted, int, y + 68, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -67)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 68)+CV_IMAGE_ELEM(m_tilted, int, y + -67, x + 1)));
  w46 = ((CV_IMAGE_ELEM(m_upright, int, y + 47, x + 47)-CV_IMAGE_ELEM(m_upright, int, y + -46, x + 47)-CV_IMAGE_ELEM(m_upright, int, y + 47, x + -46)+CV_IMAGE_ELEM(m_upright, int, y + -46, x + -46)) + (CV_IMAGE_ELEM(m_tilted, int, y + 70, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -69)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 70)+CV_IMAGE_ELEM(m_tilted, int, y + -69, x + 1)));
  w64 = ((CV_IMAGE_ELEM(m_upright, int, y + 65, x + 65)-CV_IMAGE_ELEM(m_upright, int, y + -64, x + 65)-CV_IMAGE_ELEM(m_upright, int, y + 65, x + -64)+CV_IMAGE_ELEM(m_upright, int, y + -64, x + -64)) + (CV_IMAGE_ELEM(m_tilted, int, y + 97, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -96)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 97)+CV_IMAGE_ELEM(m_tilted, int, y + -96, x + 1)));
  w90 = ((CV_IMAGE_ELEM(m_upright, int, y + 91, x + 91)-CV_IMAGE_ELEM(m_upright, int, y + -90, x + 91)-CV_IMAGE_ELEM(m_upright, int, y + 91, x + -90)+CV_IMAGE_ELEM(m_upright, int, y + -90, x + -90)) + (CV_IMAGE_ELEM(m_tilted, int, y + 136, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -135)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 136)+CV_IMAGE_ELEM(m_tilted, int, y + -135, x + 1)));
float r1, r2, r3, r4, r6, r8, r11, r16, r23, r32, r45 ;
// 14 36
  r1 = w1*7.142857e-02 - (w2 - w1)*2.777778e-02;
// 50 116
  r2 = w2*2.000000e-02 - (w4 - w2)*8.620690e-03;
// 90 260
  r3 = w3*1.111111e-02 - (w6 - w3)*3.846154e-03;
// 166 436
  r4 = w4*6.024096e-03 - (w8 - w4)*2.293578e-03;
// 350 960
  r6 = w6*2.857143e-03 - (w12 - w6)*1.041667e-03;
// 602 1688
  r8 = w8*1.661130e-03 - (w16 - w8)*5.924171e-04;
// 1074 3196
  r11 = w11*9.310987e-04 - (w22 - w11)*3.128911e-04;
// 2290 6640
  r16 = w16*4.366812e-04 - (w32 - w16)*1.506024e-04;
// 4590 13720
  r23 = w23*2.178649e-04 - (w46 - w23)*7.288630e-05;
// 8930 26336
  r32 = w32*1.119821e-04 - (w64 - w32)*3.797084e-05;
// 17394 52088
  r45 = w45*5.749109e-05 - (w90 - w45)*1.919828e-05;
int mx_s = 0;
float mx = r1, mx_abs = std::abs(r1);
if (std::abs(r2) > mx_abs) { mx = r2; mx_s = 1; mx_abs = std::abs(r2); }
if (std::abs(r3) > mx_abs) { mx = r3; mx_s = 2; mx_abs = std::abs(r3); }
if (std::abs(r4) > mx_abs) { mx = r4; mx_s = 3; mx_abs = std::abs(r4); }
if (std::abs(r6) > mx_abs) { mx = r6; mx_s = 4; mx_abs = std::abs(r6); }
if (std::abs(r8) > mx_abs) { mx = r8; mx_s = 5; mx_abs = std::abs(r8); }
if (std::abs(r11) > mx_abs) { mx = r11; mx_s = 6; mx_abs = std::abs(r11); }
if (std::abs(r16) > mx_abs) { mx = r16; mx_s = 7; mx_abs = std::abs(r16); }
if (std::abs(r23) > mx_abs) { mx = r23; mx_s = 8; mx_abs = std::abs(r23); }
if (std::abs(r32) > mx_abs) { mx = r32; mx_s = 9; mx_abs = std::abs(r32); }
if (std::abs(r45) > mx_abs) { mx = r45; mx_s = 10; mx_abs = std::abs(r45); }
*p_prj = mx;
*p_scl = mx_s + 1;
p_prj += 1;
p_scl += 1;
m_upright_p += 1;
m_tilted_p += 1;
m_flat_p += 1;
}}
}
// [1, 2, 3, 4, 6, 8, 11, 16, 23, 32, 45, 64]
#define OR(x,y)     ((__m128i)_mm_or_ps((__m128)(x), (__m128)(y)))
#define AND(x,y)    ((__m128i)_mm_and_ps((__m128)(x), (__m128)(y)))
#define ANDNOT(x,y) ((__m128i)_mm_andnot_ps((__m128)(x), (__m128)(y)))
#define K(v)        _mm_set_epi32((v),(v),(v),(v))
#define ABS(x)      AND(x, K(0x7fffffff))
#define PRED(m,a,b) OR(AND((m),(a)), ANDNOT((m),(b)))
void StarDetector::FilterResponsesGen12() {
int w1,w2,w3,w4,w6,w8,w11,w12,w16,w22,w23,w32,w45,w46,w64,w90,w128 ;
for (int y = 192; y < m_H - 192; ++y) { 
float *p_prj = &CV_IMAGE_ELEM(m_projected, float, y, 192);
uchar *p_scl = &CV_IMAGE_ELEM(m_scales, uchar, y, 192);
int *m_upright_p = &CV_IMAGE_ELEM(m_upright, int, y, 192);
int *m_tilted_p = &CV_IMAGE_ELEM(m_tilted, int, y, 192);
int *m_flat_p = &CV_IMAGE_ELEM(m_flat, int, y, 192);
for (int x = 192; x < m_W - 192; x += 1) {
  w1 = ((CV_IMAGE_ELEM(m_upright, int, y + 2, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + -1, x + 2)-CV_IMAGE_ELEM(m_upright, int, y + 2, x + -1)+CV_IMAGE_ELEM(m_upright, int, y + -1, x + -1)) + (CV_IMAGE_ELEM(m_tilted, int, y + 2, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 2)+CV_IMAGE_ELEM(m_tilted, int, y + -1, x + 1)));
  w2 = ((CV_IMAGE_ELEM(m_upright, int, y + 3, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + -2, x + 3)-CV_IMAGE_ELEM(m_upright, int, y + 3, x + -2)+CV_IMAGE_ELEM(m_upright, int, y + -2, x + -2)) + (CV_IMAGE_ELEM(m_tilted, int, y + 4, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -3)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 4)+CV_IMAGE_ELEM(m_tilted, int, y + -3, x + 1)));
  w3 = ((CV_IMAGE_ELEM(m_upright, int, y + 4, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + -3, x + 4)-CV_IMAGE_ELEM(m_upright, int, y + 4, x + -3)+CV_IMAGE_ELEM(m_upright, int, y + -3, x + -3)) + (CV_IMAGE_ELEM(m_tilted, int, y + 5, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -4)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 5)+CV_IMAGE_ELEM(m_tilted, int, y + -4, x + 1)));
  w4 = ((CV_IMAGE_ELEM(m_upright, int, y + 5, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + -4, x + 5)-CV_IMAGE_ELEM(m_upright, int, y + 5, x + -4)+CV_IMAGE_ELEM(m_upright, int, y + -4, x + -4)) + (CV_IMAGE_ELEM(m_tilted, int, y + 7, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -6)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 7)+CV_IMAGE_ELEM(m_tilted, int, y + -6, x + 1)));
  w6 = ((CV_IMAGE_ELEM(m_upright, int, y + 7, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + -6, x + 7)-CV_IMAGE_ELEM(m_upright, int, y + 7, x + -6)+CV_IMAGE_ELEM(m_upright, int, y + -6, x + -6)) + (CV_IMAGE_ELEM(m_tilted, int, y + 10, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -9)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 10)+CV_IMAGE_ELEM(m_tilted, int, y + -9, x + 1)));
  w8 = ((CV_IMAGE_ELEM(m_upright, int, y + 9, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + -8, x + 9)-CV_IMAGE_ELEM(m_upright, int, y + 9, x + -8)+CV_IMAGE_ELEM(m_upright, int, y + -8, x + -8)) + (CV_IMAGE_ELEM(m_tilted, int, y + 13, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -12)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 13)+CV_IMAGE_ELEM(m_tilted, int, y + -12, x + 1)));
  w11 = ((CV_IMAGE_ELEM(m_upright, int, y + 12, x + 12)-CV_IMAGE_ELEM(m_upright, int, y + -11, x + 12)-CV_IMAGE_ELEM(m_upright, int, y + 12, x + -11)+CV_IMAGE_ELEM(m_upright, int, y + -11, x + -11)) + (CV_IMAGE_ELEM(m_tilted, int, y + 17, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -16)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 17)+CV_IMAGE_ELEM(m_tilted, int, y + -16, x + 1)));
  w12 = ((CV_IMAGE_ELEM(m_upright, int, y + 13, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + -12, x + 13)-CV_IMAGE_ELEM(m_upright, int, y + 13, x + -12)+CV_IMAGE_ELEM(m_upright, int, y + -12, x + -12)) + (CV_IMAGE_ELEM(m_tilted, int, y + 19, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -18)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 19)+CV_IMAGE_ELEM(m_tilted, int, y + -18, x + 1)));
  w16 = ((CV_IMAGE_ELEM(m_upright, int, y + 17, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + -16, x + 17)-CV_IMAGE_ELEM(m_upright, int, y + 17, x + -16)+CV_IMAGE_ELEM(m_upright, int, y + -16, x + -16)) + (CV_IMAGE_ELEM(m_tilted, int, y + 25, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -24)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 25)+CV_IMAGE_ELEM(m_tilted, int, y + -24, x + 1)));
  w22 = ((CV_IMAGE_ELEM(m_upright, int, y + 23, x + 23)-CV_IMAGE_ELEM(m_upright, int, y + -22, x + 23)-CV_IMAGE_ELEM(m_upright, int, y + 23, x + -22)+CV_IMAGE_ELEM(m_upright, int, y + -22, x + -22)) + (CV_IMAGE_ELEM(m_tilted, int, y + 34, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -33)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 34)+CV_IMAGE_ELEM(m_tilted, int, y + -33, x + 1)));
  w23 = ((CV_IMAGE_ELEM(m_upright, int, y + 24, x + 24)-CV_IMAGE_ELEM(m_upright, int, y + -23, x + 24)-CV_IMAGE_ELEM(m_upright, int, y + 24, x + -23)+CV_IMAGE_ELEM(m_upright, int, y + -23, x + -23)) + (CV_IMAGE_ELEM(m_tilted, int, y + 35, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -34)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 35)+CV_IMAGE_ELEM(m_tilted, int, y + -34, x + 1)));
  w32 = ((CV_IMAGE_ELEM(m_upright, int, y + 33, x + 33)-CV_IMAGE_ELEM(m_upright, int, y + -32, x + 33)-CV_IMAGE_ELEM(m_upright, int, y + 33, x + -32)+CV_IMAGE_ELEM(m_upright, int, y + -32, x + -32)) + (CV_IMAGE_ELEM(m_tilted, int, y + 49, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -48)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 49)+CV_IMAGE_ELEM(m_tilted, int, y + -48, x + 1)));
  w45 = ((CV_IMAGE_ELEM(m_upright, int, y + 46, x + 46)-CV_IMAGE_ELEM(m_upright, int, y + -45, x + 46)-CV_IMAGE_ELEM(m_upright, int, y + 46, x + -45)+CV_IMAGE_ELEM(m_upright, int, y + -45, x + -45)) + (CV_IMAGE_ELEM(m_tilted, int, y + 68, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -67)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 68)+CV_IMAGE_ELEM(m_tilted, int, y + -67, x + 1)));
  w46 = ((CV_IMAGE_ELEM(m_upright, int, y + 47, x + 47)-CV_IMAGE_ELEM(m_upright, int, y + -46, x + 47)-CV_IMAGE_ELEM(m_upright, int, y + 47, x + -46)+CV_IMAGE_ELEM(m_upright, int, y + -46, x + -46)) + (CV_IMAGE_ELEM(m_tilted, int, y + 70, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -69)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 70)+CV_IMAGE_ELEM(m_tilted, int, y + -69, x + 1)));
  w64 = ((CV_IMAGE_ELEM(m_upright, int, y + 65, x + 65)-CV_IMAGE_ELEM(m_upright, int, y + -64, x + 65)-CV_IMAGE_ELEM(m_upright, int, y + 65, x + -64)+CV_IMAGE_ELEM(m_upright, int, y + -64, x + -64)) + (CV_IMAGE_ELEM(m_tilted, int, y + 97, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -96)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 97)+CV_IMAGE_ELEM(m_tilted, int, y + -96, x + 1)));
  w90 = ((CV_IMAGE_ELEM(m_upright, int, y + 91, x + 91)-CV_IMAGE_ELEM(m_upright, int, y + -90, x + 91)-CV_IMAGE_ELEM(m_upright, int, y + 91, x + -90)+CV_IMAGE_ELEM(m_upright, int, y + -90, x + -90)) + (CV_IMAGE_ELEM(m_tilted, int, y + 136, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -135)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 136)+CV_IMAGE_ELEM(m_tilted, int, y + -135, x + 1)));
  w128 = ((CV_IMAGE_ELEM(m_upright, int, y + 129, x + 129)-CV_IMAGE_ELEM(m_upright, int, y + -128, x + 129)-CV_IMAGE_ELEM(m_upright, int, y + 129, x + -128)+CV_IMAGE_ELEM(m_upright, int, y + -128, x + -128)) + (CV_IMAGE_ELEM(m_tilted, int, y + 193, x + 1)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + -192)-CV_IMAGE_ELEM(m_flat, int, y + 0, x + 193)+CV_IMAGE_ELEM(m_tilted, int, y + -192, x + 1)));
float r1, r2, r3, r4, r6, r8, r11, r16, r23, r32, r45, r64 ;
// 14 36
  r1 = w1*7.142857e-02 - (w2 - w1)*2.777778e-02;
// 50 116
  r2 = w2*2.000000e-02 - (w4 - w2)*8.620690e-03;
// 90 260
  r3 = w3*1.111111e-02 - (w6 - w3)*3.846154e-03;
// 166 436
  r4 = w4*6.024096e-03 - (w8 - w4)*2.293578e-03;
// 350 960
  r6 = w6*2.857143e-03 - (w12 - w6)*1.041667e-03;
// 602 1688
  r8 = w8*1.661130e-03 - (w16 - w8)*5.924171e-04;
// 1074 3196
  r11 = w11*9.310987e-04 - (w22 - w11)*3.128911e-04;
// 2290 6640
  r16 = w16*4.366812e-04 - (w32 - w16)*1.506024e-04;
// 4590 13720
  r23 = w23*2.178649e-04 - (w46 - w23)*7.288630e-05;
// 8930 26336
  r32 = w32*1.119821e-04 - (w64 - w32)*3.797084e-05;
// 17394 52088
  r45 = w45*5.749109e-05 - (w90 - w45)*1.919828e-05;
// 35266 104896
  r64 = w64*2.835592e-05 - (w128 - w64)*9.533252e-06;
int mx_s = 0;
float mx = r1, mx_abs = std::abs(r1);
if (std::abs(r2) > mx_abs) { mx = r2; mx_s = 1; mx_abs = std::abs(r2); }
if (std::abs(r3) > mx_abs) { mx = r3; mx_s = 2; mx_abs = std::abs(r3); }
if (std::abs(r4) > mx_abs) { mx = r4; mx_s = 3; mx_abs = std::abs(r4); }
if (std::abs(r6) > mx_abs) { mx = r6; mx_s = 4; mx_abs = std::abs(r6); }
if (std::abs(r8) > mx_abs) { mx = r8; mx_s = 5; mx_abs = std::abs(r8); }
if (std::abs(r11) > mx_abs) { mx = r11; mx_s = 6; mx_abs = std::abs(r11); }
if (std::abs(r16) > mx_abs) { mx = r16; mx_s = 7; mx_abs = std::abs(r16); }
if (std::abs(r23) > mx_abs) { mx = r23; mx_s = 8; mx_abs = std::abs(r23); }
if (std::abs(r32) > mx_abs) { mx = r32; mx_s = 9; mx_abs = std::abs(r32); }
if (std::abs(r45) > mx_abs) { mx = r45; mx_s = 10; mx_abs = std::abs(r45); }
if (std::abs(r64) > mx_abs) { mx = r64; mx_s = 11; mx_abs = std::abs(r64); }
*p_prj = mx;
*p_scl = mx_s + 1;
p_prj += 1;
p_scl += 1;
m_upright_p += 1;
m_tilted_p += 1;
m_flat_p += 1;
}}
}
