#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of the Willow Garage nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Revision $Id: gossipbot.py 1013 2008-05-21 01:08:56Z sfkwc $

## This provides a service which will return an unsigned integer
## which uniquely identifies a string.  A new string will recieve
## a new number, a repeated string will recieve the same number
## as that string did previously.

import rostools
rostools.update_path('namelookup')

from namelookup.srv import *
import rospy 

NAME = 'namelookup_server'

names = {}
revnames = {}
current_val = 1

def nameLookup(req):
    global current_val
    if req.name in names:
        print 'Repeated Name'
    else:
        names[req.name] = current_val
        revnames[current_val] = req.name
        current_val += 1
    print 'Returning: %d for "%s"'%(names[req.name], req.name)
    return NameToNumberResponse(names[req.name])
  
def reverseNameLookup(req):
    result = ''
    if req.number in revnames:
        print 'Existing Number'
        result = revnames[req.number]
    else:
        print 'Number not found'
    print 'Returning: "%s" for %d'%(revnames[req.number], req.number)
    return NumberToNameResponse(result)
    
def nameLookupServer():
    rospy.ready(NAME)
    print 'starting'
    s = rospy.Service('nameToNumber', NameToNumber, nameLookup)
    s.register()
    sr = rospy.Service('numberToName', NumberToName, reverseNameLookup)
    sr.register()
    rospy.spin()

if __name__ == "__main__":
    names['NO_PARENT'] = 0
    revnames[0] = 'NO_PARENT'
    nameLookupServer()
