#!/usr/bin/env python
#
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of the Willow Garage nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rostools
rostools.update_path('qualification')

#import rospy, sys
import sys
import wx
from wx import xrc

import qualification
from qualification import *

import rospy

class ScanPanel():
  def __init__(self, parent, func = None):
    self.parent = parent

    # Load the XRC resource
    self.res = xrc.XmlResource(execution_path('gui.xrc'))

    # Load the scan_panel and serial_ctrl
    self.panel = self.res.LoadPanel(self.parent, 'scan_panel')
    self.serial = xrc.XRCCTRL(self.panel, 'serial_ctl')

    # Embed our panel in the parent panel (should have been empty)
    NestPanel(self.parent, self.panel)

    # Bind our button and other events
    self.panel.Bind(wx.EVT_BUTTON, self.OnTest, id=xrc.XRCID('test_button'))
    self.panel.GetTopLevelParent().Bind(wx.EVT_CHAR, self.OnChar)
    self.serial.Bind(wx.EVT_TEXT_ENTER, self.OnTest)

    # Steal focus so that events are handled right at start
    self.panel.SetFocus()

  def Log(self, msg):
    try:
      # I'm sure a wx python logging infrastructure exists... I just can't figure it out
      if self.parent.GetTopLevelParent().log:
        self.parent.GetTopLevelParent().log.AppendText(datetime.datetime.now().strftime("%Y-%m-%d_%I:%M:%S: ") + msg + '\n')
    except AttributeError:
      pass

  def OnChar(self, evt):
    # 347 is the keycode sent at the beginning of a barcode
    if (evt.GetKeyCode() == 347):
      # Clear the old contents and put focus in the serial box so the rest of input goes there
      self.serial.Clear()
      self.serial.SetFocus()

  def OnTest(self, evt):
    # Get the first 7 characters of the serial
    value = self.serial.GetValue()[0:7]

    if (tests.test_list.has_key(value)):
      self.Log('Testing component with ID: ' + self.serial.GetValue())

      # Use the test_list to run the correct test
      test = tests.test_list[value](self.parent, self.serial.GetValue(), self.OnResult)
    else:
      dlg = wx.MessageDialog(self.panel, 'No test defined for that serial Number','Error', wx.OK|wx.ICON_ERROR)
      dlg.ShowModal()

  def OnResult(self, result):
    # If the result is just a string, print it
    if (isinstance(result,str)):
      self.Log(result)
    self.serial.Clear()

class QualificationApp(wx.App):
  def OnInit(self):
    rospy.ready("Qualifier", anonymous=True)
    
    # Load the gui xrc file
    self.res = xrc.XmlResource(execution_path('gui.xrc'))

    # Load the frame
    self.frame = self.res.LoadFrame(None, 'frame');

    # Load the split_panel
    self.split_panel = xrc.XRCCTRL(self.frame, 'split_panel')
    # Sash gravity has to be set here (xrc files don't handle the right yet)
    self.split_panel.SetSashGravity(0.8)

    # Get the test panel
    self.test_panel = xrc.XRCCTRL(self.split_panel, 'test_panel')

    # Size setting incantations:
    self.test_panel_sizer = wx.BoxSizer()
    self.test_panel.SetSizer(self.test_panel_sizer)
    self.test_panel_sizer.SetSizeHints(self.test_panel)

    # Load the log file
    # Note: This seems like a bad way to put something in a "deterministic" location
    #       The wx logging infrastructure should fix this
    self.frame.log = xrc.XRCCTRL(self.frame, 'log')

    # Create the scanning panel (it embeds itself in the test panel)
    self.scan_panel = ScanPanel(self.test_panel)

    # Set size hints for the frame
    sizer2 = self.frame.GetSizer()
    sizer2.SetSizeHints(self.frame)

    # Reset the default size to 800,800 (not inherited right from XRC)
    self.frame.SetSize(wx.Size(800,800))
    self.frame.Layout()
    self.frame.Centre()
    self.frame.Show(True)

    return True

if __name__ == '__main__':
  try:
    app = QualificationApp(0)
    app.MainLoop()
  except Exception, e:
    print e
    
  print 'quit'
