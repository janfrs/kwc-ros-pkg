#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of the Willow Garage nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rostools
rostools.update_path('qualification')

from robot_msgs.msg import *
from robot_srvs.srv import *

import rospy 

NAME = 'ethernet'

import os

def self_test(req):

    out_stat = []

    eths = ['eth1', 'eth2', 'eth3']
    ips = {'eth1': '10.142.1.2', 'eth2': '10.143.1.2', 'eth3':'10.144.1.2'}

    for eth in eths:
        res = os.popen('ping -f -q -w 1 -s 32768 %s' % (ips[eth])).readlines()

        if (len(res) > 1):
            tran = float(res[3].split()[0])
            recv = float(res[3].split()[3])

            vals = []
            vals.append(DiagnosticValue(tran, 'transmitted'))
            vals.append(DiagnosticValue(recv, 'received'))

            if ((tran - recv) <= 2):
                res = os.popen('netperf -H %s -t UDP_STREAM -l 1' % (ips[eth])).readlines()

                speed = float(res[6].split()[3])
                vals.append(DiagnosticValue(speed, 'speed'))
                
                if (speed > 900):
                    out_stat.append(DiagnosticStatus(0, '%s cable test' % (eth), 'Gigabit', vals, []))
                elif (speed > 90):
                    pass
                    out_stat.append(DiagnosticStatus(0, '%s cable test' % (eth), '100 Megabit', vals, []))
                else:
                    pass
                    out_stat.append(DiagnosticStatus(1, '%s cable test' % (eth), '< 10 Megabit', vals, []))
            else:
                vals.append(DiagnosticValue(0.0, 'speed'))
                out_stat.append(DiagnosticStatus(2, '%s cable test' % (eth), 'too many packets lost', vals, []))

        else:
            out_stat.append(DiagnosticStatus(2, '%s cable test' % (eth), 'Running ping failed', [], []))

    out = SelfTestResponse('ethernet', 1, out_stat)
    return out

def ethernet_test():
    rospy.ready(NAME)
    s = rospy.Service('~self_test', SelfTest, self_test)
    s.register()
    rospy.spin()

if __name__ == "__main__":
    ethernet_test()
