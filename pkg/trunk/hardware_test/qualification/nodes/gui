#!/usr/bin/env python
#
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of the Willow Garage nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rostools
rostools.update_path('qualification')

#import rospy, sys
import sys
import wx
from wx import xrc

import qualification
from qualification import *

class ScanPanel(BaseTest):
  def __init__(self, parent, func = None):
    self.parent = parent
    self.res = xrc.XmlResource(execution_path('gui.xrc'))
    self.panel = self.res.LoadPanel(self.parent, 'scan_panel')
    self.serial = xrc.XRCCTRL(self.panel, 'serial_ctl')
    BaseTest.__init__(self, self.parent, self.panel, func)

    self.panel.Bind(wx.EVT_BUTTON, self.OnTest, id=xrc.XRCID('test_button'))
    self.panel.GetTopLevelParent().Bind(wx.EVT_CHAR, self.OnChar)
    self.serial.Bind(wx.EVT_TEXT_ENTER, self.OnTest)
    self.panel.SetFocus()

  def OnChar(self, evt):
    if (evt.GetKeyCode() == 347):
      self.serial.Clear()
      self.serial.SetFocus()

  def OnTest(self, evt):
    value = self.serial.GetValue()
    if (value[0:2] == '68'):
      subvalue = value[2:7]
      if (tests.test_list.has_key(subvalue)):
        BaseTest.Log(self,'Testing component with ID: ' + value)
        test = tests.test_list[subvalue](self.parent, self.OnResult)
      else:
        dlg = wx.MessageDialog(self.panel, 'No test defined for that serial Number','Error', wx.OK|wx.ICON_ERROR)
        dlg.ShowModal()
    else:
      dlg = wx.MessageDialog(self.panel, 'Not a valid WG ID number','Error', wx.OK|wx.ICON_ERROR)
      dlg.ShowModal()

  def OnResult(self, results):
    res = str('Got results:\n')
    for stat in results.status:
      res += stat.name + ' ' + stat.message + '\n'
      for val in stat.values:
        res += val.value_label + ' ' + str(val.value) + '\n'
    BaseTest.Log(self, res)
    self.serial.Clear()
      
      

class QualificationApp(wx.App):
  def OnInit(self):
    self.res = xrc.XmlResource(execution_path('gui.xrc'))

    self.frame = self.res.LoadFrame(None, 'frame');

    self.split_panel = xrc.XRCCTRL(self.frame, 'split_panel')
    self.split_panel.SetSashGravity(0.8)

    self.test_panel = xrc.XRCCTRL(self.split_panel, 'test_panel')
    self.test_panel_sizer = wx.BoxSizer()
    self.test_panel.SetSizer(self.test_panel_sizer)
    self.test_panel_sizer.SetSizeHints(self.test_panel)

    #This seems like a bad way to put something in a "deterministic" location
    self.frame.log = xrc.XRCCTRL(self.frame, 'log')
    
    test = ScanPanel(self.test_panel)

    sizer2 = self.frame.GetSizer()
    sizer2.SetSizeHints(self.frame)
    self.frame.SetSize(wx.Size(800,800))
    self.frame.Layout()
    self.frame.Show(True)
#   self.frame.Centre()
    return True

if __name__ == '__main__':
  try:
    app = QualificationApp(0)
    app.MainLoop()
  except Exception, e:
    print e
    
  print 'quit'
#  rospy.signal_shutdown('GUI shutdown')
