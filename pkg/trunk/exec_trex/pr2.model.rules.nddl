/*
 * pr2.rules.nddl
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/**
 * All behaviors will oscillate between active and inactive
 */
Behavior::Inactive{
  met_by(Active);
  meets(Active);
}

Behavior::Active{
  met_by(Inactive);
  meets(Inactive);
}

Navigator::Going{
  // If the target is bound then generate behavior to accomplish goal
  if(x){
    if(y){		 
      any(WaypointController.Inactive pos);
      precedes(pos.start, start);
      precedes(start, pos.end); 
   
      bool plan_done;
      calcGlobalPath(plan_done, pos.x, pos.y,  x, y);	     
      eq(plan_done,true);
      pos meets(WaypointController.Active wpc);
      ends wpc;
      eq(wpc.x, x);
      eq(wpc.y, y);
    }
  }
}

WaypointController::Inactive {
  if(object.mode == Internal) {
    starts(VehicleState.Holds pos);
    eq(x, pos.x);
    eq(y, pos.y);
  }
}
WaypointController::Active {
  if(object.mode == Internal) {
    ends(WaypointActions.Go a);
    eq(a.x, x);
    eq(a.y, y);
  }
}


WaypointActions::Go {
	starts(VelController.Active velcon);
	eq(velcon.goal_x, x);
	eq(velcon.goal_y, y);
}

VelController::Inactive {
	met_by(Active);
	meets(Active);		
	starts(VelCommander.Holds velcom);	
	eq(velcom.cmd_x, 0.0);
	eq(velcom.cmd_th, 0.0);		
}


VelController::Active {     	
	eq(duration, 1);
	if(start){
		starts(VehicleState.Holds initialPos);
		float distanceToGo;
		calcDistance(distanceToGo, initialPos.x, initialPos.y, goal_x, goal_y);
		bool done;
		testLEQ(done, distanceToGo, POSITION_ERROR);
		bool plan_ok;
		if(done == false){
			meets(VelCommander.Holds vcom);
			float cmd_x;
			float cmd_th;
			calcCommand(plan_ok, cmd_x, cmd_th, initialPos.x, initialPos.y,
		            initialPos.th, goal_x, goal_y, 0.0);
	        	    eq(vcom.cmd_x, cmd_x);
	        	    eq(vcom.cmd_th, cmd_th);
			    meets(VelController.Active s);
			    eq(goal_x,s.goal_x);
			    eq(goal_y,s.goal_y);
		}

		// Force termination
		if(done == true) {
			meets(VelController.Inactive);
			ends(WaypointController.Active wp);
			eq(wp.x, goal_x);
			eq(wp.y, goal_y);
		}
		if(plan_ok == false){
			meets(VelController.Inactive s);
			ends(WaypointController.Active);
		}
	}
}


