/*
 * pr2.rules.nddl
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

float OPEN_GRIPPER_GAP = 0.10;
float OPEN_GRIPPER_FORCE = 100.0;

float CLOSED_GRIPPER_GAP = 0.03;
float CLOSED_GRIPPER_FORCE = 100.0;



/**
 * All behaviors will oscillate between active and inactive
 */
Behavior::Inactive{
  met_by(Active);
  meets(Active);
}

Behavior::Active{
  met_by(Inactive);
  meets(Inactive);
}

/**
 * This will be a decomposition of things to do cleaning. We will require the robot
 * to be at the target position within some error.
 */
CleanBehavior::Active{
  // If the target is bound then generate behavior to accomplish goal
  if(x){
    if(y) {
      if(th) {	 
	// While cleaning, we expect to be at the desired location.
	contained_by(WaypointController.Inactive wp);
	eq(wp.desX, x);
	eq(wp.desY, y);
	eq(wp.desTh, th);
      }
    }
  }

  // To be proactive, start the behavior as soon as you can. We do this by generating an action
  // which the agent will start
  starts(Actions.Event);

  contains(ArmController.Inactive f_racs);
  contains(ArmController.Inactive s_racs);
  contains(ArmController.Inactive grip_racs);
  //contains(ArmController.Inactive f_lacs);
  //contains(ArmController.Inactive s_lacs);

  f_racs before s_racs;
  s_racs before grip_racs;
  //f_lacs before s_lacs;

  eq(f_racs.object._isLeft, false);
  eq(s_racs.object._isLeft, false);
  eq(grip_racs.object._isLeft, false);
  //eq(f_lacs.object._isLeft, true);
  //eq(s_lacs.object._isLeft, true);

  eq(f_racs.desTurretAngle,.1);
  eq(f_racs.desShoulderLiftAngle,-1);
  eq(f_racs.desUpperarmRollAngle,0.3);
  eq(f_racs.desElbowAngle,0.3);
  eq(f_racs.desForearmRollAngle,0.2);
  eq(f_racs.desWristPitchAngle,0.5);
  eq(f_racs.desWristRollAngle,0);
  eq(f_racs.desGripperForceCmd,OPEN_GRIPPER_FORCE);
  eq(f_racs.desGripperGapCmd,OPEN_GRIPPER_GAP);

 //  eq(f_lacs.desTurretAngle,0);
//   eq(f_lacs.desShoulderLiftAngle,-.4);
//   eq(f_lacs.desUpperarmRollAngle,0);
//   eq(f_lacs.desElbowAngle,0);
//   eq(f_lacs.desForearmRollAngle,0);
//   eq(f_lacs.desWristPitchAngle,0);
//   eq(f_lacs.desWristRollAngle,0);
//   eq(f_lacs.desGripperForceCmd,0);
//   eq(f_lacs.desGripperGapCmd,0);

  if(start) {

    bool graspPosOk;
    
    calcGraspPosition(graspPosOk, 
		      0.0, 0.0, 0.0,
		      rot1_1, rot1_2, rot1_3,
		      rot2_1, rot2_2, rot2_3,
		      rot3_1, rot3_2, rot3_3,
		      trans_1, trans_2, trans_3);
    if(graspPosOk == true) {
      bool invKinOk;
      
      //now we have to figure out to get there
      calcArmInverseKinematics(invKinOk,
			       rot1_1, rot1_2, rot1_3,
			       rot2_1, rot2_2, rot2_3,
			       rot3_1, rot3_2, rot3_3,
			       trans_1, trans_2, trans_3,
			       s_racs.desTurretAngle,
			       s_racs.desShoulderLiftAngle,
			       s_racs.desUpperarmRollAngle,
			       s_racs.desElbowAngle,
			       s_racs.desForearmRollAngle,
			       s_racs.desWristPitchAngle,
			       s_racs.desWristRollAngle);
      eq(s_racs.desGripperForceCmd,OPEN_GRIPPER_FORCE);
      eq(s_racs.desGripperGapCmd,OPEN_GRIPPER_GAP);
    }
    eq(s_racs.desTurretAngle,grip_racs.desTurretAngle);
    eq(s_racs.desShoulderLiftAngle,grip_racs.desShoulderLiftAngle);
    eq(s_racs.desUpperarmRollAngle,grip_racs.desUpperarmRollAngle);
    eq(s_racs.desElbowAngle,grip_racs.desElbowAngle);
    eq(s_racs.desForearmRollAngle,grip_racs.desForearmRollAngle);
    eq(s_racs.desWristPitchAngle,grip_racs.desWristPitchAngle);
    eq(s_racs.desWristRollAngle, grip_racs.desWristRollAngle);
    eq(grip_racs.desGripperForceCmd, CLOSED_GRIPPER_FORCE);
    eq(grip_racs.desGripperGapCmd, CLOSED_GRIPPER_GAP);  
  }
				     
  //TODO - need to actually close the gripper last
		    
 //  eq(s_racs.desTurretAngle,0);
//   eq(s_racs.desShoulderLiftAngle,0);
//   eq(s_racs.desUpperarmRollAngle,0);
//   eq(s_racs.desElbowAngle,0);
//   eq(s_racs.desForearmRollAngle,0);
//   eq(s_racs.desWristPitchAngle,0);
//   eq(s_racs.desWristRollAngle,0);
//   eq(s_racs.desGripperForceCmd,0);
//   eq(s_racs.desGripperGapCmd,0);

//   eq(s_lacs.desTurretAngle,0);
//   eq(s_lacs.desShoulderLiftAngle,0);
//   eq(s_lacs.desUpperarmRollAngle,0);
//   eq(s_lacs.desElbowAngle,0);
//   eq(s_lacs.desForearmRollAngle,0);
//   eq(s_lacs.desWristPitchAngle,0);
//   eq(s_lacs.desWristRollAngle,0);
//   eq(s_lacs.desGripperForceCmd,0);
//   eq(s_lacs.desGripperGapCmd,0);

 //  ArmController nacs;
  
//   foreach(nac in nacs) {
//     // There should be an inactive state of interest
//     contains(nac.Inactive ract);
//     eq(ract.desTurretAngle,0.0);
//     eq(ract.desShoulderLiftAngle,0.0);
//     eq(ract.desUpperarmRollAngle,0.0);
//     eq(ract.desElbowAngle,0.0);
//     eq(ract.desForearmRollAngle,0.0);
//     eq(ract.desWristPitchAngle,0.0);
//     eq(ract.desWristRollAngle,0.0);
//     eq(ract.desGripperForceCmd,0.0);
//     eq(ract.desGripperGapCmd,0.0);
//   }

}

WaypointController::Inactive {
  met_by(Active p);

  // If desired values are set, then they are used to bind parameters of the
  // predecessor to accomplish the desired position.
  if(desX){
    if(desY) {
      if(desTh) {
	eq(p.x, desX);
	eq(p.y, desY);
	eq(p.th, desTh);
      }
    }
  }

  // Require actual and desired values to be within some tolerance
  addEq(x, [-1.5, 1.5], desX);
  addEq(y, [-1.5, 1.5], desY);
  //no theta test for now
  float dt;
  calcAngleDiff(dt, th, desTh);
  addEq(dt, [-.25, .25], 0);

  //calcAngleDiff(dt, currentPos.th, goal_th);
  
  // We will bind position values based on vehicle state timeline. We wait till the start time
  // is bound before linking in to the vehicle state.
  if(start){
    starts(VehicleState.Holds pos);
    eq(x, pos.x);
    eq(y, pos.y);
    eq(th, pos.th);

    contains(Actions.StopTheBase);
  }
}

WaypointController::Active {

  if(object.mode == Internal) {
    contains(Actions.Event startEvent);
    startEvent starts(VehicleState.Holds vs);

    // Test if there is to the goal from the current position. We use the vehicle state at the
    // current position rather than just picking up the prior values from the start of this active
    // tokens temporal scope because in the event of a failure in the plan, we can regenerate the
    // path from current position
    bool plan_ok;
    calcGlobalPath(plan_ok, vs.x, vs.y, x, y);

    // If there is a path, then trigger the velocity controller into
    // an active state
    if(plan_ok == true){
      startEvent before (Actions.SetVelocityCommands vc);
      eq(vc.goal_x, x);
      eq(vc.goal_y, y);
      eq(vc.goal_th, th);
      contains vc;
    }

    // if there is no path, then terminate the active state. Termination will
    // result in a successor that is not where we expected it to be!
    if(plan_ok == false){
      ends startEvent;
    }
  }   

  contained_by(ArmController.Inactive f_racs);
  contained_by(ArmController.Inactive f_lacs);

  eq(f_racs.object._isLeft, false);
  eq(f_lacs.object._isLeft, true);

//   eq(f_racs.desTurretAngle,-.9);
//   eq(f_racs.desShoulderLiftAngle,1.22);
//   eq(f_racs.desUpperarmRollAngle,0);
//   eq(f_racs.desElbowAngle,-.45);
//   eq(f_racs.desForearmRollAngle,0);
//   eq(f_racs.desWristPitchAngle,0);
//   eq(f_racs.desWristRollAngle,0);
//   eq(f_racs.desGripperForceCmd,0);
//   eq(f_racs.desGripperGapCmd,0);

//   eq(f_lacs.desTurretAngle,.9);
//   eq(f_lacs.desShoulderLiftAngle,1.22);
//   eq(f_lacs.desUpperarmRollAngle,0);
//   eq(f_lacs.desElbowAngle,-.45);
//   eq(f_lacs.desForearmRollAngle,0);
//   eq(f_lacs.desWristPitchAngle,0);
//   eq(f_lacs.desWristRollAngle,0);
//   eq(f_lacs.desGripperForceCmd,0);
//   eq(f_lacs.desGripperGapCmd,0);

  eq(f_racs.desTurretAngle,0);
  eq(f_racs.desShoulderLiftAngle,0);
  eq(f_racs.desUpperarmRollAngle,0);
  eq(f_racs.desElbowAngle,0);
  eq(f_racs.desForearmRollAngle,0);
  eq(f_racs.desWristPitchAngle,0);
  eq(f_racs.desWristRollAngle,0);
  eq(f_racs.desGripperForceCmd,CLOSED_GRIPPER_FORCE);
  eq(f_racs.desGripperGapCmd,CLOSED_GRIPPER_GAP);

  eq(f_lacs.desTurretAngle,0);
  eq(f_lacs.desShoulderLiftAngle,0);
  eq(f_lacs.desUpperarmRollAngle,0);
  eq(f_lacs.desElbowAngle,0);
  eq(f_lacs.desForearmRollAngle,0);
  eq(f_lacs.desWristPitchAngle,0);
  eq(f_lacs.desWristRollAngle,0);
  eq(f_lacs.desGripperForceCmd,CLOSED_GRIPPER_FORCE);
  eq(f_lacs.desGripperGapCmd,CLOSED_GRIPPER_GAP);

  //temporalDistance(f_racs.start, [1 +inf], start);
  //temporalDistance(f_lacs.start, [1 +inf], start);

 //  ArmController acs;
  
//   foreach(ac in acs) {
//     contained_by(ac.Inactive ract);
//     eq(ract.desTurretAngle,.9);
//     eq(ract.desShoulderLiftAngle,1.14);
//     eq(ract.desUpperarmRollAngle,0);
//     eq(ract.desElbowAngle,-.45);
//     eq(ract.desForearmRollAngle,0);
//     eq(ract.desWristPitchAngle,0);
//     eq(ract.desWristRollAngle,0);
//     eq(ract.desGripperForceCmd,0);
//     eq(ract.desGripperGapCmd,0);
//     temporalDistance(ract.start, [1 +inf], start);
//   }
}


HandWave::Active{
  // Be at the desired location if specified. Do not be moving. If no location specified
  // then the location will be unconstrained, but we will still be required to be stationary
  contained_by(WaypointController.Inactive wp);
  eq(wp.desX, x);
  eq(wp.desY, y);
  eq(wp.desTh, th);

  contains(ArmController.Inactive right);
  contains(ArmController.Inactive left);
 
  eq(right.object._isLeft, false);
  eq(left.object._isLeft, true);

  eq(right.desTurretAngle,.1);
  eq(right.desShoulderLiftAngle,-1);
  eq(right.desUpperarmRollAngle,0.3);
  eq(right.desElbowAngle,0.3);
  eq(right.desForearmRollAngle,0.2);
  eq(right.desWristPitchAngle,0.5);
  eq(right.desWristRollAngle,0);
  eq(right.desGripperForceCmd,OPEN_GRIPPER_FORCE);
  eq(right.desGripperGapCmd,OPEN_GRIPPER_GAP);
 
  eq(left.desTurretAngle,.1);
  eq(left.desShoulderLiftAngle,-1);
  eq(left.desUpperarmRollAngle,0.3);
  eq(left.desElbowAngle,0.3);
  eq(left.desForearmRollAngle,0.2);
  eq(left.desWristPitchAngle,0.5);
  eq(left.desWristRollAngle,0);
  eq(left.desGripperForceCmd,OPEN_GRIPPER_FORCE);
  eq(left.desGripperGapCmd,OPEN_GRIPPER_GAP);
}

/**
 * Produces Velocity Commands to bridge gap between current and desired pose.
 */
Actions::SetVelocityCommands{
  
  // Bind to prior value
  met_by(VehicleState.Holds currentPos);

  float distanceToGo;
  calcDistance(distanceToGo, currentPos.x, currentPos.y, goal_x, goal_y);
  bool donePos;
  testLEQ(donePos, distanceToGo, POSITION_ERROR);

  //testing theta
  float dt;
  calcAngleDiff(dt, currentPos.th, goal_th);
 
  float abs_dt;
  absVal(abs_dt, dt);
  
  bool doneTh; 
  testLEQ(doneTh, abs_dt, ANGLE_ERROR);

  int numDone;
  addEq(donePos, doneTh, numDone);

  bool done;
  //see if they're both done
  testEQ(done, 2, numDone);

  if(done == false){
    float cmd_x, cmd_th;
    calcCommand(true, cmd_x, cmd_th, currentPos.x, currentPos.y, currentPos.th, goal_x, goal_y, goal_th);

    starts(VelCommander.Holds vc);
    eq(vc.cmd_x, cmd_x);
    eq(vc.cmd_th, cmd_th);

    // Pass arguments to successor
    before(Actions.SetVelocityCommands s);
    eq(goal_x,s.goal_x);
    eq(goal_y,s.goal_y);
    eq(goal_th,s.goal_th);
  }

  if(done == true){
    ends(WaypointController.Active wp);
    eq(goal_x, wp.x);
    eq(goal_y, wp.y);
    eq(goal_th, wp.th); 
  }
}

/**
 * Stops the base
 */
Actions::StopTheBase{
    starts(VelCommander.Holds vc);
    eq(vc.cmd_x, 0.0);
    eq(vc.cmd_th, 0.0);
}

ArmController::Inactive {
  met_by(Active p);
  eq(p.turretAngle,desTurretAngle);
  eq(p.shoulderLiftAngle,desShoulderLiftAngle);
  eq(p.upperarmRollAngle,desUpperarmRollAngle);
  eq(p.elbowAngle,desElbowAngle);
  eq(p.forearmRollAngle,desForearmRollAngle);
  eq(p.wristPitchAngle,desWristPitchAngle);
  eq(p.wristRollAngle,desWristRollAngle);
  eq(p.gripperForceCmd,desGripperForceCmd);
  eq(p.gripperGapCmd,desGripperGapCmd);

  //checking desired
  addEq(acTurretAngle, [-.15 , .15], desTurretAngle);
  addEq(acShoulderLiftAngle, [-.15 , .15], desShoulderLiftAngle);
  addEq(acUpperarmRollAngle,  [-.15 , .15], desUpperarmRollAngle);
  addEq(acElbowAngle,  [-.15 , .15], desElbowAngle);
  addEq(acForearmRollAngle,  [-.15 , .15], desForearmRollAngle);
  addEq(acWristPitchAngle, [-.15 , .15], desWristPitchAngle);
  addEq(acWristRollAngle,  [-.15 , .15], desWristRollAngle);
  addEq(acGripperForceCmd,  [-25 , 25], desGripperForceCmd);
  addEq(acGripperGapCmd,  [-.03 , .03], desGripperGapCmd);

}

ArmController::Active {
  contained_by(WaypointController.Inactive wp);
  met_by(Inactive p);
  meets(Inactive s);
}

/**
 * FOR SIMULATION ONLY
 */
ArmController::Active {
  if(object.mode == Internal){
    eq(duration, 10); // Any transition will take 10 ticks. Total hack!
    starts(Actions.Event);
  }
}

