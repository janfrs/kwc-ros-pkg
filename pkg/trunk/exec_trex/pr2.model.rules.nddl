/*
 * pr2.rules.nddl
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


/**
 * All behaviors will oscillate between active and inactive
 */
Behavior::Inactive{
  met_by(Active);
  meets(Active);
}

Behavior::Active{
  met_by(Inactive);
  meets(Inactive);
}

/**
 * This will be a decomposition of things to do cleaning. We will require the robot
 * to be at the target position within some error.
 */
CleanBehavior::Active{
  // If the target is bound then generate behavior to accomplish goal
  if(x){
    if(y){	 
      // While cleaning, we expect to be at the desired location.
      contained_by(WaypointController.Inactive wp);
      eq(wp.desX, x);
      eq(wp.desY, y);
    }
  }

  // To be proactive, start the behavior as soon as you can. We do this by generating an action
  // which the agent will start
  starts(Actions.Event);

  // For now, we will simply do nothing for 10 ticks
  eq(duration, 10);
}

WaypointController::Inactive {
  met_by(Active p);

  // If desired values are set, then they are used to bind parameters of the
  // predecessor to accomplish the desired position.
  if(desX){
    if(desY){
      eq(p.x, desX);
      eq(p.y, desY);
    }
  }

  // We will bind position values based on vehicle state timeline. We wait till the start time
  // is bound before linking in to the vehicle state.
  if(start){
    starts(VehicleState.Holds pos);
    eq(x, pos.x);
    eq(y, pos.y);
  }
}

WaypointController::Active {

  if(object.mode == Internal) {
    contains(Actions.Event startEvent);
    startEvent starts(VehicleState.Holds vs);

    // Test if there is to the goal from the current position. We use the vehicle state at the
    // current position rather than just picking up the prior values from the start of this active
    // tokens temporal scope because in the event of a failure in the plan, we can regenerate the
    // path from current position
    bool plan_ok;
    calcGlobalPath(plan_ok, vs.x, vs.y, x, y);

    // If there is a path, then trigger the velocity controller into
    // an active state
    if(plan_ok == true){
      startEvent meets(Actions.SetVelocityCommands vc);
      eq(vc.goal_x, x);
      eq(vc.goal_y, y);
    }

    // if there is no path, then terminate the active state. Termination will
    // result in a successor that is not where we expected it to be!
    if(plan_ok == false){
      ends startEvent;
    }
  }
}

/**
 * Implementation for Velocity Controller. Produces Velocity Commands to 
 * bridge gap between current and desired pose.
 */
Actions::SetVelocityCommands{
  // Controller will operate at 1 Hz (cycles per tick)
  eq(duration, 1);
  
  // Bind to prior value
  met_by(VehicleState.Holds currentPos);

  float distanceToGo;
  calcDistance(distanceToGo, currentPos.x, currentPos.y, goal_x, goal_y);
  bool done;
  testLEQ(done, distanceToGo, POSITION_ERROR);

  if(done == false){
    float cmd_x, cmd_th;
    calcCommand(true, cmd_x, cmd_th, currentPos.x, currentPos.y,
		currentPos.th, goal_x, goal_y, 0.0);

    starts(VelCommander.Holds vc);
    eq(vc.cmd_x, cmd_x);
    eq(vc.cmd_th, cmd_th);

    // Pass arguments to successor
    meets(Actions.SetVelocityCommands s);
    eq(goal_x,s.goal_x);
    eq(goal_y,s.goal_y);
  }

  if(done == true){
    ends(WaypointController.Active wp);
    eq(goal_x, wp.x);
    eq(goal_y, wp.y);

    meets(VelCommander.Holds vc);
    eq(vc.cmd_x, 0.0);
    eq(vc.cmd_th, 0.0);
  }
}
