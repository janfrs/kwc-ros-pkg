/*
 * pr2.model.nddl
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Provides for all class declarations for the pr2 model
 */

#include "TREX.nddl" // TREX base classes

typedef int [0 5] PRIORITY; /* Used to assign a priority to goals */

typedef float [0.0 +inff] PFLOAT;

float POSITION_ERROR = 1.0;

float NOMINAL_SPEED = 1.0;

enum CmdResult {SUCCESS, FAILURE};

/**
 * VehicleState will capture position and orientation.
 */
class VehicleState extends AgentTimeline {
	predicate Holds{
		PFLOAT x;
		PFLOAT y;
		float th;
	}

	VehicleState(Mode _mode){
		super(_mode, "Holds");
	}
};

/**
 * Encapsulate Behaviors that have a state of active or inactive
 */
class Behavior extends AgentTimeline {
	predicate Inactive{}

	predicate Active{}

	Behavior(Mode _mode){
		super(_mode, "Inactive");
	}
};

/**
 * WaypointController will handle active control of vehicle to accomplish 
 * a waypoint. This maps to the wave front player in the 2D nav stack.
 */
class WaypointController extends Behavior {
  predicate Inactive{
    PFLOAT x;
    PFLOAT y;
    PFLOAT desX;
    PFLOAT desY;

    // Require actual and desired values to be within some tolerance
    addEq(x, [-1.0, 1.0], desX);
    addEq(y, [-1.0, 1.0], desY);
  }

  // Parameters to get to the target
  predicate Active{
    PFLOAT x;
    PFLOAT y;
  }

  WaypointController(Mode _mode){
    super(_mode);
  }
};

/**
 * A PR2 state variable for the commanded velocities. Will be planned by the waypoint controller
 * and dispatched to lower level controllers external to the agent
 */
class VelCommander extends AgentTimeline {

      predicate Holds {
      	 float cmd_x;
	 float cmd_th;	
      }     

      VelCommander(Mode _mode){
         super(_mode);
      }
};

/**
 * A behavior to Clean something, at a given location. This will drive navigation and arm control.
 */
class CleanBehavior extends Behavior {

  /**
   * Inactive
   */
  predicate Inactive{}

  /**
   * When active, it will clean at a specified location in space
   */
  predicate Active{
    PFLOAT x;
    PFLOAT y;
    PRIORITY priority; // 0 is highest priority
  }

  CleanBehavior(Mode _mode){
    super(_mode);
  }
};

/**
 * Actions are since they have the unique properties that:
 * 1. They are explicitly started by the agent when they become startable
 * 2. Their time bound is always in the future until started.
 */
class Actions extends AgentActions{

  /**
   * An event is used as a generic hook to start things
   */
  predicate Event{eq(duration, 1);}

  /**
   * Set velocity commands for a given goal position using local planning
   */
  predicate SetVelocityCommands{
    PFLOAT goal_x;
    PFLOAT goal_y;
    // Controller will operate at 1 Hz (cycles per tick)
    eq(duration, 1);
    // Constraint to be in the mission
    precedes(end, missionEnd);
  }

  /**
   * Stop the base
   */
  predicate StopTheBase{}

};

class ArmController extends AgentTimeline {

  bool _isLeft;
  
  predicate Inactive{
   
    float acTurretAngle;
    float acShoulderLiftAngle;
    float acUpperarmRollAngle;
    float acElbowAngle;
    float acForearmRollAngle;
    float acWristPitchAngle;
    float acWristRollAngle;
    float acGripperForceCmd;
    float acGripperGapCmd;

    float desTurretAngle;
    float desShoulderLiftAngle;
    float desUpperarmRollAngle;
    float desElbowAngle;
    float desForearmRollAngle;
    float desWristPitchAngle;
    float desWristRollAngle;
    float desGripperForceCmd;
    float desGripperGapCmd;
  }

  predicate Active {

    float turretAngle;
    float shoulderLiftAngle;
    float upperarmRollAngle;
    float elbowAngle;
    float forearmRollAngle;
    float wristPitchAngle;
    float wristRollAngle;
    float gripperForceCmd;
    float gripperGapCmd;
  }
  
  ArmController(Mode _mode, bool isLeft){
    super(_mode, "Inactive");
    _isLeft = isLeft;
  }
};
 

