Index: server/rendering/UserCamera.hh
===================================================================
--- server/rendering/UserCamera.hh	(revision 6915)
+++ server/rendering/UserCamera.hh	(working copy)
@@ -52,7 +52,7 @@
     public: void Load( XMLConfigNode *node );
 
     /// \brief Initialize
-    public: void Init();
+    public: void Init( GLWindow *parentWindow );
 
     /// \brief Update
     public: void Update();
@@ -71,6 +71,9 @@
 
     /// \brief Get the average FPS
     public: virtual float GetAvgFPS();
+    
+    /// \brief Save frame.
+    private: void SaveFrame();
 
     /// Pointer to the viewport
     protected: Ogre::Viewport *viewport;
@@ -80,6 +83,10 @@
 
     private: std::string name;
     private: static unsigned int cameraCount;
+    private: unsigned int windowWidth;
+    private: unsigned int windowHeight;
+    private: bool loaded;
+    private: bool saveFramesDefault;
   };
 }
 
Index: server/rendering/UserCamera.cc
===================================================================
--- server/rendering/UserCamera.cc	(revision 6915)
+++ server/rendering/UserCamera.cc	(working copy)
@@ -25,6 +25,7 @@
  */
 
 #include <Ogre.h>
+#include <OgreImageCodec.h>
 #include <sstream>
 
 #include "Global.hh"
@@ -33,16 +34,19 @@
 #include "OgreAdaptor.hh"
 #include "OgreCreator.hh"
 #include "UserCamera.hh"   
+#include "OgreVisual.hh"
+#include "OgreFrameListener.hh"
 
 using namespace gazebo;
 
 ////////////////////////////////////////////////////////////////////////////////
 /// Constructor
 UserCamera::UserCamera(GLWindow *parentWindow)
-  : OgreCamera("UserCamera")
+   : OgreCamera("User"), windowWidth(0), windowHeight(0), loaded(false)
+//  : OgreCamera("UserCamera")
 {
-  this->window = OgreCreator::CreateWindow(parentWindow, 
-                     parentWindow->w(), parentWindow->h());
+//  this->window = OgreCreator::CreateWindow(parentWindow, 
+//                     parentWindow->w(), parentWindow->h());
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -56,15 +60,24 @@
 void UserCamera::Load(XMLConfigNode *node)
 {
   OgreCamera::LoadCam(node);
-
   this->SetClipDist(0.1, 100);
   this->SetFOV( DTOR(60) );
+  this->saveFramesDefault = node->GetBool("startSaveFrames",false,0);
+  loaded = true;
 }
 
 ////////////////////////////////////////////////////////////////////////////////
 /// Initialize
-void UserCamera::Init()
+void UserCamera::Init(GLWindow *parentWindow)
 {
+  if (!loaded) {
+    Load(NULL);
+  }
+
+
+  this->window = OgreCreator::CreateWindow(parentWindow, 
+                     parentWindow->w(), parentWindow->h());
+
   this->SetCameraSceneNode( OgreAdaptor::Instance()->sceneMgr->getRootSceneNode()->createChildSceneNode( this->GetCameraName() + "_SceneNode") );
 
   OgreCamera::InitCam();
@@ -75,6 +88,8 @@
   this->SetAspectRatio( Ogre::Real(this->viewport->getActualWidth()) / Ogre::Real(this->viewport->getActualHeight()) );
 
   this->viewport->setVisibilityMask(this->visibilityMask);
+  
+  this->saveFrames = this->saveFramesDefault;
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -84,6 +99,33 @@
   OgreCamera::UpdateCam();
 
   OgreAdaptor::Instance()->UpdateWindow(this->window, this);
+
+  if (this->saveFrames && this->window)
+  {
+    unsigned int w = this->window->getWidth(), h = this->window->getHeight();
+    if (w != this->windowWidth || h != this->windowHeight || !this->saveFrameBuffer) 
+    {
+      if (this->saveFrameBuffer)
+	delete[] this->saveFrameBuffer;
+      this->saveFrameBuffer = new unsigned char[w * h * 3];
+      this->windowWidth = w;
+      this->windowHeight = h;
+    }
+    unsigned char* tmpBuffer = new unsigned char[w * h * 3];
+    glReadBuffer(GL_BACK);
+    glPixelStorei(GL_PACK_ALIGNMENT, 1);
+    glReadPixels(0, 0, w, h, GL_RGB, GL_UNSIGNED_BYTE, tmpBuffer);
+    unsigned int rowLength = w * 3;
+    for (unsigned int i = 0; i < h; i++) {
+      memcpy(&this->saveFrameBuffer[(h - i - 1) * rowLength],
+	     &tmpBuffer[i * rowLength], rowLength);
+    }
+
+
+
+    this->SaveFrame();
+    delete[] tmpBuffer;
+  }
 }
 
 
@@ -119,3 +161,58 @@
 
   return avgFPS;
 }
+
+////////////////////////////////////////////////////////////////////////////////
+/// Save a frame
+void UserCamera::SaveFrame()
+{
+  if (!saveFrameBuffer || this->windowWidth == 0 || this->windowHeight == 0)
+    return;
+  
+  std::ostringstream sstream;
+  Ogre::ImageCodec::ImageData *imgData;
+  Ogre::Codec * pCodec;
+  size_t size, pos;
+
+  // Create image data structure
+  imgData  = new Ogre::ImageCodec::ImageData();
+
+  imgData->width = this->windowWidth;
+  imgData->height = this->windowHeight;
+  imgData->depth = 1;
+  imgData->format = Ogre::PF_B8G8R8;
+  size = imgData->width * imgData->height * 3;
+
+  // Wrap buffer in a chunk
+  Ogre::MemoryDataStreamPtr stream(new Ogre::MemoryDataStream( this->saveFrameBuffer, size, false));
+
+  char tmp[1024];
+  if (!this->savePathname.empty())
+  {
+    sprintf(tmp, "%s/genericCam-%04d.jpg", this->savePathname.c_str(), this->saveCount);
+  }
+  else
+  {
+    sprintf(tmp, "genericCam-%04d.jpg", this->saveCount);
+  }
+
+
+  // Get codec
+  Ogre::String filename = tmp;
+  pos = filename.find_last_of(".");
+  Ogre::String extension;
+
+  while (pos != filename.length() - 1)
+    extension += filename[++pos];
+
+  // Get the codec
+  pCodec = Ogre::Codec::getCodec(extension);
+
+  // Write out
+  Ogre::Codec::CodecDataPtr codecDataPtr(imgData);
+  pCodec->codeToFile(stream, filename, codecDataPtr);
+
+
+
+  this->saveCount++;
+}
Index: server/gui/GLWindow.hh
===================================================================
--- server/gui/GLWindow.hh	(revision 6915)
+++ server/gui/GLWindow.hh	(working copy)
@@ -63,6 +63,9 @@
     /// \brief Initalize the gui
     public: virtual void Init();
 
+    /// \brief Load the gui
+    public: virtual void Load( XMLConfigNode *node );
+
     /// \brief Update the window
     public: void Update();
 
Index: server/gui/GLFrame.cc
===================================================================
--- server/gui/GLFrame.cc	(revision 6915)
+++ server/gui/GLFrame.cc	(working copy)
@@ -107,7 +107,7 @@
 // Load the frame
 void GLFrame::Load( XMLConfigNode *node )
 {
-
+  this->glWindow->Load(node);
   if (node)
   {
     this->startPose.pos = node->GetVector3("xyz", Vector3(0,0,0));
Index: server/gui/GLWindow.hh
===================================================================
--- server/gui/GLWindow.hh	(revision 6915)
+++ server/gui/GLWindow.hh	(working copy)
@@ -63,6 +63,9 @@
     /// \brief Initalize the gui
     public: virtual void Init();
 
+    /// \brief Load the gui
+    public: virtual void Load( XMLConfigNode *node );
+
     /// \brief Update the window
     public: void Update();
 
Index: server/gui/GLWindow.cc
===================================================================
--- server/gui/GLWindow.cc	(revision 6915)
+++ server/gui/GLWindow.cc	(working copy)
@@ -68,11 +68,17 @@
   this->directionVec.x = 0;
   this->directionVec.y = 0;
   this->directionVec.z = 0;
+  this->leftMousePressed = false;
+  this->rightMousePressed = false;
+  this->middleMousePressed = false;
 
+
   this->keys.clear();
 
   if (activeWin == NULL)
     activeWin = this;
+
+  this->userCamera = new UserCamera( this );
 }
 
 
@@ -83,6 +89,14 @@
 }
 
 ////////////////////////////////////////////////////////////////////////////////
+// Load
+void GLWindow::Load( XMLConfigNode *node )
+{
+  if (node) 
+    this->userCamera->Load(node);
+}
+
+////////////////////////////////////////////////////////////////////////////////
 // Init
 void GLWindow::Init()
 {
@@ -90,11 +104,7 @@
   this->mouseDrag = false;
 
   // Create the default camera.
-  this->userCamera = new UserCamera( this );
-  this->userCamera->Load(NULL);
-  this->userCamera->Init();
-  this->userCamera->RotatePitch( DTOR(30) );
-  this->userCamera->Translate( Vector3(-5, 0, 1) );
+  this->userCamera->Init(this);
 
   this->activeCamera = this->userCamera;
 }
@@ -219,17 +229,20 @@
       this->activeCamera->RotateYaw(DTOR(-d.x * this->rotateAmount));
       this->activeCamera->RotatePitch(DTOR(d.y * this->rotateAmount));
     }
-    else if (this->rightMousePressed)
+    if (this->rightMousePressed)
     {
-      Model *model = dynamic_cast<Model*>(Simulator::Instance()->GetSelectedEntity());
-      if (model)
-      {
-        Pose3d pose = model->GetPose();
-        pose.pos.y -= d.x * 0.05;
-        pose.pos.x -= d.y * 0.05;
-        model->SetPose(pose);
-      }
+      Vector2<int> d = this->mousePos - this->prevMousePos;
+      this->directionVec.x = 0;
+      this->directionVec.y =  d.x * this->moveAmount;
+      this->directionVec.z =  d.y * this->moveAmount;
     }
+    if (this->middleMousePressed)
+    {
+      Vector2<int> d = this->mousePos - this->prevMousePos;
+      this->directionVec.x =  d.y * this->moveAmount;
+      this->directionVec.y =  0;
+      this->directionVec.z =  0;
+    }
 
   }
 
@@ -257,12 +270,28 @@
   std::map<int,int>::iterator iter;
   this->keys[keyNum] = 1;
 
+  // loop through the keys to find the modifiers -- swh
+  float moveAmount = this->moveAmount;
   for (iter = this->keys.begin(); iter!= this->keys.end(); iter++)
   {
     if (iter->second == 1)
     {
       switch (iter->first)
       {
+        case FL_Control_L:
+        case FL_Control_R:
+          moveAmount = this->moveAmount * 10;
+          break;
+      }
+    }
+  }
+
+  for (iter = this->keys.begin(); iter!= this->keys.end(); iter++)
+  {
+    if (iter->second == 1)
+    {
+      switch (iter->first)
+      {
         case '=':
         case '+':
           this->moveAmount *= 2;
