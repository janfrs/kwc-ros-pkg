Index: src/inertia.hpp
===================================================================
--- src/inertia.hpp	(revision 29562)
+++ src/inertia.hpp	(working copy)
@@ -22,24 +22,26 @@
 #ifndef KDLINERTIA_HPP
 #define KDLINERTIA_HPP
 
+#include "inertiamatrix.hpp"
+
 namespace KDL {
 
-/**
-This class offers the inertia-structure of a body
-*/
-class Inertia{
-public:
-    Inertia(double m=0,double Ixx=0,double Iyy=0,double Izz=0,double Ixy=0,double Ixz=0,double Iyz=0);
+	/**
+		This class offers the inertia-structure of a body
+		*/
+	class Inertia{
+		public:
+			Inertia(double m=0,double Ixx=0,double Iyy=0,double Izz=0,double Ixy=0,double Ixz=0,double Iyz=0);
 
     static inline Inertia Zero(){
         return Inertia(0,0,0,0,0,0,0);
     };
+            ~Inertia();
+		public:
+			double m;
+			InertiaMatrix I;
+	};
 
-    ~Inertia();
-private:
-    double m,Ixx, Iyy, Izz, Ixy, Ixz, Iyz;
-};
-
 }
 
 #endif
Index: src/frames_io.hpp
===================================================================
--- src/frames_io.hpp	(revision 29562)
+++ src/frames_io.hpp	(working copy)
@@ -80,6 +80,7 @@
 #include "frames.hpp"
 #include "jntarray.hpp"
 #include "jacobian.hpp"
+#include "inertiamatrix.hpp"
 
 namespace KDL {
 
@@ -96,6 +97,7 @@
     std::ostream& operator << (std::ostream& os,const Vector2& v);
     std::ostream& operator << (std::ostream& os,const Rotation2& R);
     std::ostream& operator << (std::ostream& os,const Frame2& T);
+		std::ostream& operator << (std::ostream& os,const InertiaMatrix& I);
 
 
 
Index: src/inertiamatrix.cpp
===================================================================
--- src/inertiamatrix.cpp	(revision 0)
+++ src/inertiamatrix.cpp	(revision 0)
@@ -0,0 +1,28 @@
+
+#include "inertiamatrix.hpp"
+
+namespace KDL
+{
+	InertiaMatrix::InertiaMatrix(double Ixx,double Iyy,double Izz,double Ixy,double Ixz,double Iyz)
+	{
+		data[0] = Ixx, data[4] = Iyy, data[8] = Izz;
+		data[1] = data[3] = Ixy;
+		data[2] = data[6] = Ixz;
+		data[5] = data[7] = Iyz;
+	}
+
+	InertiaMatrix::~InertiaMatrix()
+	{
+	}
+
+	Vector InertiaMatrix::operator*(const Vector& v) const {
+		// Complexity : 9M+6A
+		return Vector(
+				data[0]*v.data[0] + data[1]*v.data[1] + data[2]*v.data[2],
+				data[3]*v.data[0] + data[4]*v.data[1] + data[5]*v.data[2],
+				data[6]*v.data[0] + data[7]*v.data[1] + data[8]*v.data[2]
+				);
+	}
+
+}
+
Index: src/segment.cpp
===================================================================
--- src/segment.cpp	(revision 29562)
+++ src/segment.cpp	(working copy)
@@ -18,19 +18,22 @@
 // Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 
 #include "segment.hpp"
+#include <stdio.h>
 
 namespace KDL {
 
-    Segment::Segment(const Joint& _joint, const Frame& _f_tip, const Inertia& _M):
+    Segment::Segment(const Joint& _joint, const Frame& _f_tip, const Inertia& _M, const Vector& _r_cm):
         joint(_joint),M(_M),
-        f_tip(_f_tip)
+        f_tip(_f_tip),r_cm(_r_cm)
     {
+//			r_cm = _r_cm;
     }
 
     Segment::Segment(const Segment& in):
         joint(in.joint),M(in.M),
-        f_tip(in.f_tip)
+        f_tip(in.f_tip),r_cm(in.r_cm)
     {
+//			r_cm=in.r_cm;
     }
 
     Segment& Segment::operator=(const Segment& arg)
@@ -38,6 +41,7 @@
         joint=arg.joint;
         M=arg.M;
         f_tip=arg.f_tip;
+				r_cm=arg.r_cm;
         return *this;
     }
 
Index: src/chainidsolver_newtoneuler.hpp
===================================================================
--- src/chainidsolver_newtoneuler.hpp	(revision 0)
+++ src/chainidsolver_newtoneuler.hpp	(revision 0)
@@ -0,0 +1,35 @@
+#ifndef KDLCHAINIDSOLVER_NEWTONEULER_HPP
+#define KDLCHAINIDSOLVER_NEWTONEULER_HPP
+
+#include "chainidsolver.hpp"
+
+namespace KDL {
+
+	/**
+	 * Implementation of inverse dynamics using iterative newton-euler
+	 * formulation. 
+	 *
+	 */
+	class ChainIdSolver_NE : public ChainIdSolver
+	{
+		public:
+			/**
+			 * Constructor of the solver. The chain provides both kinematic and dynamic parameters.
+			 */
+			ChainIdSolver_NE(const Chain &chain);
+			~ChainIdSolver_NE();
+
+			virtual int InverseDynamics(const JntArray &q, const JntArray &q_dot, const JntArray &q_dotdot, Vector* torque);
+
+		private:
+			const Chain chain;
+			/**
+			 * Array of constraint forces for each of the joints.
+			 */
+			Vector* forces;
+	};
+
+}
+
+#endif
+
Index: src/inertia.cpp
===================================================================
--- src/inertia.cpp	(revision 29562)
+++ src/inertia.cpp	(working copy)
@@ -23,14 +23,15 @@
 
 namespace KDL {
 
-    Inertia::Inertia(double _m,double _Ixx,double _Iyy,double _Izz,double _Ixy,double _Ixz,double _Iyz):
-        m(m),Ixx(_Ixx),Iyy(_Iyy),Izz(_Izz),
-        Ixy(_Ixy),Ixz(_Ixz),Iyz(_Iyz)
-    {
+	Inertia::Inertia(double m,double Ixx,double Iyy,double Izz,double Ixy,double Ixz,double Iyz)
+	{
+		this->m = m;
+		this->I = InertiaMatrix(Ixx,Iyy,Izz,Ixy,Ixz,Iyz);
+	}
 
-    }
+	Inertia::~Inertia()
+	{
+	}
 
-    Inertia::~Inertia()
-    {
-    }
 }
+
Index: src/frames_io.cpp
===================================================================
--- src/frames_io.cpp	(revision 29562)
+++ src/frames_io.cpp	(working copy)
@@ -126,6 +126,22 @@
     return os;
 }
 
+std::ostream& operator << (std::ostream& os,const InertiaMatrix& I)
+{
+	os << "[";
+	for (int i=0;i<3;i++)
+	{
+		os << std::setw(KDL_FRAME_WIDTH) << I.data[3*i+0] << "," <<
+			std::setw(KDL_FRAME_WIDTH) << I.data[3*i+1] << "," <<
+			std::setw(KDL_FRAME_WIDTH) << I.data[3*i+2];
+		if (i<2)
+			os << ";"<< std::endl << " ";
+		else
+			os << "]";
+	}
+	return os;
+}
+
 std::istream& operator >> (std::istream& is,Vector& v)
 {   IOTrace("Stream input Vector (vector or ZERO)");
     char storage[10];
Index: src/bindings/python/kinfam.sip
===================================================================
--- src/bindings/python/kinfam.sip	(revision 29562)
+++ src/bindings/python/kinfam.sip	(working copy)
@@ -238,7 +238,7 @@
 #include <chainfksolver.hpp>
 using namespace KDL;
 %End
-    virtual int JntToCart(const JntArray& q_in, Frame& p_out)=0;
+    virtual int JntToCart(const JntArray& q_in, Frame& p_out, int segmentNr=-1)=0;
 };
 
 class ChainFkSolverVel
@@ -259,7 +259,7 @@
 
 public:
     ChainFkSolverPos_recursive(const Chain& chain);
-    virtual int JntToCart(const JntArray& q_in, Frame& p_out);
+    virtual int JntToCart(const JntArray& q_in, Frame& p_out, int segmentNr=-1);
 };
 
 class ChainFkSolverVel_recursive : ChainFkSolverVel
Index: src/bindings/python/dynfam.sip
===================================================================
--- src/bindings/python/dynfam.sip	(revision 0)
+++ src/bindings/python/dynfam.sip	(revision 0)
@@ -0,0 +1,18 @@
+
+
+class InertiaMatrix{
+
+%TypeHeaderCode
+#include <inertiamatrix.hpp>
+using namespace KDL;
+%End
+
+
+public:
+	InertiaMatrix(double Ixx=0,double Iyy=0,double Izz=0,double Ixy=0,double Ixz=0,double Iyz=0);
+	static InertiaMatrix Zero();
+	Vector operator*(const Vector& v) const /Factory/;
+
+};
+
+
Index: src/bindings/python/CMakeLists.txt
===================================================================
--- src/bindings/python/CMakeLists.txt	(revision 29562)
+++ src/bindings/python/CMakeLists.txt	(working copy)
@@ -70,7 +70,10 @@
 #ENDIF (BINDINGS_GLOBAL_INSTALL)
 
 
-# Step 4: install built libs to python's site packages
-INSTALL(FILES ${BINDINGS_LIBS} DESTINATION ${SITE_PKG_PATH})
+IF(NOT KDL_PYTHON_INSTALL_PATH)
+	# Step 4: install built libs to python's site packages
+	INSTALL(FILES ${BINDINGS_LIBS} DESTINATION ${SITE_PKG_PATH})
+ELSE(NOT KDL_PYTHON_INSTALL_PATH)
+	INSTALL(FILES ${BINDINGS_LIBS} DESTINATION ${KDL_PYTHON_INSTALL_PATH})
+ENDIF(NOT KDL_PYTHON_INSTALL_PATH)
 
-
Index: src/bindings/python/PyKDL.sip
===================================================================
--- src/bindings/python/PyKDL.sip	(revision 29562)
+++ src/bindings/python/PyKDL.sip	(working copy)
@@ -27,3 +27,4 @@
 %Include frames.sip
 %Include kinfam.sip
 %Include framevel.sip
+%Include dynfam.sip
Index: src/inertiamatrix.hpp
===================================================================
--- src/inertiamatrix.hpp	(revision 0)
+++ src/inertiamatrix.hpp	(revision 0)
@@ -0,0 +1,30 @@
+
+#ifndef KDLINERTIAMATRIX_HPP
+#define KDLINERTIAMATRIX_HPP
+
+#include "frames.hpp"
+
+//------- class for only the Inertiamatrix --------
+
+namespace KDL
+{
+	class InertiaMatrix{
+		public:
+			double data[9];
+
+			InertiaMatrix(double Ixx=0,double Iyy=0,double Izz=0,double Ixy=0,double Ixz=0,double Iyz=0);
+
+			static inline InertiaMatrix Zero(){
+				return InertiaMatrix(0,0,0,0,0,0);
+			};
+
+			KDL::Vector operator*(const KDL::Vector& v) const;
+
+			~InertiaMatrix();
+
+	};
+
+}
+
+#endif
+
Index: src/chainidsolver.hpp
===================================================================
--- src/chainidsolver.hpp	(revision 0)
+++ src/chainidsolver.hpp	(revision 0)
@@ -0,0 +1,42 @@
+#ifndef KDLCHAINIDSOLVER_HPP
+#define KDLCHAINIDSOLVER_HPP
+
+#include "jntarray.hpp"
+#include "chain.hpp"
+
+namespace KDL
+{
+
+	/**
+	 * \brief This <strong>abstract</strong> class encapsulates the inverse
+	 * dynamics solver for a KDL::Chain.
+	 *
+	 */
+	class ChainIdSolver
+	{
+		public:
+			/** 
+			 * Calculate inverse dynamics, from joint positions, velocity and acceleration
+			 * to joint torques. Handles only revolute joints.
+			 * 
+			 * @param q input joint positions
+			 * @param q_dot input joint velocities
+			 * @param q_dotdot input joint accelerations
+			 *
+			 * @param torque output joint torques
+			 * 
+			 * @return if < 0 something went wrong
+
+			 * <strong>TODO:</strong>
+			 * - add parameters for external forces and torques on each link
+			 * - add support for prismatic joints.
+			 */
+			virtual int InverseDynamics(const JntArray &q, const JntArray &q_dot, const JntArray &q_dotdot, Vector* torque)=0;
+
+			// Need functions to return the manipulator mass, coriolis and gravity matrices - Lagrangian Formulation.
+	};
+
+}
+
+#endif
+
Index: src/segment.hpp
===================================================================
--- src/segment.hpp	(revision 29562)
+++ src/segment.hpp	(working copy)
@@ -49,7 +49,8 @@
         Joint joint;
         Inertia M;
         Frame f_tip;
-
+        Vector r_cm; // Vector of center of mass from frame origin in local coordinates.
+        
     public:
         /**
          * Constructor of the segment
@@ -60,7 +61,8 @@
          * the segment, default: Frame::Identity()
          * @param M rigid body inertia of the segment, default: Inertia::Zero()
          */
-        Segment(const Joint& joint=Joint(Joint::None), const Frame& f_tip=Frame::Identity(),const Inertia& M = Inertia::Zero());
+        Segment(const Joint& joint=Joint(Joint::None), const Frame& f_tip=Frame::Identity(),const Inertia& M = Inertia::Zero(),
+								const Vector& r_cm = Vector::Zero());
         Segment(const Segment& in);
         Segment& operator=(const Segment& arg);
 
@@ -108,7 +110,18 @@
             return M;
         }
 
-        /**
+        /** 
+         * Request the location of center of mass of the segment
+         * 
+         * 
+         * @return const reference to the center of mass (vector) of the segment
+         */        
+				const Vector& getCM()const
+				{
+					return r_cm;
+				}
+        
+        /** 
          * Request the pose from the joint end to the tip of the
          *segment.
          *
Index: src/chainidsolver_newtoneuler.cpp
===================================================================
--- src/chainidsolver_newtoneuler.cpp	(revision 0)
+++ src/chainidsolver_newtoneuler.cpp	(revision 0)
@@ -0,0 +1,120 @@
+
+#include "chainidsolver_newtoneuler.hpp"
+
+
+namespace KDL
+{
+
+	ChainIdSolver_NE::ChainIdSolver_NE(const Chain &_chain):
+		chain(_chain)
+	{
+		forces = new Vector[chain.getNrOfJoints()+1];
+	}
+
+	int ChainIdSolver_NE::InverseDynamics(const JntArray &q, const JntArray &q_dot, const JntArray &q_dotdot, Vector* torque)
+	{
+		//-- source: Robot Modeling and Control (Spong,Hutchinson,Vidyasagar). Page 279.
+		int nJoints = q.rows();
+
+		Vector *omega = new Vector[nJoints+1];
+		Vector *alpha = new Vector[nJoints+1];
+		Vector *a_c = new Vector[nJoints+1];
+
+		omega[0] = Vector::Zero();
+		alpha[0] = Vector::Zero();
+		a_c[0] = Vector::Zero();
+
+		Vector a_e = Vector::Zero();
+
+		Frame _iT0 = Frame::Identity();
+		Frame _iTi_minus_one, _i_minus_oneTi;
+		Rotation _iRi_minus_one = Rotation::Identity();
+		Frame T_tip = Frame::Identity();
+
+		Vector z_i_minus_one, b_i, r, r_cm;
+		Segment link_i;
+
+		// logical joint numbering begins from 1 and index from 0.
+
+		// computing angular velocities and accelerations for each link.
+		for(int i=1;i<=nJoints;i++)
+		{
+			link_i = chain.getSegment(i-1);
+			z_i_minus_one = link_i.getJoint().JointAxis();
+
+			r_cm = link_i.getCM();
+			_iRi_minus_one = T_tip.M.Inverse();
+
+			b_i = z_i_minus_one;
+			T_tip = link_i.getFrameToTip();
+			r = T_tip.p; // I want vector in body coordinates.
+
+			_iTi_minus_one = link_i.pose(q(i-1)).Inverse();
+			_iT0 = _iTi_minus_one*_iT0;
+			_iRi_minus_one = T_tip.M*_iTi_minus_one.M * _iRi_minus_one;
+
+			omega[i] = _iRi_minus_one*omega[i-1] + b_i*q_dot(i-1);
+			alpha[i] = _iRi_minus_one*alpha[i-1] + b_i*q_dotdot(i-1) + omega[i]*b_i*q_dot(i-1);
+			a_c[i] = _iRi_minus_one*a_e + alpha[i]*r_cm + omega[i]*(omega[i]*r_cm);
+			a_e = _iRi_minus_one*a_e + alpha[i]*r + omega[i]*(omega[i]*r);
+		}
+
+		// now for joint forces and torques.
+		Vector g(0.,0.,-9.8);
+		Rotation rot, rot_g;
+		Frame T;
+
+		Inertia gen_mass;
+		InertiaMatrix I;
+		double m;
+
+		Vector *f = forces;
+		Vector *t = torque;
+		f[nJoints] = Vector::Zero();
+		t[nJoints] = Vector::Zero();
+		// _iT0 is now _nT0
+		rot_g = _iT0.M;
+		g = rot_g*g;
+
+		Vector r_iplusone_c; // Vector from o_{i+1} to c_i
+		rot = Rotation::Identity(); // should be rotation matrix for end-effector forces to coord frame of last link.
+
+		for(int i=nJoints-1;i>=0;i--)
+		{
+			link_i = chain.getSegment(i);
+			T_tip = link_i.getFrameToTip();
+			rot = T_tip.M * rot;
+			r_cm = link_i.getCM();
+
+			r = T_tip.p; // I want vector in body coordinates.
+			r_iplusone_c = r_cm-r;
+
+			gen_mass = link_i.getInertia();
+
+			I = gen_mass.I;
+			m = gen_mass.m;
+
+			T = link_i.pose(q(i));
+
+			g = rot*g;
+
+			f[i] = rot*f[i+1] + m*a_c[i+1] - m*g;
+			t[i] = rot*t[i+1] - f[i]*r_cm + (rot*f[i+1])*r_iplusone_c+I*alpha[i+1]
+				+ omega[i+1]*(I*omega[i+1]);
+
+			rot = T.M*T_tip.M.Inverse();
+		}
+
+		delete [] omega;
+		delete [] alpha;
+		delete [] a_c;
+
+		return 0;
+	}
+
+	ChainIdSolver_NE::~ChainIdSolver_NE()
+	{
+	}
+
+}
+
Index: src/joint.hpp
===================================================================
--- src/joint.hpp	(revision 29562)
+++ src/joint.hpp	(working copy)
@@ -89,8 +89,30 @@
         {
             return type;
         };
+        
+				/**
+				 * Request the Vector corresponding to the axis of a revolute joint.
+				 *
+				 * @return Vector. e.g (1,0,0) for RotX etc.
+				 */
+				Vector JointAxis() const
+				{
+					switch(type)
+					{
+						case RotX:
+							return Vector(1.,0.,0.);
+						case RotY:
+							return Vector(0.,1.,0.);
+						case RotZ:
+							return Vector(0.,0.,1.);
+						default:
+							printf("This joint type does not have an axis. Type:%d\n",type);
+							printf("Exiting...\n");
+							exit(0);
+					}
+				}
 
-        /**
+        /** 
          * Request the stringified type of the joint.
          *
          * @return const string
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 29562)
+++ CMakeLists.txt	(working copy)
@@ -29,7 +29,6 @@
 SET( PROJ_SOURCE_DIR ${Orocos-KDL_SOURCE_DIR} )
 SET( PROJ_BINARY_DIR ${Orocos-KDL_BINARY_DIR} )
 
-
 IF(NOT CMAKE_INSTALL_PREFIX)
   SET( CMAKE_INSTALL_PREFIX /usr/local/orocos CACHE PATH "Installation directory" FORCE)
   MESSAGE( STATUS "Setting installation directory to ${CMAKE_INSTALL_PREFIX}" )
diff -ur dist/kdl_export/src/utilities/error_stack.cxx ./src/utilities/error_stack.cxx
--- dist/kdl_export/src/utilities/error_stack.cxx	2007-08-20 00:33:27.000000000 -0700
+++ ./src/utilities/error_stack.cxx	2008-10-27 23:07:40.000000000 -0700
@@ -18,6 +18,7 @@
 #include <stack>
 #include <vector>
 #include <string>
+#include <cstring>
 
 namespace KDL {
 
diff -ur dist/kdl_export/src/path.cpp ./src/path.cpp
--- dist/kdl_export/src/path.cpp	2008-08-19 04:50:49.000000000 -0700
+++ ./src/path.cpp	2008-10-27 23:07:05.000000000 -0700
@@ -51,6 +51,7 @@
 #include "path_roundedcomposite.hpp"
 #include "path_cyclic_closed.hpp"
 #include <memory>
+#include <cstring>
 
 namespace KDL {
 
diff -ur dist/kdl_export/src/velocityprofile.cpp ./src/velocityprofile.cpp
--- dist/kdl_export/src/velocityprofile.cpp	2008-08-19 04:50:49.000000000 -0700
+++ ./src/velocityprofile.cpp	2008-10-27 23:05:24.000000000 -0700
@@ -46,6 +46,7 @@
 #include "velocityprofile_dirac.hpp"
 #include "velocityprofile_trap.hpp"
 #include "velocityprofile_traphalf.hpp"
+#include <cstring>
 
 namespace KDL {
 
