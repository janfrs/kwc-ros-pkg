#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of the Willow Garage nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
"""
monitorBatteries

To run, invoke nodes/monitorBatteries
"""
 
import rostools
rostools.update_path('IBPSBatteryInterface')

import os, sys, getopt, traceback, logging
import rospy
import time
import operator
import select
import time
import os

from robot_msgs.msg import * 

NAME = 'monitorBatteries'

def usage(stdout, progname):
    print >>stdout, """%s [-h]

"""%progname+rospy.USAGE_ENV

# returns total as checksum
# input - string
def checksum(st):
    return reduce(operator.add, map(ord, st))
# returns total mod 256 as checksum
# input - string
def checksum256(st):
    return reduce(operator.add, map(ord, st)) % 256
#    return reduce(operator.add, map(ord, st)) % 256

def hex2dec(s):
    """return the integer value of a hexadecimal string s"""
    return int(s, 16)

def readmask(hexstr):
    char = hex2dec(hexstr)
    mask = []
    for i in range(0,16):
        if char & (1 << i):
            mask.append(True)
        else:
            mask.append(False)
    return mask


class powerBattery:
    def __init__(self):
        self.present = False
        self.charging = False
        self.supplying_power = False
        self.w_charge_power = False
        self.power_no_good = False
        self.charge_inhibited = False
        self.voltage = 0.0
        self.current = 0.0
        self.average_current = 0.0
        self.temperature = 0.0
        self.max_relative_charge_error = 0
        self.absolute_charge = 0
        self.relative_charge = 0
        self.remaining_capacity = 0
        self.full_charge_capacity = 0
        self.run_time_to_empty = 0
        self.average_time_to_empty = 0
        self.average_time_to_full = 0
        self.battery_status = ""
        #self.capacity_mode = ""
        self.conditioning_needed = 0
        self.cycle_count = 0
        self.design_capacity = 0
        self.design_voltage = 0
#        self.secification_info = 
#        self.manufacture_date = 
        self.serial_number = ""
##        self.chemistry = ""
        self.last_time = time.time()

class powerController:
    def __init__(self):
        self.time_remaining = 0
        self.average_charge = 0
#        self.batteries = [powerBattery(),powerBattery(),powerBattery(),powerBattery()]
        self.batteries = [powerBattery(),powerBattery(),powerBattery(),powerBattery(),powerBattery(),powerBattery(),powerBattery(),powerBattery()]
        self.latest_system_messages = []
        self.last_time = time.time()

    def new_system_message(self, mess):
        self.latest_system_messages.append(mess)
        while len(self.latest_system_messages) > 10:
            self.latest_system_messages.pop(0)

    def total_current(self):
        total_current = 0.0;
        for batt in self.batteries:
            total_current += batt.current
        return total_current

    def average_voltage(self):
        total_voltage = 0.0;
        count = 0
        for batt in self.batteries:
            if batt.present:
                total_voltage += batt.voltage
                count += 1

        if count == 0:
            return 0.0
        else:
            return total_voltage/float(count)
    
class robotPower:
    def __init__(self):
        print "made robot power"
        self.controllers = [powerController(),powerController(),powerController(),powerController()]
        self.pub = rospy.TopicPub("/diagnostics", DiagnosticMessage)
        self.battery_state_pub = rospy.TopicPub("battery_state", BatteryState)
        self.full_charge_energy = 0

    def print_remaining(self):
        print "___________________________________"
        print "Battery Controller Information:"
        print "-----------------------------------"
        print 'time remaining per battery pack in minutes'
        print '1: %d, 2:%d, 3:%d, 4:%d'%(self.controllers[0].time_remaining,self.controllers[1].time_remaining,self.controllers[2].time_remaining,self.controllers[3].time_remaining)
        print "average charge percentage"
        print '1: %d, 2:%d, 3:%d, 4:%d'%(self.controllers[0].average_charge,self.controllers[1].average_charge,self.controllers[2].average_charge,self.controllers[3].average_charge)
        print "total_current"
        print '1: %.2f, 2:%.2f, 3:%.2f, 4:%.2f'%(self.controllers[0].total_current(),self.controllers[1].total_current(),self.controllers[2].total_current(),self.controllers[3].total_current())
        print "average_voltage"
        print '1: %.2f, 2:%.2f, 3:%.2f, 4:%.2f'%(self.controllers[0].average_voltage(),self.controllers[1].average_voltage(),self.controllers[2].average_voltage(),self.controllers[3].average_voltage())
        print "time since last update"
        print '1: %.2f, 2:%.2f, 3:%.2f, 4:%.2f'%(time.time() - self.controllers[0].last_time,time.time() - self.controllers[1].last_time,time.time() - self.controllers[2].last_time,time.time() - self.controllers[3].last_time)

        controller_counter = 0
        for controller in self.controllers:
            battery_counter = 0
            for b in controller.batteries:
                if b.present:
                    print "Controller:%d Battery:%d:: V: %.2f Vdesign: %.2f I: %.2f Iave: %.2f Temp: %.1f RelChg: %.1f AbsChg: %.1f RemCap: %.1f Capdesign: %.1f TTEAve: %.1f TTERun: %.1f TTF: %.1f Cycles: %d Serial: %s Update: %f"%(controller_counter, battery_counter, b.voltage, b.design_voltage, b.current, b.average_current, b.temperature, b.relative_charge, b.absolute_charge, b.remaining_capacity, b.design_capacity, b.average_time_to_empty, b.run_time_to_empty, b.average_time_to_full, b.cycle_count, b.serial_number, time.time() - b.last_time)
                battery_counter = battery_counter + 1 # There must be a better way to enumerate this
            controller_counter = controller_counter + 1

        for control in self.controllers:
            if len(control.latest_system_messages) > 0:
                print "latest system messages:"
                for message in control.latest_system_messages:
                    print message

    ## Send out the state of the controller on a diagnostic message
    def broadcast_diagnostic(self):
        stat = []
        timeout = 0
        try:
            timeout = rospy.get_param("timeout")
        except KeyError:
            timeout = 10.0

        for c in range(0,len(self.controllers)):
            sval = []
            sval.append(DiagnosticValue(self.controllers[c].time_remaining, "Time Remaining (min)"))
            sval.append(DiagnosticValue(self.controllers[c].average_charge, "Average charge (percent)"))
            sval.append(DiagnosticValue(self.controllers[c].total_current(), "Current (A)"))
            sval.append(DiagnosticValue(self.controllers[c].average_voltage(), "Voltage (V)"))
            sval.append(DiagnosticValue(time.time() - self.controllers[c].last_time, "Time since update (s)"))
            controller_status_value = 0
            controller_status_string = "All good"
            if timeout < time.time() - self.controllers[c].last_time:
                    controller_status_string = " Timeout %f > %f"%(self.controllers[c].last_time, timeout)
                    controller_status_value = 2
            stat.append(DiagnosticStatus(controller_status_value, "IBPS %d"%c, controller_status_string, sval, []))
            ## @todo make the status string represent errors etc

            for b in range(0,len(self.controllers[c].batteries)):
                bval = []
                stringval = []
                if self.controllers[c].batteries[b].present < 0.5:
                    continue
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].present, "present (0,1)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].charging, "charging (0,1)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].supplying_power, "supplying power (0,1)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].w_charge_power, "with charge power (0,1)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].charge_inhibited, "charge inhibited (0,1)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].voltage, "voltage (V)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].current, "current (A)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].average_current, "average current (1 minute average A)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].temperature, "temperature (K)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].max_relative_charge_error, "max relative charge error (%)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].relative_charge, "relative charge (%)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].remaining_capacity, "remaining capacity (mAh"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].full_charge_capacity, "full charge capacity (mAh)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].run_time_to_empty, "run time to empty (min)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].average_time_to_empty, "average time to empty (min)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].average_time_to_full, "average time to full (min)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].conditioning_needed, "conditioning needed (0,1)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].cycle_count, "cycle count"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].design_capacity, "design capacity (mAh)"))
                bval.append(DiagnosticValue(self.controllers[c].batteries[b].design_voltage, "design voltage (V)"))
                bval.append(DiagnosticValue(time.time() - self.controllers[c].batteries[b].last_time, "Time since update (s)"))
                stringval.append(DiagnosticString("%s"%self.controllers[c].batteries[b].serial_number, "Serial Number"))
##stringval.append(DiagnosticString(self.controllers[c].batteries[b].chemistry, "Chemistry"))

                status_string = ""
                status_value = 0
                
                if len(self.controllers[c].batteries[b].battery_status) != 0:
                    status_value = 1
                    status_string = status_string + " %s"%self.controllers[c].batteries[b].battery_status
                if timeout < time.time() - self.controllers[c].batteries[b].last_time:
                    status_string = status_string + " Timeout %f > %f"%(self.controllers[c].batteries[b].last_time, timeout)
                    status_value = 2
                    
                # Record ok if no errors above
                if len(status_string) == 0:
                    status_string = "OK" 
                    status_value = 0     

                stat.append(DiagnosticStatus(status_value, "Smart Battery %d.%d"%(c,b), status_string, bval, stringval))
                ## @todo make the status string represent errors etc
                            

            
        out = DiagnosticMessage(None, stat)
        self.pub.publish(out)
        print "Send Diagnostic"

        
    ## Send out the state of the controller on a diagnostic message
    def send_battery_state(self):
        stat = []
        full_energy = 0        
        energy = 0
        power = 0
        for c in self.controllers:
            for b in c.batteries:
                if b.present < 0.5:
                    continue
                energy = energy + b.design_voltage * b.remaining_capacity * 3.6 ## assuming mAh capacity
                full_energy = full_energy + b.design_voltage * b.full_charge_capacity * 3.6 ## assuming mAh capacity
                power = power + b.design_voltage * b.current ## assuming mAh capacity

        if self.full_charge_energy != full_energy:
            self.full_charge_energy = full_energy
            rospy.set_param("full_charge_energy", full_energy)

        out = BatteryState(None, energy, power)
        print "Sent Energy: %.0f (J)  Power: %.2f (W)\n"%(energy, power)
        self.battery_state_pub.publish(out)



def monitorBatteriesMain(argv, stdout, env):
    port_name_template = "/dev/ttyUSB"
    port_list = ["/dev/ttyUSB0", "/dev/ttyUSB1", "/dev/ttyUSB2", "/dev/ttyUSB3"] # default list of ports that controllers are on
    #check arguments for a help flag
    optlist, args = getopt.getopt(argv[1:], "h?p:s:t:", ["help","port=","server=","template="])
    for o, a in optlist:
        if o in ("-h","-?","--help"):
            usage(stdout, argv[0])
            return
        elif o in ("-t", "--template"):
            port_name_template = a
        elif o in ("-p", "--port"):
            port_list = [] #clear list and load from 
            for i in range(0,len(a)):
                port_list.append("%s%d"%(port_name_template, int(a[i])))


    rospy.ready(NAME)

    print "opening ports:", port_list

    # set port settings to talk to IBPS
    for port in port_list:
        os.system('stty 19200 <%s'%port)

    # make sure the ports are sending hex
    for name in port_list:
        f = open('%s'%name,'w')
        f.write('X')
        f.close()

    p_num = 0 # temp variable for filling in controller numbers
    port_number = {} # dictionary to hold lookup to port number
    ports = [] # list of opened ports
    for name in port_list:
        ports.append (open('%s'%name,'r'))
        port_number[ports[-1]] = p_num
        p_num = p_num + 1

    myPow = robotPower()

    start_time = time.time()
    last_time = start_time
    last_time_battery_state = start_time
    # continuously read from the ports while not shutdown
    while not rospy.is_shutdown():
        # select from all open ports to wait for new data
        current, blah, blah2 = select.select(ports,[],[],1)
        # figure out which port(s) got new data
        for f in current:
            for p in ports: #determine which port it came in on
                if f == p:
                    port = port_number[p];
            line = f.readline()
            # split on %  to string and checksum
            halves = line.split('%')
            if len(halves) != 2:
                #            print 'I did not split on \% correctly'
                continue
            halves[1]=halves[1].strip()
            halves[0]=halves[0].lstrip('$')

## @todo check checksum

#        print line
#    print halves
#    print len(halves)
#    print checksum256(halves[0])
#    print hex2dec(halves[1])
            #    print hex(255)


            # read first char and switch
            message = halves[0]

            # case C controller

            # split on commas
            # first element is controller number
            # for each pair
            # read index  01-07
            # record value
            if len(message) < 2:
                print "error message too short: \"%s\" from \"%s\""%(message, line)
                print "This often indicates a misconfigured serial port check port:"
                print f
                continue

            # Controller Message Parsing
            if message[0] == 'C':
                controller_number = int(message[1])
                myPow.controllers[port].last_time = time.time()
                #print 'Controller on port %s says:'%(port_string)
                splitmessage = message.split(',')

                #print 'batteries present'
                #print  readmask(splitmessage[2])
                mask = readmask(splitmessage[2])
                for i in range(0,8):
                    myPow.controllers[port].batteries[i].present = mask[i]
                #print 'batteries charging'
                #print  readmask(splitmessage[4])
                mask = readmask(splitmessage[2])
                for i in range(0,8):
                    myPow.controllers[port].batteries[i].charging = mask[i]
                #print 'batteries supplying power to system'
                #print  readmask(splitmessage[6])
                mask = readmask(splitmessage[6])
                for i in range(0,8):
                    myPow.controllers[port].batteries[i].supplying_power = mask[i]
                #print 'batteries which have charge power present'
                #print  readmask(splitmessage[10])
                mask = readmask(splitmessage[10])
                for i in range(0,8):
                    myPow.controllers[port].batteries[i].w_charge_power = mask[i]
                #print 'batteries with "Power no good"'
                #print  readmask(splitmessage[12])
                mask = readmask(splitmessage[12])
                for i in range(0,8):
                    myPow.controllers[port].batteries[i].power_no_good = mask[i]
                #print 'batteries charge inhibited'
                #print  readmask(splitmessage[14])
                mask = readmask(splitmessage[14])
                for i in range(0,8):
                    myPow.controllers[port].batteries[i].charge_inhibited = mask[i]

            else:
                pass

            # Battery Message parsing
            if message[0] == 'B':
                controller_number = int(message[1])
                battery_number = int(message[2]) -1 # -1 for 1 index to 0 index

                #print 'Battery %d on Controller %d'%(battery_number, controller_number)
                myPow.controllers[port].batteries[battery_number].last_time = time.time()

                splitmessage = message.split(',')

                for i in range(0,(len(splitmessage)-1)/2):
                    key = splitmessage[i*2+1]
                    value = splitmessage[i*2+2]
                    #                print 'key %s , value %s'%(splitmessage[i*2+1],splitmessage[i*2+2])
                    #                print 'key %s , value dec %s'%(splitmessage[i*2+1],hex2dec(splitmessage[i*2+2]))

                    if key == '03':
                        mask = readmask(value)
                        if mask[7] == 0:
                            myPow.controllers[port].batteries[battery_number].conditioning_needed = 0
                        else:
                            myPow.controllers[port].batteries[battery_number].conditioning_needed = 1
                            

                    # Temperature Degrees Kelvin
                    if key == '08':
                        #print "temp is %f"%(float(hex2dec(value))/10.0)
                        myPow.controllers[port].batteries[battery_number].temperature = float(hex2dec(value))/10.0


                    # Voltage
                    if key == '09':
                        #print 'voltage is %f'%(float(hex2dec(value))/1000.0)
                        myPow.controllers[port].batteries[battery_number].voltage = float(hex2dec(value))/1000.0 

                    # Current
                    if key == '0A':
                        intval = float(hex2dec(value))
                        if intval < 32767:
                            val = intval
                        else:
                            val = (intval - 65636.0)
                        #print 'current is %f'%(val/1000.0)
                        myPow.controllers[port].batteries[battery_number].current = val/1000.0

                    #  1 minute average current
                    if key == '0B':
                        intval = float(hex2dec(value))
                        if intval < 32767:
                            val = intval
                        else:
                            val = (intval - 65636.0)
                        #print 'current is %f'%(val/1000.0)
                        myPow.controllers[port].batteries[battery_number].average_current = val/1000.0

                    # max error in relative state of charge measurement
                    if key == '0C':
                        myPow.controllers[port].batteries[battery_number].max_relative_charge_error = float(hex2dec(value))
                        
                    # relative state of charge (percentage of full charge capacity)
                    if key == '0D':
                        myPow.controllers[port].batteries[battery_number].relative_charge = float(hex2dec(value))

                    # absolute state of charge (percentage of original charge capacity)
                    if key == '0E':
                        myPow.controllers[port].batteries[battery_number].absolute_charge = float(hex2dec(value))


                    if key == '0F':
                        ## @todo need to check/compare w/ CAPACITY_MODE bit to determine units
                        myPow.controllers[port].batteries[battery_number].remaining_capacity = float(hex2dec(value))
                    if key == '10':
                        ## @todo need to check/compare w/ CAPACITY_MODE bit to determine units
                        myPow.controllers[port].batteries[battery_number].full_charge_capacity = float(hex2dec(value))
                        
                    if key == '11':
                        myPow.controllers[port].batteries[battery_number].run_time_to_empty = float(hex2dec(value))
                        
                    if key == '12':
                        myPow.controllers[port].batteries[battery_number].average_time_to_empty = float(hex2dec(value))
                        
                    if key == '13':
                        myPow.controllers[port].batteries[battery_number].average_time_to_full = float(hex2dec(value))
                        
                        # 14 and 15 undocumented
                        
## @todo 0x16 battery status a large bit field with lots of parsing
                    if key == '16':
                        myPow.controllers[port].batteries[battery_number].battery_status = ""
                        mask = readmask(value)
                        if mask[15] == 1:
                            myPow.controllers[port].batteries[battery_number].battery_status = myPow.controllers[port].batteries[battery_number].battery_status + "OVER_CHARGED_ALARM "
                        if mask[14] == 1:
                            myPow.controllers[port].batteries[battery_number].battery_status = myPow.controllers[port].batteries[battery_number].battery_status + "TERMINATE_CHARGE_ALARM "
                        if mask[12] == 1:
                            myPow.controllers[port].batteries[battery_number].battery_status = myPow.controllers[port].batteries[battery_number].battery_status + "OVER_TEMP_ALARM "
                        if mask[11] == 1:
                            myPow.controllers[port].batteries[battery_number].battery_status = myPow.controllers[port].batteries[battery_number].battery_status + "TERMINATE_DISCHARGE_ALARM "
                        if mask[7] == 0:
                            myPow.controllers[port].batteries[battery_number].battery_status = myPow.controllers[port].batteries[battery_number].battery_status + "INITIALZED FALSE "
##A test of actually capturing errors
                            #myPow.controllers[port].batteries[battery_number].battery_status = myPow.controllers[port].batteries[battery_number].battery_status + "TESTING ERROR FALSE "
                        


                    if key == '17':
                        myPow.controllers[port].batteries[battery_number].cycle_count = float(hex2dec(value))
                        
                    if key == '18':
                        ## @todo need to check/compare w/ CAPACITY_MODE bit to determine units
                        myPow.controllers[port].batteries[battery_number].design_capacity = float(hex2dec(value))
                        

                    if key == '19':
                        #print 'voltage is %f'%(float(hex2dec(value))/1000.0)
                        myPow.controllers[port].batteries[battery_number].design_voltage = float(hex2dec(value))/1000.0 


## @todo 0x1A specification info bit field parsing
## @todo 0x1B manufacture date bit field parsing

                    if key == '1C':
                        #print "Serial: %d"%hex2dec(value)
                        myPow.controllers[port].batteries[battery_number].serial_number = str(hex2dec(value))


#                    if key == '22':
#                        myPow.controllers[port].batteries[battery_number].chemistry = hex2desc(value)

                        

            #case System Data Parsing
            if message[0] == 'S':
                splitmessage = message.split(',')
                #print 'System Message'
                for i in range(0,(len(splitmessage)-1)/2):
                    key = splitmessage[i*2+1]
                    value = splitmessage[i*2+2]
#            print 'key %s , value %s'%(key,value)
#            print 'key %s , value dec %s'%(key,hex2dec(value))

                    if key == '01':
                        #print 'time until exhaustion = %s minutes'%hex2dec(value)
                        myPow.controllers[port].time_remaining = int(hex2dec(value))
                    if key == '02':
                        #reserved
                        pass

                    if key == '03':
                        #print 'text message to the system %s'%value
                        myPow.controllers[port].new_system_message(value)

                    if key == '04':
                        #print 'average charge percent %d'% hex2dec(value)
                        myPow.controllers[port].average_charge = int(hex2dec(value))

        #print time.time()
        try:
            increment = rospy.get_param("diagnostic_rate")
        except KeyError:
            increment = 1.0
        if time.time() - last_time > increment:
            last_time = last_time + increment
            print "displaying to screen"
            myPow.print_remaining()
            myPow.broadcast_diagnostic()

        try:
            increment = rospy.get_param("battery_state_rate")
        except KeyError:
            increment = 1.0
        
        if time.time() - last_time_battery_state > increment:
            last_time_battery_state = last_time_battery_state + increment
            print "displaying to screen"
            myPow.print_remaining()
            myPow.send_battery_state()
        
if __name__ == '__main__':
    try:
        monitorBatteriesMain(sys.argv, sys.stdout, os.environ)
    except Exception, e:
        traceback.print_exc()
        #attempt to log, may fail if logger is not properly initialized
        logger = logging.getLogger(NAME)
        logger.error(str(e)+"\n"+traceback.format_exc())        
        print "Exception is causing %s exit, check log for details"%NAME

    print "exiting"

        
