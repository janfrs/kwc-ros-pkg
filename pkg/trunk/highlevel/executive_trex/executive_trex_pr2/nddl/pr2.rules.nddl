/*
 * pr2.rules.nddl
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * All behaviors will oscillate between active and inactive
 */
Behavior::Inactive{
  met_by(Active);
  meets(Active);
}

Behavior::Active{
  met_by(Inactive);
  meets(Inactive);
}

MoveBase::Inactive {
  met_by(Active p);

  // If desired values are set, then they are used to bind parameters of the
  // predecessor to accomplish the desired position.
  if(desX){
    if(desY) {
      if(desTh) {
	eq(p.x, desX);
	eq(p.y, desY);
	eq(p.th, desTh);
      }
    }
  }

  // Require actual and desired values to be within some tolerance
  addEq(x, [-1.5, 1.5], desX);
  addEq(y, [-1.5, 1.5], desY);
  float dt;
  calcAngleDiff(dt, th, desTh);
  addEq(dt, [-.25, .25], 0);
}

MoveBase::Active{
 default(th, 0.0);
}
