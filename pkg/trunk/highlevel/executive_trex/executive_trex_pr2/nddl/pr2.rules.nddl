/*
 * pr2.rules.nddl
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

BaseState::Holds{
  defaultOnCommit(accumulatedDistance, 0.0);
  meets(Holds s);
  float distance;
  calcDistance(distance, x, y, s.x, s.y);
  addEq(accumulatedDistance, distance, s.accumulatedDistance);
}

/**
 * All behaviors will oscillate between active and inactive
 */
Behavior::Inactive{
  meets(Active);
  precedes(start, missionEnd);
}

Behavior::Active{
  meets(Inactive);

  // All behaviors must deactivate before the end of the agent time window
  precedes(end, missionEnd);
}

MoveBase::Inactive {
  // If desired values are set, then they are used to bind parameters of the
  // predecessor to accomplish the desired position.
  if(desX){
    if(desY) {
      if(desTh) {
	met_by(Active p);
	eq(p.x, desX);
	eq(p.y, desY);
	eq(p.th, desTh);
      }
    }
  }

  // Require actual and desired values to be within some tolerance
  addEq(x, [-1.5, 1.5], desX);
  addEq(y, [-1.5, 1.5], desY);
  addEq(th, [-.25, .25], desTh);
}

MoveBase::Active{
 default(th, 0.0);
 leq(max_duration, object.max_duration);

  // If at the end, apply a default to the timeout flag so that it is not zero.
  // This ensures the flag is set even if a max duration bound is not imposed
  if(end){
    defaultOnCommit(timed_out, false);
  }
}

MoveArm::Inactive{
  if(des_shoulder_pan){
    if(des_shoulder_pitch){
      if(des_upperarm_roll){
	if(des_elbow_flex){
	  if(des_forearm_roll){
	    if(des_wrist_flex){
	      if(des_gripper_roll){
		met_by(Active p);
		eq(p.shoulder_pan, des_shoulder_pan);
		eq(p.shoulder_pitch, des_shoulder_pitch);
		eq(p.upperarm_roll, des_upperarm_roll);
		eq(p.elbow_flex, des_elbow_flex);
		eq(p.forearm_roll, des_forearm_roll);
		eq(p.wrist_flex, des_wrist_flex);
		eq(p.gripper_roll, des_gripper_roll);

		//checking desired values
		addEq(shoulder_pan, [-.15, .15], des_shoulder_pan);
		addEq(shoulder_pitch, [-.15, .15], des_shoulder_pitch);
		addEq(upperarm_roll, [-.15, .15], des_upperarm_roll);
		addEq(elbow_flex, [-.15, .15], des_elbow_flex);
		addEq(forearm_roll, [-.15, .15], des_forearm_roll);
		addEq(wrist_flex, [-.15, .15], des_wrist_flex);
		addEq(gripper_roll, [-.15, .15], des_gripper_roll);
	      }
	    }
	  }
	}
      }
    }
  }
}


MoveEndEffector::Inactive{
  if(des_shoulder_pan){
    if(des_shoulder_pitch){
      if(des_upperarm_roll){
	if(des_elbow_flex){
	  if(des_forearm_roll){
	    if(des_wrist_flex){
	      if(des_gripper_roll){
		met_by(Active p);
		eq(p.shoulder_pan, des_shoulder_pan);
		eq(p.shoulder_pitch, des_shoulder_pitch);
		eq(p.upperarm_roll, des_upperarm_roll);
		eq(p.elbow_flex, des_elbow_flex);
		eq(p.forearm_roll, des_forearm_roll);
		eq(p.wrist_flex, des_wrist_flex);
		eq(p.gripper_roll, des_gripper_roll);

		//checking desired values
		addEq(shoulder_pan, [-.15, .15], des_shoulder_pan);
		addEq(shoulder_pitch, [-.15, .15], des_shoulder_pitch);
		addEq(upperarm_roll, [-.15, .15], des_upperarm_roll);
		addEq(elbow_flex, [-.15, .15], des_elbow_flex);
		addEq(forearm_roll, [-.15, .15], des_forearm_roll);
		addEq(wrist_flex, [-.15, .15], des_wrist_flex);
		addEq(gripper_roll, [-.15, .15], des_gripper_roll);
	      }
	    }
	  }
	}
      }
    }
  }
}
