#include "pr2.declarations.nddl"
#include "pr2.rules.nddl"

float XY_ERROR = 1.0;
float THETA_ERROR = 0.1;
float MIN_RECHARGE = 500.0;
typedef float [0.0 1.0] UNIT_FLOAT;

/**
 * Monitors battery state information
 * @see BatteryState.msg
 */
class BatteryState extends AgentTimeline {
  float discharge_limit; // Percentage of total capacity we are allowed to draw down before recharging
  float recharge_level; // Percentage of total capacity we expect to be at or better than after recharging

  predicate Holds {
    float energy_remaining; // Remaining energy in Joules
    float energy_capacity; // Total energy capacity
    float power_consumption; // Power load in Watts
    UNIT_FLOAT percentage_remaining; // Derived value - energy_remaining/ energy_capacity
    mulEq(energy_capacity, percentage_remaining, energy_remaining);
  }

  BatteryState(Mode _mode, float ds, float rc){
    super(_mode, "Holds");
    discharge_limit = ds;
    recharge_level = rc;
  }

  BatteryState(Mode _mode){
    super(_mode, "Holds");
    discharge_limit = 0.1;
    recharge_level = 0.9;
  }
};

/**
 * This is an abstract state variable internal to the executive which reflects if we are 
 * able to do useful work or if we should focus on recharging. Tripping this stae variable
 * into a recharging state will lock out other activities from execution until we are able to
 * finish recharging.
 */
class WorkingStatus extends AgentTimeline {

  predicate Holds{bool recharging;}

  WorkingStatus(){
    super(Internal, "Holds");
  }
};

/**
 * A waypoint to go to
 */
class Location {
  float x;
  float y;
  float th;

  Location(float x_, float y_, float th_){
    x = x_;
    y = y_;
    th = th_;
  }
};

/**
 * The x, y, and theta values for a charging station. These describe the
 * target base pose for the robot when recharging.
 */
class ChargingStation extends Location {
  ChargingStation(float x, float y, float th){
    super(x, y, th);
  }
};

class Waypoint extends Location {
  Waypoint(float x, float y, float th){
    super(x, y, th);
  }
};

/**
 * A Navigator can navigate towards the given waypoint by repeatedly calling a lower level base controller (MoveBase). This pattern will allow
 * suspension and resumption of progress towards a goal if pre-empted by the need to recharge.
 */
class Navigator extends Behavior {

  /**
   * When active, we are pursuing a waypoint, although we may be pre-empted
   */
  predicate Active{
    Waypoint w;
  }

  Navigator(){
    super(Internal, "Inactive");
  }
};

/**
 * A top level timeline that will drive navigation goals until a target iteration count is reached.
 */
class VenusDeMiles extends AgentTimeline {

  predicate Holds{
    int iterationCount; // Current iteration count
    int iterationLimit; // Iteration Limit (when done)
    bool alwaysBusy; // When true, keep going
    Waypoint w; // Way point to achieve
  }

  VenusDeMiles(){
    super(Internal, "Holds");
  }
};

/**
 * A simple iterator pattern - drives subgoaling on the Navigator Timeline
 */
VenusDeMiles::Holds{
  defaultOnCommit(iterationCount, 0);
  defaultOnCommit(iterationLimit, 0);
  defaultOnCommit(alwaysBusy, false);

  if(alwaysBusy == true){
    eq(iterationLimit, 1);
  }

  bool busy;
  testLT(busy, 0, iterationLimit);
  if(busy == true){
    // Alternatives:
    // navigator[start + [0, inf], end] = Active(randomSelect(w))
    randomSelect(w);
    ends(Navigator.Active n);
    eq(n.w, w);
    precedes(start, n.start);

    // Carry forward parameters
    meets(Holds s);
    addEq(iterationCount, 1, s.iterationCount);
    eq(iterationLimit, s.iterationLimit);
    eq(alwaysBusy, s.alwaysBusy);
  }
}

/**
 * Encapsulates the task of unplugging the robot.
 */
class RechargeController extends Behavior {

  /**
   * The recharge controller has an expected pose when in an inactive state
   */
  predicate Inactive{
    float desX;
    float desY;
    float desTh;
    UNIT_FLOAT goal_recharge_level;
  }

  /**
   * When active, the recharge controller takes care of any local positioning, emailingm waiting etc.,
   * until such time as the battery has been recharged to the required level
   */
  predicate Active {
    float x;
    float y;
    float th;
    UNIT_FLOAT recharge_level;
  }

};

/**
 * Each update is monitored and can trigger a transition to recharging
 */
BatteryState::Holds {
  // If below the threshold, transition working status to recharge
  // if(discharge_limit > (energy_remaining / energy_capacity))
  //  workingStatus[start+1, end] == Holds(true);
  bool mustRecharge;
  testLEQ(mustRecharge, percentage_remaining, object.discharge_limit);
  if(mustRecharge == true){
    any(WorkingStatus.Holds ws);
    temporalDistance(start, [-inf, 1], ws.start); 
    precedes(end, ws.end);
    eq(ws.recharging, true);
  }
}

WorkingStatus::Holds{
  // We should toggle between recharging and not recharging
  // this[end] == Holds(!recharging); 
  meets(Holds s);
  neq(s.recharging, recharging);

  // By default we are not recharging
  defaultOnCommit(recharging, false);

  // Do the recharging if appropriate
  if(recharging == true){
    // Selection of a charging station can happen in principle in a number of ways. The ideal scenario is that actual obstacle data
    // is used as a constraint on the available charging station. This could occur where we would say something like:
    //   collissionFree(cs);
    // However, no such integration is available and it is an open question how to interpret that constraint given a temporal
    // context.
    //
    // We can select from the available set via the planner. This would allow branching over thde decision. This could yield a very
    // high branching factor.
    // We can pick the nearest available - which is simple and efficient. However, it may force a situation where we  re-commit to an
    // unreachable location. This would look like what we had implemented before:
    //   met_by(BaseState.Holds bs);
    //   nearestReachableLocation(bs.x, bs.y, cs);
    //
    // Instead we will use the randomSelect again, and revisit this later
    ChargingStation cs;
    randomSelect(cs);

    // rechargeController[*, end] = Active(cs.x, cs.y, cs.th)
    any(RechargeController.Active rc);
    eq(rc.x, cs.x);
    eq(rc.y, cs.y);
    eq(rc.th, cs.th);
    concurrent(rc.end, end);

    // check expected end conditions. Notation assumes a single predicate, otherwise it would be
    // ambiguous. Actually, it assumes that there is exactly one predicate with that parameter. At run
    // time this can resolve to a token that cannot be inserted. At compile time, it must resolve unabiguously
    // to a token
    // where w = batteryState[level] : (w.energy_remaining/w.energy_capacity) >= recharge_level;
    if(end){
      meets(BatteryState.Holds bs_e);
      leq(rc.recharge_level, bs_e.percentage_remaining);
    }
  }
}

/**
 * Constrain so that the recharge controller switches between plugging on and unplugging
 */
RechargeController::Inactive{
  // Preceded by an effort to get to a desired pose. This drives regression from the goal for planning
  // this[start-1] == Active(desX, desY, desTh, goal_recharge_level)
  if(desX){
    if(desY){
      if(desTh){
	met_by(Active p);
	eq(p.x, desX);
	eq(p.y, desY);
	eq(p.th, desTh);
	eq(p.recharge_level, goal_recharge_level);
      }
    }
  }

  // Compare values based on base state. We are only reading these values. This is an important idiom
  // to distinguish inputs evaluated from execution rather than planned for. This could be captured with suitable
  // syntax in the language to make it more explicit what is going on. All we are really doing here
  // is binding default values from execution
  // baseState[start] == Holds( desX + [-0.25, 0.25], desY + [-0.25, 0.25], desTh + [-0.25, 0.25])
  if(start){
    starts(BaseState.Holds bs);
    addEq(bs.x, [-0.25, 0.25], desX);
    addEq(bs.y, [-0.25, 0.25], desY);
    addEq(bs.th, [-0.25, 0.25], desTh);
  }
}

RechargeController::Active{
  BatteryState bs;
  eq(recharge_level, bs.recharge_level);

  // When busy pluging in or unplugging, we require that we are located, and stationary, at the
  // correct charging station. This is derived by the given parameters
  // Alternatives:
  // moveBase[start, end] == Inactive(*, *, *, x, y, th);
  // contained_by(moveBase.Inactive(*, *, *, x, y, th):
  any(MoveBase.Inactive mb);
  eq(mb.desX, x);
  eq(mb.desY, y);
  eq(mb.desTh, th);
  leq(duration, mb.duration);
  precedes(mb.start, start);
  precedes(end, mb.end);
}

Navigator::Active{
  // An assignment statement? We mean to transition the state
  // label mb: moveBase[*, end] = Active(w.x, w.y, w.th);
  any(MoveBase.Active mb);
  eq(mb.x, w.x);
  eq(mb.y, w.y);
  eq(mb.th, w.th);
  concurrent(mb.end, end);

  // We further constrain mb so that it begins within this interval
  // start <= mb.start
  precedes(start, mb.start);

  // ws[mb.start, mb.end] == Holds(false);
  any(WorkingStatus.Holds ws);
  eq(ws.recharging, false);
  precedes(ws.start, mb.start);
  precedes(mb.end, ws.end);
  leq(mb.duration, ws.duration);

  // Check end conditions. Note that this formulation should always be resolved in implementation
  // by binding to an existing token. We allow for the fact that an effort to achieve the goal may have timed out,
  // in which case we will not check the end condition (which would force a replan). Insetad we will simply let it go.
  // s = baseState[end];
  // distance(s.x, s.y, w.x, w.y) <= XY_ERROR
  bool temp_t;
  eq(mb.timed_out, temp_t);
  if(end){
    if(temp_t == false){
      ends(BaseState.Holds s);
      float distance;
      calcDistance(distance, s.x, s.y, w.x, w.y);
      leq(distance, XY_ERROR);
    }
  }
}
