/*
 * pr2.model.nddl
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <ORGANIZATION> nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Provides for all class declarations for the pr2 model
 */

#include "TREX.nddl" // TREX base classes

typedef int [0 5] PRIORITY; /* Used to assign a priority to goals */

float BASE_POSITION_ERROR = 1.0;
float ANGLE_ERROR = .2;
float END_EFFECTOR_POSITION_ERROR = 0.01;
float END_EFFECTOR_STEP_SIZE = 5.0;

float OPEN_GRIPPER_GAP = 0.20;
float OPEN_GRIPPER_FORCE = 200.0;

float CLOSED_GRIPPER_GAP = 0.00;
float CLOSED_GRIPPER_FORCE = 200.0;


/**
 * BaseState will capture position and orientation.
 */
class BaseState extends AgentTimeline {
	predicate Holds{
		float x;
		float y;
		float th;
	}

	BaseState(Mode _mode){
		super(_mode, "Holds");
	}
};

/**
 * Timeline structure for End Effector state
 */
class EndEffectorState extends AgentTimeline {
  bool isLeft;

  predicate Holds{
    float rot1_1;
    float rot1_2;
    float rot1_3;
    float rot2_1;
    float rot2_2;
    float rot2_3;
    float rot3_1;
    float rot3_2;
    float rot3_3;
    float x;
    float y;
    float z;
  }

  EndEffectorState(Mode _mode, bool _isLeft){
    super(_mode, "Holds");
    isLeft = _isLeft;
  }
};


/**
 * ArmState will capture position and orientation.
 */
class ArmState extends AgentTimeline {

  bool isLeft; // true if the left arm

  predicate Holds{
    float shoulder_pan;
    float shoulder_pitch;
    float upperarm_roll;
    float elbow_flex;
    float forearm_roll;
    float wrist_flex;
    float gripper_roll;
  }

  ArmState(Mode _mode, bool _isLeft){
    super(_mode, "Holds");
    isLeft = _isLeft;
  }
};


/**
 * Encapsulate Behaviors that have a state of active or inactive
 */
class Behavior extends AgentTimeline {
	predicate Inactive{}

	predicate Active{}

	Behavior(Mode _mode){
		super(_mode, "Inactive");
	}
};


/**
 * MoveBase behavior will handle active control of vehicle to accomplish 
 * a waypoint. This maps to the wave front player in the 2D nav stack.
 */
class MoveBase extends Behavior {
  predicate Inactive{
    float x;
    float y;
    float th;
    float desX;
    float desY;
    float desTh;
  }

  // Parameters to get to the target
  predicate Active{
    float x;
    float y;
    float th;
  }

  MoveBase(Mode _mode){
    super(_mode);
  }
};

/**
 * MoveArm behavior will handle active control to move the arm to a desired joint configuration
 */
class MoveArm extends Behavior {

  bool isLeft; // True if this is for the left arm, else false.
  
  predicate Inactive{
    float shoulder_pan;
    float shoulder_pitch;
    float upperarm_roll;
    float elbow_flex;
    float forearm_roll;
    float wrist_flex;
    float gripper_roll;

    float des_shoulder_pan;
    float des_shoulder_pitch;
    float des_upperarm_roll;
    float des_elbow_flex;
    float des_forearm_roll;
    float des_wrist_flex;
    float des_gripper_roll;
  }

  predicate Active {
    float shoulder_pan;
    float shoulder_pitch;
    float upperarm_roll;
    float elbow_flex;
    float forearm_roll;
    float wrist_flex;
    float gripper_roll;

  }
  
  MoveArm(Mode _mode, bool _isLeft){
    super(_mode, "Inactive");
    isLeft = _isLeft;
  }
};
