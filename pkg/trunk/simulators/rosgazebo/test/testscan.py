#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of the Willow Garage nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

## Gazebo test cameras validation 

PKG = 'rosgazebo'
NAME = 'testscan'

import rostools
rostools.update_path(PKG)

import sys, unittest
import os, os.path, threading, time
import rospy, rostest
from std_msgs.msg import *


TARGET_RANGES = [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 1.02020120621, 1.02020120621, 0.994996726513, 0.978999376297, 0.966377794743, 0.954521596432, 
                 0.946537315845, 0.938699901104, 0.931005299091, 0.923867344856, 0.918545365334, 0.913301467896, 0.908134281635, 
                 0.903042435646, 0.898042142391, 0.894432485104, 0.890870153904, 0.887354433537, 0.883884489536, 0.880459964275, 
                 0.877079963684, 0.874371290207, 0.87203514576, 0.869730234146, 0.867456197739, 0.865212798119, 0.862999677658, 
                 0.860816538334, 0.858880698681, 0.857526659966, 0.856195926666, 0.854888141155, 0.853603363037, 0.852341353893, 
                 0.851101875305, 0.849884927273, 0.848810076714, 0.848314881325, 0.847839236259, 0.847383201122, 0.846946537495, 
                 0.846529304981, 0.846131563187, 0.845753133297, 0.845394074917, 0.845493674278, 0.845822274685, 0.846170067787, 
                 0.846537172794, 0.846923649311, 0.847329437733, 0.847754657269, 0.848199427128, 0.848777770996, 0.849939465523, 
                 0.851123332977, 0.852329492569, 0.853558063507, 0.854809224606, 0.856083095074, 0.85737991333, 0.858728706837, 
                 0.860843420029, 0.862987458706, 0.865161120892, 0.867364525795, 0.869598209858, 0.871862351894, 0.874157428741, 
                 0.877089142799, 0.880418121815, 0.883790969849, 0.887208282948, 0.890670895576, 0.894179165363, 0.898019433022, 
                 0.902963221073, 0.907979309559, 0.913068950176, 0.918233573437, 0.92347484827, 0.930853664875, 0.938418328762, 
                 0.946122050285, 0.953988730907, 0.966012120247, 0.978349208832, 0.994455933571, 0.70413172245, 0.70413172245, 
                 0.699802815914, 0.69553899765, 0.691339015961, 0.687201619148, 0.683125734329, 0.679109990597, 0.681101262569, 
                 0.683556973934, 0.686044812202, 0.688565373421, 0.691119015217, 0.693706274033, 0.696327507496, 0.698884189129, 
                 0.702267229557, 0.706037044525, 0.709827125072, 0.71367174387, 0.717571854591, 0.721528351307, 0.725542485714, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 1.84625160694, 1.84625160694, 
                 1.84267711639, 1.83915615082, 1.83568811417, 1.83227264881, 1.82890927792, 1.82559776306, 1.82233738899, 
                 1.8191280365, 1.81596922874, 1.81286048889, 1.80980145931, 1.80679190159, 1.80383121967, 1.80091929436, 
                 1.79805552959, 1.79523980618, 1.79247164726, 1.78975069523, 1.78707683086, 1.78444945812, 1.78186845779, 
                 1.77933347225, 1.77684426308, 1.77440047264, 1.77200174332, 1.76964783669, 1.76733863354, 1.76507377625, 
                 1.76285290718, 1.76067578793, 1.75854229927, 1.75645208359, 1.75440490246, 1.75240063667, 1.7504389286, 
                 1.74851965904, 1.74664247036, 1.74480736256, 1.743013978, 1.74126207829, 1.73955154419, 1.73788225651, 
                 1.73625385761, 1.73466622829, 1.73311936855, 1.73161280155, 1.7301466465, 1.72872054577, 1.72733438015, 
                 1.72598814964, 1.72468149662, 1.72341430187, 1.7221865654, 1.72099816799, 1.71984875202, 1.7187384367, 
                 1.7176669836, 1.71663427353, 1.71564018726, 1.7146846056, 1.71376752853, 1.71288883686, 1.71204829216, 
                 1.71124601364, 1.71048164368, 1.70975542068, 1.70906698704, 1.70841646194, 1.7078037262, 1.70722866058, 
                 1.7066911459, 1.70619130135, 1.70572900772, 1.70530414581, 1.70491671562, 1.70456671715, 1.70425403118, 
                 1.70397877693, 1.70374071598, 1.70353996754, 1.70337641239, 1.70325005054, 1.70316100121, 1.70310914516, 
                 1.70309448242, 1.70311701298, 1.70317673683, 1.70327365398, 1.70340788364, 1.70357918739, 1.70378780365, 
                 1.70403373241, 1.70431697369, 1.70463752747, 1.70499539375, 1.70539069176, 1.70582354069, 1.70629370213, 
                 1.7068015337, 1.7073469162, 1.70792996883, 1.7085506916, 1.70920920372, 1.70990550518, 1.7106398344, 
                 1.71141219139, 1.71222257614, 1.71307110786, 1.71395790577, 1.71488320827, 1.71584677696, 1.71684896946, 
                 1.71788990498, 1.71896958351, 1.72008812428, 1.72124576569, 1.72244250774, 1.72367858887, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 1.05949211121, 
                 1.05949211121, 1.05673527718, 1.05401551723, 1.05133235455, 1.04868555069, 1.04607462883, 1.04349911213, 
                 1.04095888138, 1.03845345974, 1.03993999958, 1.05028426647, 1.06085050106, 1.07164573669, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 
                 10.0, 10.0, 10.0, 10.0]



class PointCloudTest(unittest.TestCase):
    def __init__(self, *args):
        super(PointCloudTest, self).__init__(*args)
        self.success = False


    def printPointCloud(self, cloud):
        print "["
        i = 0
        for pt in cloud.ranges:
            sys.stdout.write(str(pt) + ", ")
            i = i + 1
            if ((i % 7) == 0):
                print "" #newline
        print "]"


    def pointInput(self, cloud):
        i = 0
        print "Input"
        self.printPointCloud(cloud)
        while (i < len(cloud.ranges) and i < len(TARGET_RANGES)):
            d = cloud.ranges[i] - TARGET_RANGES[i]
            if ((d < -0.001) or (d > 0.001)):
                return
            i = i + 1
        
        os.system("killall gazebo")
        self.success = True
    
    def test_pointcloud(self):
        print "LNK\n"
        rospy.TopicSub("base_scan", LaserScan, self.pointInput)
        rospy.ready(NAME, anonymous=True)
        timeout_t = time.time() + 30.0 #30 seconds
        while not rospy.is_shutdown() and not self.success and time.time() < timeout_t:
            time.sleep(0.1)
        os.system("killall gazebo")
        self.assert_(self.success)
        
    


if __name__ == '__main__':
    rostest.run(PKG, sys.argv[0], PointCloudTest, sys.argv) #, text_mode=True)


